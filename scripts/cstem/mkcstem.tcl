#!/bin/sh
#
# Formake mkcstem.tcl
#
# Copyright (c) 2015-2017, Oleksiy Chernyavskyy
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#\
exec tclsh "$0" ${1+"$@"}

set cc_config "cstem"
set cxx_config "cstem+"

set fid_src [open $argv0 r]
set fid_cc_config [open $cc_config w 0750]
set fid_cxx_config [open $cxx_config w 0750]

set script_start 0
set cc_block 1
set cx_block 1

while {[gets $fid_src line] >= 0} {
  if {$script_start != 2} {
    if {[string match "*CC_CONFIG_START*" $line] == 1} {
      incr script_start
    }
  } else {
    set cc_line 1
    set cx_line 1
    if {[string match "*CC_LINE*" $line] == 1} {
      set cx_line 0
      regsub -all {\s*#*CC_LINE} $line "" line
    } elseif {[string match "*CX_LINE*" $line] == 1} {
      set cc_line 0
      regsub -all {\s*#*CX_LINE} $line "" line
    }

    if {[string match "*CC_BLOCK_START*" $line] == 1} {
      set cc_block 1
      set cx_block 0
    } elseif {[string match "*CX_BLOCK_START*" $line] == 1} {
      set cc_block 0
      set cx_block 1
    } elseif {[string match "*BLOCK_END*" $line] == 1} {
      set cc_block 1
      set cx_block 1
    } else {
      set cxx_line $line
      if {$cc_block == 1 && $cc_line == 1} {
        regsub -all %C% $line C line
        puts $fid_cc_config $line
      }
      if {$cx_block == 1 && $cx_line == 1} {
        regsub -all %C% $cxx_line C++ cxx_line
        puts $fid_cxx_config $cxx_line
      }
    }
  }
}

close $fid_src
close $fid_cc_config
close $fid_cxx_config
exit 0


# CC_CONFIG_START
#!/bin/sh
#
# Generated by mkcstem.tcl
#
########## CC_BLOCK_START
# Formake cstem
########## CX_BLOCK_START
# Formake cstem+
########## BLOCK_END
#
# Copyright (c) 2015-2017, Oleksiy Chernyavskyy
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

abs_path() {
  _sub_orig_dir=`pwd`
  if test $# = 0; then
    abs_path_ret=
    return
  fi
  if test $# = 2; then
    _arg_orig_dir=$1
    _arg=$2
    if echo "$_arg" | grep "^/" > /dev/null; then
      :
    else
      _arg=`echo "$_arg_orig_dir/$_arg" | sed 's!//*!/!g'`
    fi
  else
    _arg=$1
  fi
  if test -e "$_arg"; then
    if test -d $_arg; then
      _file=
    else
      _file=`basename $_arg`
      _arg=`dirname -- $_arg`
    fi

    cd $_cd_param $_arg
    abs_path_ret=`pwd`
    if test x"$_file" != "x"; then
      abs_path_ret="$abs_path_ret/$_file"
    fi

    cd $_cd_param $_sub_orig_dir
  else
    if echo "$_arg" | grep "^/" > /dev/null; then
      abs_path_ret="$_arg"
    else
      abs_path_ret="$_sub_orig_dir/$_arg"
    fi
    abs_path_ret=`echo "$abs_path_ret" | sed 's#//*#/#g'`
    abs_path_ret=`echo "$abs_path_ret" | sed 's#/*$#/#'`
    string_prev=
    while test "x$abs_path_ret" != "x$string_prev" ; do
      string_prev=$abs_path_ret
      abs_path_ret=`echo "$abs_path_ret" | sed 's#/[^/][^/][^/][^/]*/\.\./#/#g' | sed 's#/[^/][^/.]/\.\./#/#g' | sed 's#/[^/.][^/]/\.\./#/#g' | sed 's#/[^/.]/\.\./#/#g'`
      abs_path_ret=`echo "$abs_path_ret" | sed 's#^/\.\./#/#' | sed 's#^/\.\.$#/#'`
      abs_path_ret=`echo "$abs_path_ret" | sed 's#/\./#/#g' | sed 's#/\.$#/#'`
    done
    abs_path_ret=`echo "$abs_path_ret" | sed 's#/$##' | sed 's#^$#/#'`
  fi
}

script_name=`basename $0`
orig_dir=`pwd`
abs_path $0
script_abs=$abs_path_ret
script_dir=`dirname $script_abs`
out_format=
########## CC_BLOCK_START
config_file="$script_dir/cstem.conf"
ext="c"
########## CX_BLOCK_START
config_file="$script_dir/cstem+.conf"
ext="C"
########## BLOCK_END
tmp_dir=/tmp/cstem_$$
version_string="0.4"


################################################################################
# LOAD CONFIG
if test -f $script_dir/mk.conf; then
  . $script_dir/mk.conf
fi
########## CC_BLOCK_START
if test -f $script_dir/cstem.conf; then
  . $script_dir/cstem.conf
fi
########## CX_BLOCK_START
if test -f $script_dir/cstem+.conf; then
  . $script_dir/cstem+.conf
fi
########## BLOCK_END
################################################################################

prop_list="
cmd
########## CC_BLOCK_START
cflags
########## CX_BLOCK_START
cxxflags
########## BLOCK_END
ldflags
id
version
std
os
os_version
kernel
arch
bitness
endianess
data_model
"

print_help() {
cat <<EOF
%C% system query and test tool

$script_name [probe] OPTIONS
$script_name test OPTIONS
$script_name def OPTIONS
$script_name config OPTIONS

$script_name -h|-help|--help
$script_name -help-props
$script_name -v

 -h|-help|--help       print this help
 -help-props           print a detailed list of compiler properties
 -v                    print version

PROBE MODE (DEFAULT). PROBE COMPILER PROPERTIES
 -id                   get compiler id
 -ver                  get compiler version
 -cmd                  get compiler command
########## CC_BLOCK_START
 -cflags               get compiler flags
########## CX_BLOCK_START
 -cxxflags             get compiler flags
########## BLOCK_END
 -ldflags              get linker flags
 -std                  get %C% language standard
 -os                   get target OS
 -osver                get target OS version
 -kernel               get target kernel
 -arch                 get target architecture
 -bits                 get target bitness
 -endian               get target endianess
 -dm                   get target data model
 -f1                   print in format 1> VAR="VALUE"
 -f2                   print in format 2> FIELD: VALUE
 -f3                   print in format 3> VALUE
########## CC_BLOCK_START
 CC=<CMD>              specify compiler command
 CFLAGS=<FLAGS>        specify compiler flags
 CFLAGS_ADD=<FLAGS>    specify additional compiler flags
########## CX_BLOCK_START
 CXX=<CMD>             specify compiler command
 CXXFLAGS=<FLAGS>      specify compiler flags
 CXXFLAGS_ADD=<FLAGS>  specify additional compiler flags
########## BLOCK_END

CONFIG MODE. SPECIFY DEFAULT OPTIONS
########## CC_BLOCK_START
 CC=<CMD>              specify compiler command
 CFLAGS=<FLAGS>        specify compiler flags
########## CX_BLOCK_START
 CXX=<CMD>             specify compiler command
 CXXFLAGS=<FLAGS>      specify compiler flags
########## BLOCK_END
 LD=<CMD>              specify linker command
 LDFLAGS=<FLAGS>       specify linker flags

TEST MODE. TEST SYSTEM CAPABILITIES
 -n                    no echo
 -f                    echo only on fail
 -disable-ld           disable any linking tests
 -out=FILE             for every subtest generate status variable and write it to a FILE
 -def-out=FILE         for every subtest generate status define and write it to a FILE
 -status=VAR           generate status variable/define VAR=1 if test passed ok
 -no-break             do not break when some test are not passed
 -log[=FILE]           print log to a standard output or to a specified file
########## CC_BLOCK_START
 CC=<CMD>              specify compiler command
 CFLAGS=<FLAGS>        specify compiler flags
 CFLAGS_ADD=<FLAGS>    specify additional compiler flags
########## CX_BLOCK_START
 CXX=<CMD>             specify compiler command
 CXXFLAGS=<FLAGS>      specify compiler flags
 CXXFLAGS_ADD=<FLAGS>  specify additional compiler flags
########## BLOCK_END
 LD=<CMD>              specify linker command
 LDFLAGS=<FLAGS>       specify linker flags
 LDFLAGS_ADD=<FLAGS>   specify additional linker flags
 INC=<FILES>           include header files
########## CC_BLOCK_START
 -cc [CMD]             test C compiler
 -cflags=FLAGS         test C compiler flags
 -ld [CMD]             test C linker
########## CX_BLOCK_START
 -cxx [CMD]            test C++ compiler
 -cxxflags=FLAGS       test C++ compiler flags
 -ld [CMD]             test C++ linker
########## BLOCK_END
 -ldflags=FLAGS        test linker flags
 -lib ..               test system libraries
 -inc ..               test library headers
 -def ..               test library defines
 -type ..              test library types
 -enum ..              test library enum constants
 -var ..               test library extern variables
 -func ..              test library functions
 -sym ..               test library symbols
 -rval ..              test library rvalues (define, enum, variable)
 -cstr TEXT            test one line source string
 -l*                   test system libraries
 "#if* ..."            test preprocessor conditional directives
########## CC_BLOCK_START
 *.h|*.H               test library header files
 *.c|*.C               test source files
########## CX_BLOCK_START
 *.h|*.H|*.hpp         test library header files. Other file extensions are recognized
 *.c|*.C|*.cpp         test source files. Other file extensions are recognized
########## BLOCK_END
 *.so|*.so.*           test dynamic libraries
 *.a                   test static libraries
 standard compiler and linker flags are accepted: -I -D -l -L

DEF MODE. READ PREPROCESSOR DEFINES
########## CC_BLOCK_START
 CC=<CMD>              specify compiler command
 CFLAGS=<FLAGS>        specify compiler flags
 CFLAGS_ADD=<FLAGS>    specify additional compiler flags
########## CX_BLOCK_START
 CXX=<CMD>             specify compiler command
 CXXFLAGS=<FLAGS>      specify compiler flags
 CXXFLAGS_ADD=<FLAGS>  specify additional compiler flags
########## BLOCK_END
 INC=<FILES>           include header files
########## CC_BLOCK_START
 -cc CMD               specify compiler command
 -cflags=FLAGS         specify compiler flags
 *.h|*.H               include headers
########## CX_BLOCK_START
 -cxx [CMD]            specify compiler command
 -cxxflags=FLAGS       specify compiler flags
 *.h|*.H|*.hpp         include header files. Other file extensions are recognized
########## BLOCK_END
 -inc ..               include header files
 *                     list of preprocessor defines to read
 standard CPP flags are accepted: -I -D
EOF
}

print_help_props() {
cat <<EOF
########## CC_BLOCK_START
COMPILERS
--------------------------------------------------------------------------------
ack               Amsterdam Compiler Kit
altium_chc        Altium C-to-Hardware (CHC) compiler
altium_cmb        Altium MicroBlaze C
c166              Keil C166
c51               Keil C51
compcert          CompCert C
hpansic           HP ANSI C
imagecraft        ImageCraft C
lcc               LCC (A Retargetable Compiler for ANSI C)
pelles            Pelles C
sdcc              SDCC (Small Device C Compiler)
tinyc             Tiny C Compiler (TCC, TinyCC)
vbcc              VBCC
vosc              Stratus VOS C
########## CX_BLOCK_START
COMPILERS
--------------------------------------------------------------------------------
hpacc             HP aC++
########## BLOCK_END
armc              ARM Compiler (by ARM)
borlandc          Borland C++ (by Borland, CodeGear, Embarcadero)
clang             Clang
codewrr           CodeWarrior
comeau            Comeau C/C++
diabc             Wind River Diab Compiler
dignus            Dignus Systems/C and Systems/C++
dmc               Digital Mars C/C++
edg               Edison Design Group
ekopath           PathScale EKOPath
gcc               GCC
ghs               Green Hill C/C++
iar               IAR C/C++
intel             Intel C/C++
metaware          MetaWare C/C++
mingw             MinGW
mingw64           Mingw-w64
mipspro           SGI MIPSPro
mri               Microtec C/C++
msc               Microsoft Visual C/C++
open64            Open64
pgi               Portland Group C/C++
renesas           Renesas C/C++
snc               SN C/C++ Compiler (ProDG)
sunpro            Solaris Studio (Sun Studio, SunPro)
tendra            TenDRA C/C++
ticc              Texas Instruments C/C++ Compiler
watcom            Watcom C/C++ (Open Watcom C/C++)
xlc               IBM XL C/C++

########## CC_BLOCK_START
LANGUAGE STANDARDS
--------------------------------------------------------------------------------
c89               C89 (ANSI C, ANSI X3.159-1989, C90, ISO C, ISO/IEC 9899:1990)
c95               C95 (ISO/IEC 9899-1:1994)
c99               C99 (ISO/IEC 9899:1999)
c11               C11 (ISO/IEC 9899:2011)

########## CX_BLOCK_START
LANGUAGE STANDARDS
--------------------------------------------------------------------------------
cxx98             C++98 (ISO/IEC 14882:1998)
cxx11             C++11 (ISO/IEC 14882:2011)
cxx14             C++14 (ISO/IEC 14882:2014)
cxx_cli           C++/CLI (ECMA-372)
embedded_cxx      Embedded C++ (EC++)
########## BLOCK_END

TARGET OPERATING SYSTEMS
--------------------------------------------------------------------------------
aix               AIX (Advanced Interactive eXecutive)
amigaos           AmigaOS
android           Android
cygwin            Cygwin
dragonfly         DragonFly BSD
ecos              eCos (Embedded Configurable Operating System)
freebsd           FreeBSD
gnuhurd           GNU/Hurd
gnulinux          GNU/Linux
hpux              HP-UX (Hewlett-Packard UniX)
integrity         Integrity
interix           Interix (POSIX-conformant Unix subsystem for Windows)
irix              IRIX
lynxos            LynxOS RTOS
minix             MINIX
morphos           MorphOS
netbsd            NetBSD
nonstop           NonStop
nucleus           Nucleus RTOS
openbsd           OpenBSD
os9               Microware OS-9
osx               OS X (Mac OS X)
qnx               QNX
solaris           Solaris
syllable          Syllable Desktop
vos               Stratus VOS (Virtual Operating System)
vxworks           VxWorks
windows           Windows
zos               IBM z/OS

TARGET KERNELS
--------------------------------------------------------------------------------
freebsd           FreeBSD
linux             Linux

TARGET ARCHITECTURES
--------------------------------------------------------------------------------
alpha             Alpha
arm               ARM (Advanced RISC Machine)
arm64             ARM 64-bit (ARMv8, AArch64 or ARM64)
blackfin          Blackfin
epiphany          Epiphany
hppa              PA-RISC
ia64              IA-64
mips              MIPS
powerpc           PowerPC
sparc             SPARC
superh            SuperH
x86               x86
x86_64            x86-64 (AMD64)
zarch             IBM z/Architecture

TARGET BITNESS
--------------------------------------------------------------------------------
32                32-bit CPU
64                64-bit CPU

TARGET ENDIANESS
--------------------------------------------------------------------------------
big               Big-endian
little            Little-endian

TARGET DATA MODELS        char|short|int32|int|long|pointer|long long (int64)
------------------------------+-----+-----+---+----+-------+--------------------
lp32              LP32    8   |16   |     |16 |32  |32     |
ilp32             ILP32   8   |16   |     |32 |32  |32     |
ilp64             ILP64   8   |16   |32   |64 |64  |64     |64
llp64             LLP64   8   |16   |     |32 |32  |64     |64
lp64              LP64    8   |16   |     |32 |64  |64     |64
EOF
}

print_version() {
########## CC_BLOCK_START
  echo "Formake cstem $version_string"
########## CX_BLOCK_START
  echo "Formake cstem+ $version_string"
########## BLOCK_END
}

probe_os() {
  config_os=unknown

  uname >/dev/null 2>&1
  if test $? -eq 127; then
    return
  fi

  uname_s=`(uname -s) 2>/dev/null` || uname_s=unknown

  if test "x$uname_s" = x; then
    uname_s=unknown
  fi
  uname_s_lc=`echo "$uname_s" | tr [A-Z] [a-z]`

  case "$uname_s_lc" in
    netbsd)
      config_os=netbsd
      ;;
    bitrig)
      config_os=bitrig
      ;;
    openbsd)
      config_os=openbsd
      ;;
    mirbsd)
      config_os=mirbsd
      ;;
    amigaos)
      config_os=amiga
      ;;
    morphos)
      config_os=morphos
      ;;
    z/vm)
      config_os=zvm
      ;;
    riscos)
      config_os=riscos
      ;;
    sunos)
      config_os=solaris
      ;;
    irix*)
      config_os=irix
      ;;
    aix)
      config_os=aix
      ;;
    hp-ux)
      config_os=hpux
      ;;
    freebsd)
      config_os=freebsd
      ;;
    cygwin)
      config_os=cygwin
      ;;
    mingw64)
      config_os=mingw64
      ;;
    mingw*)
      config_os=mingw
      ;;
    windows32*)
      config_os=mingw
      ;;
    interix)
      config_os=interix
      ;;
    windows_95 | windows_98 | windows_nt)
      config_os=mks
      ;;
    minix)
      config_os=minix
      ;;
    linux)
      config_os=gnulinux
      ;;
    syllable)
      config_os=syllable
      ;;
    lynxos)
      config_os=lynxos
      ;;
    haiku)
      config_os=haiku
      ;;
    darwin)
      config_os=darwin
      ;;
    procnto* | qnx)
      config_os=qnx
      ;;
    dragonfly)
      config_os=dragonfly
      ;;
    aros)
      config_os=aros
      ;;
    vmkernel)
      config_os=esx
      ;;
  esac
}

check_cc() {
  cc_is_ok=

  $cc_cmd >/dev/null 2>&1
  if test $? -eq 127; then
    return
  fi

  cc_cmd_base=`basename $cc_cmd`
  case $cc_cmd_base in
    gcc*|g++*)
      CPP_FLAG=-E
      ;;
    *)
      CPP_FLAG=-E
      ;;
  esac

  test_dir=/tmp/cstem_data_$$
  rm -rf $test_dir
  mkdir $test_dir
  cd $test_dir

  test_h="cc_test.h"
  cat >$test_h <<EOF
#define MY_DEFINE 1
#ifdef MY_DEFINE
  #define CPP_OK
#endif
EOF
  $cc_cmd $check_cflags $CPP_FLAG $test_h >/dev/null 2>&1
  ret_code=$?
  if test $ret_code -ne 0; then
    cd $orig_dir
    rm -rf $test_dir
    return
  fi

########## CC_BLOCK_START
  test_src="test.c"
  cat > $test_src <<EOF
int main(int argc, char** argv)
{
  return 0;
}
EOF
########## CX_BLOCK_START
  test_src="test.cpp"
  cat > $test_src <<EOF
class test_class
{
  public:
    int i;
};

int main(int argc, char** argv)
{
  test_class t;
  return 0;
}
EOF
########## BLOCK_END

  if $cc_cmd $check_cflags -c $test_src >/dev/null 2>&1; then
    cc_is_ok=1
  fi

  cd $orig_dir
  rm -rf $test_dir
}

read_cc_props() {
########## CC_BLOCK_START
  probe_h="/tmp/cstem_$$.c"
########## CX_BLOCK_START
  probe_h="/tmp/cstem_$$.cpp"
########## BLOCK_END
  cat $script_abs | sed -n -e '/\* COMPILER DEFINES \*/,$p' | grep -v "^EOF" > $probe_h
  probe_h_out="/tmp/cstem_$$_out"
########## CC_BLOCK_START
  $cc_cmd $CFLAGS $CPP_FLAG $probe_h 2>/dev/null > $probe_h_out
########## CX_BLOCK_START
  $cc_cmd $CXXFLAGS $CPP_FLAG $probe_h 2>/dev/null > $probe_h_out
########## BLOCK_END
  probe_sh="/tmp/cstem_$$.sh"
  cat $probe_h_out | grep "^D[SV][EA][TL]" | sed 's/=\(.*\)$/="\1"/' | sed 's/""*/"/g' > $probe_sh
  . $probe_sh
  rm -f $probe_sh
  rm -f $probe_h_out
  rm -f $probe_h

########## CC_BLOCK_START
  if test -n "$DSET__STDC__"; then
    prop_std=c89
  fi

  if test -n "$DSET__STDC_VERSION__"; then
    std_version=`echo "$DVAL__STDC_VERSION__" | sed 's/[a-zA-Z_]//g'`
    if test "$std_version" -ge 201112; then
      prop_std=c11
    elif test "$std_version" -ge 199901; then
      prop_std=c99
    elif test "$std_version" -ge 199409; then
      prop_std=c95
    else
      prop_std=c89
    fi
  fi
########## CX_BLOCK_START
  if test -n "$DSET_cplusplus_cli"; then
    prop_std=cxx_cli
  elif test -n "$DSET__embedded_cplusplus"; then
    prop_std=embedded_cxx
  elif test -n "$DSET__cplusplus"; then
    std_version=`echo "$DVAL__cplusplus" | sed 's/[a-zA-Z_]//g'`
    if test "$std_version" -ge 201402; then
      prop_std=cxx14
    elif test "$std_version" -ge 201103; then
      prop_std=cxx11
    elif test "$std_version" -ge 199711; then
      prop_std=cxx98
    fi
  fi
########## BLOCK_END

########## CC_BLOCK_START
  if test -n "$DSET__CMB__"; then
    prop_id=altium_cmb

    if test -n "$DVAL__VERSION__"; then
      prop_vmajor=`expr "0$DVAL__VERSION__" / 1000`
      prop_vminor=`expr "0$DVAL__VERSION__" % 1000`
    fi
    if test -n "$DVAL__REVISION__"; then
      prop_vrevision=`expr "0$DVAL__REVISION__" + 0`
    fi
  fi

  if test -n "$DSET__CHC__"; then
    prop_id=altium_chc

    if test -n "$DVAL__VERSION__"; then
      prop_vmajor=`expr "0$DVAL__VERSION__" / 1000`
      prop_vminor=`expr "0$DVAL__VERSION__" % 1000`
    fi
    if test -n "$DVAL__REVISION__"; then
      prop_vrevision=`expr "0$DVAL__REVISION__" + 0`
    fi
  fi

  if test -n "$DSET__ACK__"; then
    prop_id=ack
  fi
########## BLOCK_END

  if test -n "$DSET__CC_ARM"; then
    prop_id=armc

    if test -n "$DVAL__ARMCC_VERSION"; then
      prop_vmajor=`expr "0$DVAL__ARMCC_VERSION" / 100000`
      tbuf=`expr "0$DVAL__ARMCC_VERSION" % 100000`
      prop_vminor=`expr "0$tbuf" / 10000`
      tbuf=`expr "0$DVAL__ARMCC_VERSION" % 10000`
      prop_vrevision=`expr "0$tbuf" / 1000`
    fi
  fi

  if test -n "$DSET__BORLANDC__" || test -n "$DSET__CODEGEARC__"; then
    prop_id=borlandc
  fi

  if test -n "$DSET__clang__"; then
    prop_id=clang

    prop_vmajor=$DVAL__clang_major__
    prop_vminor=$DVAL__clang_minor__
    prop_vrevision=$DVAL__clang_patchlevel__
  fi

  if test -n "$DSET__COMO__"; then
    prop_id=comeau

    if test -n "$DVAL__COMO_VERSION__"; then
      prop_vmajor=`expr "0$DVAL__COMO_VERSION__" / 100`
      prop_vminor=`expr "0$DVAL__COMO_VERSION__" % 100`
    fi
  fi

########## CC_BLOCK_START
  if test -n "$DSET__COMPCERT__"; then
    prop_id=compcert
  fi
########## BLOCK_END

  if test -n "$DSET__DCC__"; then
    prop_id=diabc

    if test -n "$DVAL__VERSION_NUMBER__"; then
      prop_vmajor=`echo "$DVAL__VERSION_NUMBER__" | sed 's/^\(.\).*/\1/g'`
      prop_vminor=`echo "$DVAL__VERSION_NUMBER__" | sed 's/^.\(.\).*/\1/g'`
      prop_vrevision=`echo "$DVAL__VERSION_NUMBER__" | sed 's/^..\(..\).*/\1/g'`
    fi
  fi

  if test -n "$DSET__DMC__"; then
    prop_id=dmc

    if test -n "$DVAL__DMC__"; then
      tbuf=`echo "$DVAL__DMC__" | sed 's/0[xX]\(.\).*/\1/g'`
      prop_vmajor=`printf "%d" "0x$tbuf"`
      tbuf=`echo "$DVAL__DMC__" | sed 's/0[xX].\(.\).*/\1/g'`
      prop_vminor=`printf "%d" "0x$tbuf"`
      tbuf=`echo "$DVAL__DMC__" | sed 's/0[xX]..\(.\).*/\1/g'`
      prop_vrevision=`printf "%d" "0x$tbuf"`
    fi
  fi

  if test -n "$DSET__SYSC__"; then
    prop_id=dignus

    if test -n "$DVAL__SYSC_VER__"; then
      prop_vmajor=`expr "0$DVAL__SYSC_VER__" / 10000`
      buf=`expr "0$DVAL__SYSC_VER__" % 10000`
      prop_vminor=`expr "0$buf" / 100`
      prop_vrevision=`expr "0$DVAL__SYSC_VER__" % 100`
    fi
  fi

  if test -n "$DSET__EDG__"; then
    prop_id=edg

    if test -n "$DVAL__EDG_VERSION__"; then
      prop_vmajor=`expr "0$DVAL__EDG_VERSION__" / 100`
      prop_vminor=`expr "0$DVAL__EDG_VERSION__" % 100`
    fi
  fi

  if test -n "$DSET__PATHCC__"; then
    prop_id=ekopath

    prop_vmajor=$DVAL__PATHCC__
    prop_vminor=$DVAL__PATHCC_MINOR__
    prop_vrevision=$DVAL__PATHCC_PATCHLEVEL__
  fi

  if test -n "$DSET__ghs__"; then
    prop_id=ghs

    if test -n "$DVAL__GHS_VERSION_NUMBER__"; then
      prop_vmajor=`expr "0$DVAL__GHS_VERSION_NUMBER__" / 100`
      tbuf=`expr "0$DVAL__GHS_VERSION_NUMBER__" % 100`
      prop_vminor=`expr "0$tbuf" / 10`
      prop_vrevision=`expr "0$DVAL__GHS_VERSION_NUMBER__" % 10`
    fi
  fi

########## CC_BLOCK_START
  if test -n "$DSET__HP_cc"; then
    prop_id=hpansic
  fi
########## CX_BLOCK_START
  if test -n "$DSET__HP_aCC"; then
    prop_id=hpacc

    if test -n "$DVAL__HP_aCC"; then
      if test "x$DVAL__HP_aCC" = "x1"; then
        prop_vmajor=1
      else
        prop_vmajor=`expr "0$DVAL__HP_aCC" / 10000`
        tbuf=`expr "0$DVAL__HP_aCC" % 10000`
        prop_vminor=`expr "0$tbuf" / 100`
        prop_vrevision=`expr "0$DVAL__HP_aCC" % 100`
      fi
    fi
  fi
########## BLOCK_END

  if test -n "$DSET__IAR_SYSTEMS_ICC__"; then
    prop_id=iar

    if test -n "$DVAL__VER__"; then
      prop_vmajor=`expr "0$DVAL__VER__" / 100`
      prop_vminor=`expr "0$DVAL__VER__" % 100`
    fi
  fi

  if test -n "$DSET__IBMC__" || test -n "$DVAL__IBMCPP__"; then
    prop_id=xlc

    if test -n "$DSET__COMPILER_VER__"; then
      tbuf=`echo "$DVAL__COMPILER_VER__" | sed 's/0[xX].\(.\).*/\1/g'`
      prop_vmajor=`printf "%d" "0x$tbuf"`
      tbuf=`echo "$DVAL__COMPILER_VER__" | sed 's/0[xX]..\(..\).*/\1/g'`
      prop_vminor=`printf "%d" "0x$tbuf"`
      tbuf=`echo "$DVAL__COMPILER_VER__" | sed 's/0[xX]....\(....\).*/\1/g'`
      prop_vrevision=`printf "%d" "0x$tbuf"`
    elif test -n "$DVAL__xlc__"; then
      tbuf=`echo "0${DVAL__xlc__}" | sed 's/^\([0-9]*\).*/\1/g'`
      prop_vmajor=`expr "0$tbuf" + 0`
      tbuf=`echo "0${DVAL__xlc__}." | sed 's/^[^\.]*\.\([0-9]*\).*/\1/g'`
      prop_vminor=`expr "0$tbuf" + 0`
      tbuf=`echo "0${DVAL__xlc__}.." | sed 's/^[^\.]*\.[^\.]*\.\([0-9]*\).*/\1/g'`
      prop_vrevision=`expr "0$tbuf" + 0`
    elif test -n "$DVAL__IBMC__"; then
      prop_vmajor=`expr "0$DVAL__IBMC__" / 100`
      tbuf=`expr "0$DVAL__IBMC__" % 100`
      prop_vminor=`expr "0$tbuf" / 10`
      prop_vrevision=`expr "0$DVAL__IBMC__" % 10`
    elif test -n "$DVAL__xlC__"; then
      tbuf=`echo "$DVAL__xlC__" | sed 's/0[xX]\(..\).*/\1/g'`
      prop_vmajor=`printf "%d" "0x$tbuf"`
      tbuf=`echo "$DVAL__xlC__" | sed 's/0[xX]..\(..\).*/\1/g'`
      prop_vminor=`printf "%d" "0x$tbuf"`
    elif test -n "$DVAL__IBMCPP__"; then
      prop_vmajor=`expr "0$DVAL__IBMCPP__" / 100`
      tbuf=`expr "0$DVAL__IBMCPP__" % 100`
      prop_vminor=`expr "0$tbuf" / 10`
      prop_vrevision=`expr "0$DVAL__IBMCPP__" % 10`
    fi
  fi

########## CC_BLOCK_START
  if test -n "$DSET__IMAGECRAFT__"; then
    prop_id=imagecraft
  fi
########## BLOCK_END

  if test -n "$DSET__INTEL_COMPILER" || test -n "$DSET__ICC" || test -n "$DSET__ECC" || test -n "$DSET__ICL"; then
    prop_id=intel

    if test -n "$DVAL__INTEL_COMPILER"; then
      prop_vmajor=`expr "0$DVAL__INTEL_COMPILER" / 100`
      tbuf=`expr "0$DVAL__INTEL_COMPILER" % 100`
      prop_vminor=`expr "0$tbuf" / 10`
      prop_vrevision=`expr "0$DVAL__INTEL_COMPILER" % 10`
    fi
  fi

########## CC_BLOCK_START
  if test -n "$DSET__C166__"; then
    prop_id=c166

    if test -n "$DVAL__C166__"; then
      prop_vmajor=`expr "0$DVAL__C166__" / 100`
      prop_vminor=`expr "0$DVAL__C166__" % 100`
    fi
  fi

  if test -n "$DSET__C51__" || test -n "$DSET__CX51__"; then
    prop_id=c51

    if test -n "$DVAL__C51__"; then
      prop_vmajor=`expr "0$DVAL__C51__" / 100`
      prop_vminor=`expr "0$DVAL__C51__" % 100`
    elif test -n "$DVAL__CX51__"; then
      prop_vmajor=`expr "0$DVAL__CX51__" / 100`
      prop_vminor=`expr "0$DVAL__CX51__" % 100`
    fi
  fi

  if test -n "$DSET__LCC__"; then
    prop_id=lcc
  fi
########## BLOCK_END

  if test -n "$DSET__HIGHC__"; then
    prop_id=metaware
  fi

  if test -n "$DSET__MWERKS__" || test -n "$DSET__CWCC__"; then
    prop_id=codewarrior

    if test -n "$DVAL__CWCC__"; then
      tbuf=`echo "$DVAL__CWCC__" | sed 's/0[xX]\(.\).*/\1/g'`
      prop_vmajor=`printf "%d" "0x$tbuf"`
      tbuf=`echo "$DVAL__CWCC__" | sed 's/0[xX].\(.\).*/\1/g'`
      prop_vminor=`printf "%d" "0x$tbuf"`
      tbuf=`echo "$DVAL__CWCC__" | sed 's/0[xX]..\(..\).*/\1/g'`
      prop_vrevision=`printf "%d" "0x$tbuf"`
    elif test -n "$DVAL__MWERKS__"; then
      if test "x$DVAL__MWERKS__" != "x1"; then
        tbuf=`echo "$DVAL__MWERKS__" | sed 's/0[xX]\(.\).*/\1/g'`
        prop_vmajor=`printf "%d" "0x$tbuf"`
        tbuf=`echo "$DVAL__MWERKS__" | sed 's/0[xX].\(.\).*/\1/g'`
        prop_vminor=`printf "%d" "0x$tbuf"`
        tbuf=`echo "$DVAL__MWERKS__" | sed 's/0[xX]..\(..\).*/\1/g'`
        prop_vrevision=`printf "%d" "0x$tbuf"`
      fi
    fi
  fi

  if test -n "$DSET_MSC_VER"; then
    prop_id=msc

    if test -n "$DVAL_MSC_VER"; then
      prop_vmajor=`expr "0$DVAL_MSC_VER" / 100`
      prop_vminor=`expr "0$DVAL_MSC_VER" % 100`
    fi
  fi

  if test -n "$DSET_MRI"; then
    prop_id=mri
  fi

  if test -n "$DSET__MINGW32__"; then
    if test -n "$DSET__MINGW64_VERSION_MAJOR"; then
      prop_id=mingw64
      prop_vmajor=$DVAL__MINGW64_VERSION_MAJOR
      prop_vminor=$DVAL__MINGW64_VERSION_MINOR

      if test -n "$DSET__MINGW64__"; then
        prop_bitness=64
      else
        prop_bitness=32
      fi
    else
      prop_id=mingw
      prop_vmajor=$DVAL__MINGW32_MAJOR_VERSION
      prop_vminor=$DVAL__MINGW32_MINOR_VERSION
    fi
  fi

  if test -n "$DSET__sgi" || test -n "$DSETsgi"; then
    prop_id=mipspro

    version_string=${DVAL_SGI_COMPILER_VERSION:-"$DVAL_COMPILER_VERSION"}
    if test -n "$version_string"; then
      prop_vmajor=`expr "0$version_string" / 100`
      tbuf=`expr "0$version_string" % 100`
      prop_vminor=`expr "0$tbuf" / 10`
      prop_vrevision=`expr "0$version_string" % 10`
    fi
  fi

  if test -n "$DSET__OPEN64__" || test -n "$DSET__OPENCC__"; then
    prop_id=open64

    prop_vmajor=`expr "0$DVAL__OPENCC__" + 0`
    prop_vminor=`expr "0$DVAL__OPENCC_MINOR__" + 0`
    if test -n "$DVAL__OPENCC_PATCHLEVEL__"; then
      tbuf=`echo "${DVAL__OPENCC_PATCHLEVEL__}." | sed 's/^\([^.]*\)\..*/\1/g'`
      prop_vrevision=`expr "0$tbuf" + 0`
    fi
  fi

  if test -n "$DSET__SUNPRO_C" || test -n "$DSET__SUNPRO_CC"; then
    prop_id=sunpro

    version_string=${DVAL__SUNPRO_C:-"$DVAL__SUNPRO_CC"}

    if test -n "$version_string"; then
      tbuf=`echo "$version_string" | sed 's/0[xX]\(.\).*/\1/g'`
      prop_vmajor=`expr "0$tbuf" + 0`
      nchars=`echo "$version_string" | wc -c`
      if test "$nchars" -gt 5; then
        tbuf=`echo "$version_string" | sed 's/0[xX].\(..\).*/\1/g'`
        prop_vminor=`expr "0$tbuf" + 0`
        tbuf=`echo "$version_string" | sed 's/0[xX]...\(.\).*/\1/g'`
        prop_vrevision=`expr "0$tbuf" + 0`
      else
        tbuf=`echo "$version_string" | sed 's/0[xX].\(.\).*/\1/g'`
        prop_vminor=`expr "0$tbuf" + 0`
        tbuf=`echo "$version_string" | sed 's/0[xX]..\(.\).*/\1/g'`
        prop_vrevision=`expr "0$tbuf" + 0`
      fi
    fi
  fi

########## CC_BLOCK_START
  if test -n "$DSET__POCC__"; then
    prop_id=pelles

    if test -n "$DVAL__POCC__"; then
      prop_vmajor=`expr "0$DVAL__POCC__" / 100`
      prop_vminor=`expr "0$DVAL__POCC__" % 100`
    fi
  fi
########## BLOCK_END

  if test -n "$DSET__PGI"; then
    prop_id=pgi

    prop_vmajor=$DVAL__PGIC__
    prop_vminor=$DVAL__PGIC_MINOR__
    prop_vrevision=$DVAL__PGIC_PATCHLEVEL__
  fi

  if test -n "$DSET__RENESAS__" || test -n "$DSET__HITACHI__"; then
    prop_id=renesas

    version_string=${DVAL__RENESAS_VERSION__:-"$DVAL__HITACHI_VERSION__"}

    if test -n "$version_string"; then
      tbuf=`echo "$version_string" | sed 's/0[xX]\(..\).*/\1/g'`
      prop_vmajor=`printf "%d" "0x$tbuf"`
      tbuf=`echo "$version_string" | sed 's/0[xX]..\(..\).*/\1/g'`
      prop_vminor=`printf "%d" "0x$tbuf"`
      nchars=`echo "$version_string" | wc -c`
      if test "$nchars" -gt 6; then
        tbuf=`echo "$version_string" | sed 's/0[xX]....\(..\).*/\1/g'`
        prop_vrevision=`printf "%d" "0x$tbuf"`
      fi
    fi
  fi

########## CC_BLOCK_START
  if test -n "$DSETSDCC"; then
    prop_id=sdcc

    if test -n "$DVALSDCC"; then
      prop_vmajor=`expr "0$DVALSDCC" / 100`
      tbuf=`expr "0$DVALSDCC" % 100`
      prop_vminor=`expr "0$tbuf" / 10`
      prop_vrevision=`expr "0$DVALSDCC" % 10`
    fi
  fi
########## BLOCK_END

  if test -n "$DSET__SNC__"; then
    prop_id=snc
  fi

########## CC_BLOCK_START
  if test -n "$DSET__VOSC__"; then
    prop_id=vosc
  fi
########## BLOCK_END

  if test -n "$DSET__TenDRA__"; then
    prop_id=tendra
  fi

  if test -n "$DSET__TI_COMPILER_VERSION__"; then
    prop_id=ticc

    if test -n "$DVAL__TI_COMPILER_VERSION__"; then
      prop_vmajor=`expr "0$DVAL__TI_COMPILER_VERSION__" / 1000000`
      tbuf=`expr "0$DVAL__TI_COMPILER_VERSION__" % 1000000`
      prop_vminor=`expr "0$tbuf" / 1000`
      prop_vrevision=`expr "0$DVAL__TI_COMPILER_VERSION__" % 1000`
    fi
  fi

########## CC_BLOCK_START
  if test -n "$DSET__TINYC__"; then
    prop_id=tinyc
  fi

  if test -n "$DSET__VBCC__"; then
    prop_id=vbcc
  fi
########## BLOCK_END

  if test -n "$DSET__WATCOMC__"; then
    prop_id=watcom

    if test -n "$DVAL__WATCOMC__"; then
      prop_vmajor=`expr "0$DVAL__WATCOMC__" / 100`
      prop_vminor=`expr "0$DVAL__WATCOMC__" % 100`
    fi
  fi

  if test -n "$DSET__GNUC__" && test -z "$prop_id"; then
    prop_id=gcc

    if test -n "$DVAL__GNUC_VERSION__"; then
      prop_vmajor=`expr "0$DVAL__GNUC_VERSION__" / 10000`
      tbuf=`expr "0$DVAL__GNUC_VERSION__" % 10000`
      prop_vminor=`expr "0$tbuf" / 100`
      prop_vrevision=`expr "0$DVAL__GNUC_VERSION__" % 100`
    else
      prop_vmajor=$DVAL__GNUC__
      prop_vminor=$DVAL__GNUC_MINOR__
      prop_vrevision=$DVAL__GNUC_PATCHLEVEL__
    fi
  fi

  if test -n "$DSET_AIX" || test -n "$DSET__TOS_AIX__"; then
    prop_os=aix

    if test -n "$DSET_AIX3"; then
      prop_os_vmajor=3
    fi
    if test -n "$DSET_AIX31"; then
      prop_os_vmajor=3
    fi
    if test -n "$DSET_AIX4"; then
      prop_os_vmajor=4
    fi
    if test -n "$DSET_AIX41"; then
      prop_os_vmajor=4
    fi
    if test -n "$DSET_AIX5"; then
      prop_os_vmajor=5
    fi
    if test -n "$DSET_AIX51"; then
      prop_os_vmajor=5
    fi
    if test -n "$DSET_AIX6"; then
      prop_os_vmajor=6
    fi
    if test -n "$DSET_AIX61"; then
      prop_os_vmajor=6
    fi
    if test -n "$DSET_AIX7"; then
      prop_os_vmajor=7
    fi
    if test -n "$DSET_AIX71"; then
      prop_os_vmajor=7
    fi
    if test -n "$DSET_AIX8"; then
      prop_os_vmajor=8
    fi
    if test -n "$DSET_AIX81"; then
      prop_os_vmajor=8
    fi
    if test -n "$DSET_AIX9"; then
      prop_os_vmajor=9
    fi
    if test -n "$DSET_AIX91"; then
      prop_os_vmajor=9
    fi
  fi

  if test -n "$DSET__ANDROID__"; then
    prop_os=android
    prop_os_vmajor=$DVAL__ANDROID_API__
  fi

  if test -n "$DSETAMIGA" || test -n "$DSET__amigaos__"; then
    prop_os=amigaos
  fi

  if test -n "$DSET__FreeBSD__"; then
    prop_os=freebsd
    prop_os_vmajor=$DVAL__FreeBSD__
  fi

  if test -n "$DSET__FreeBSD_kernel__"; then
    prop_kernel=freebsd
  fi

  if test -n "$DSET__NetBSD__"; then
    prop_os=netbsd
  fi

  if test -n "$DSET__OpenBSD__"; then
    prop_os=openbsd
  fi

  if test -n "$DSET__DragonFly__"; then
    prop_os=dragonfly
  fi

  if test -n "$DSET__CYGWIN__"; then
    prop_os=cygwin
  fi

  if test -n "$DSET__ECOS"; then
    prop_os=ecos
  fi

  if test -n "$DSET__gnu_hurd__"; then
    prop_os=gnuhurd
  fi

  if test -n "$DSET__gnu_linux__" || test -n "$DSET__gnu_linux"; then
    prop_os=gnulinux
    prop_kernel=linux
  fi

  if test -n "$DSET__linux__" || test -n "$DSETlinux" || test -n "$DSET__linux"; then
    prop_kernel=linux
  fi

  if test -n "$DSET_hpux" || test -n "$DSEThpux" || test -n "$DSET__hpux"; then
    prop_os=hpux
  fi

  if test -n "$DSET__INTEGRITY"; then
    prop_os=integrity
  fi

  if test -n "$DSET__INTERIX"; then
    prop_os=interix
  fi

  if test -n "$DSETsgi" || test -n "$DSET__sgi"; then
    prop_os=irix
  fi

  if test -n "$DSET__Lynx__"; then
    prop_os=lynxos
  fi

  if test -n "$DSET__APPLE__" && test -n "$DSET__MACH__"; then
    prop_os=osx
  fi

  if test -n "$DSET__OS9000" || test -n "$DSET_OSK"; then
    prop_os=os9
  fi

  if test -n "$DSET__minix"; then
    prop_os=minix
  fi

  if test -n "$DSET__MORPHOS__"; then
    prop_os=morphos
  fi

  if test -n "$DSET__TANDEM"; then
    prop_os=nonstop
  fi

  if test -n "$DSET__nucleus__"; then
    prop_os=nucleus
  fi

  if test -n "$DSET__QNX__" || test -n "$DSET__QNXNTO__"; then
    prop_os=qnx
    if test -n "$DVAL_NTO_VERSION"; then
      prop_os_vmajor=`expr "0$DVAL_NTO_VERSION" / 100`
    fi
  fi

  if test -n "$DSETsun" || test -n "$DSET__sun"; then
    if test -n "$DSET__SVR4" || test -n "$DSET__svr4__"; then
      prop_os=solaris
    fi

    if test -n "$DSET__SunOS_5_8"; then
      prop_os_vmajor=8
    elif test -n "$DSET__SunOS_5_9"; then
      prop_os_vmajor=9
    elif test -n "$DSET__SunOS_5_9"; then
      prop_os_vmajor=9
    elif test -n "$DSET__SunOS_5_10"; then
      prop_os_vmajor=10
    elif test -n "$DSET__SunOS_5_11"; then
      prop_os_vmajor=11
    fi
  fi

  if test -n "$DSET__VOS__"; then
    prop_os=vos
  fi

  if test -n "$DSET__SYLLABLE__"; then
    prop_os=syllable
  fi

  if test -n "$DSET__VXWORKS__" || test -n "$DSET__vxworks"; then
    prop_os=vxworks
    if test -n "$DVAL_WRS_VXWORKS_MAJOR"; then
      prop_os_vmajor=$DVAL_WRS_VXWORKS_MAJOR
    fi
  fi

  if test -n "$DSET_WIN32" || test -n "$DSET_WIN64" || test -n "$DSET__WIN32__" || test -n "$DSET__TOS_WIN__" || test -n "$DSET__WINDOWS__"; then
    prop_os=windows
  fi

  if test -n "$DSET__MVS__" || test -n "$DSET__HOS_MVS__" || test -n "$DSET__TOS_MVS__"; then
    prop_os=zos
  fi

  if test -n "$DSET__alpha__" || test -n "$DSET_M_ALPHA"; then
    prop_arch=alpha
    prop_bitness=64
  fi

  if test -n "$DSET__arm__" || test -n "$DSET__thumb__" || test -n "$DSET__TARGET_ARCH_ARM" || test -n "$DSET__TARGET_ARCH_THUMB" || test -n "$DSET_ARM" || test -n "$DSET_M_ARM" || test -n "$DSET_M_ARMT" || test -n "$DSET__arm"; then
    prop_arch=arm
  fi

  if test -n "$DSET__aarch64__"; then
    prop_arch=arm64
    prop_bitness=64
  fi

  if test -n "$DSET__bfin" || test -n "$DSET__BFIN__"; then
    prop_arch=blackfin
  fi

  if test -n "$DSET__epiphany__"; then
    prop_arch=epiphany
  fi

  if test -n "$DSET__hppa__" || test -n "$DSET__HPPA__" || test -n "$DSET__hppa"; then
    prop_arch=hppa
  fi

# X86 start
  if test -n "$DSETi386" || test -n "$DSET__i386" || test -n "$DSET__i386__" || test -n "$DSET__386"; then
    prop_arch=x86
    prop_bitness=32
  fi

  if test -n "$DSET__i486__" || test -n "$DSET__i586__" || test -n "$DSET__i686__"; then
    prop_arch=x86
    prop_bitness=32
  fi

  if test -n "$DSET__IA32__" || test -n "$DSET__X86__" || test -n "$DSET_X86_" || test -n "$DSET__THW_INTEL__" || test -n "$DSET__INTEL__"; then
    prop_arch=x86
    prop_bitness=32
  fi

  if test -n "$DSET_M_IX86" || test -n "$DSET__I86__"; then
    prop_arch=x86
    prop_bitness=32
  fi
# X86 end

  if test -n "$DSET__amd64__" || test -n "$DSET__amd64" || test -n "$DSET__x86_64__" || test -n "$DSET__x86_64" || test -n "$DSET_M_X64" || test -n "$DSET_M_AMD64"; then
    prop_arch=x86_64
    prop_bitness=64
  fi

  if test -n "$DSET__ia64__" || test -n "$DSET_IA64" || test -n "$DSET__IA64__" || test -n "$DSET__ia64" || test -n "$DSET_M_IA64" || test -n "$DSET__itanium__"; then
    prop_arch=ia64
    prop_bitness=64
  fi

  if test -n "$DSET__mips__" || test -n "$DSETmips" || test -n "$DSET__MIPS__" || test -n "$DSET__mips"; then
    prop_arch=mips
  fi

  if test -n "$DSET__powerpc" || test -n "$DSET__powerpc__" || test -n "$DSET__powerpc64__" || test -n "$DSET__POWERPC__" || test -n "$DSET__ppc__" || test -n "$DSET__ppc64__" || test -n "$DSET__PPC__" || test -n "$DSET__PPC64__" || test -n "$DSET_ARCH_PPC" || test -n "$DSET_ARCH_PPC64" || test -n "$DSET_M_PPC" || test -n "$DSET__PPCGECKO__" || test -n "$DSET__PPCBROADWAY__" || test -n "$DSET_XENON" || test -n "$DSET__ppc" || test -n "$DSET__PowerPC__" || test -n "$DSET__PPC" || test -n "$DSET__ppc64"; then
    prop_arch=powerpc
  fi

  if test -n "$DSET__sparc__" || test -n "$DSET__sparc" || test -n "$DSET__sparc64__"; then
    prop_arch=sparc
  fi

  if test -n "$DSET__sh__"; then
    prop_arch=superh
  fi

  if test -n "$DSET__s390x__" || test -n "$DSET__zarch__" || test -n "$DSET__SYSC_ZARCH__"; then
    prop_arch=zarch
    prop_bitness=64
  fi

  if test -n "$DSET__BIG_ENDIAN__" || test -n "$DSET__ARMEB__" || test -n "$DSET__THUMBEB__" || test -n "$DSET__AARCH64EB__" || test -n "$DSET_MIPSEB" || test -n "$DSET__MIPSEB" || test -n "$DSET__MIPSEB__"; then
    prop_endianess=big
  fi

  if test x"$DVAL__BYTE_ORDER__" = "x__ORDER_BIG_ENDIAN__" || test x"$DVAL__FLOAT_WORD_ORDER__" = "x__ORDER_BIG_ENDIAN__"; then
    prop_endianess=big
  fi

  if test -n "$DSET__LITTLE_ENDIAN__" || test -n "$DSET__ARMEL__" || test -n "$DSET__THUMBEL__" || test -n "$DSET__AARCH64EL__" || test -n "$DSET_MIPSEL" || test -n "$DSET__MIPSEL" || test -n "$DSET__MIPSEL__"; then
    prop_endianess=little
  fi

  if test x"$DVAL__BYTE_ORDER__" = "x__ORDER_LITTLE_ENDIAN__" || test x"$DVAL__FLOAT_WORD_ORDER__" = "x__ORDER_LITTLE_ENDIAN__"; then
    prop_endianess=little
  fi

  if test -n "$DSET_ILP32" || test -n "$DSET__ILP32__"; then
    prop_data_model=ilp32
    prop_bitness=32
  fi

  if test -n "$DSET_LP64" || test -n "$DSET__LP64__"; then
    prop_data_model=lp64
    prop_bitness=64
  fi

  prop_version=$prop_vmajor
  if test -n "$prop_vminor"; then
    prop_version="${prop_version}.${prop_vminor}"
    if test -n "$prop_vrevision"; then
      prop_version="${prop_version}.${prop_vrevision}"
    fi
  fi

  prop_os_version=$prop_os_vmajor
}

get_cc() {
  probe_os

  case "$config_os" in
    aix)
      cc_list="cc xlc gcc c99"   ###CC_LINE
      cc_list="xlc++ xlC c++ CC g++"    ###CX_LINE
      ;;
    solaris)
      cc_list="cc gcc c99"   ###CC_LINE
      cc_list="CC g++ c++"    ###CX_LINE
      ;;
    irix)
      cc_list="cc c99 gcc c89"   ###CC_LINE
      cc_list="CC g++"    ###CX_LINE
      ;;
    gnulinux)
      cc_list="gcc cc c99"   ###CC_LINE
      cc_list="g++ c++ CC"    ###CX_LINE
      ;;
    *)
      cc_list="gcc cc c99"    ###CC_LINE
      cc_list="g++ CC c++"    ###CX_LINE
      ;;
  esac
}

perform_probe() {
  cc_is_ok=
  check_cflags=
########## CC_BLOCK_START
  if test -z "$CC"; then
########## CX_BLOCK_START
  if test -z "$CXX"; then
########## BLOCK_END
    get_cc

    for cc_cmd in $cc_list; do
      check_cc
      if test x$cc_is_ok = x1; then
        break
      fi
    done
  else
########## CC_BLOCK_START
    cc_cmd=$CC
########## CX_BLOCK_START
    cc_cmd=$CXX
########## BLOCK_END
    check_cc
  fi

  if test x$cc_is_ok != x1; then
    printf "%s\n" "${script_name}: %C% compiler not found" >&2
    exit 1
  fi

########## CC_BLOCK_START
  if test -n "$CFLAGS"; then
    check_cflags=$CFLAGS
    prop_cflags=$CFLAGS
########## CX_BLOCK_START
  if test -n "$CXXFLAGS"; then
    check_cflags=$CXXFLAGS
    prop_cxxflags=$CXXFLAGS
########## BLOCK_END
    check_cc
    if test x$cc_is_ok != x1; then
########## CC_BLOCK_START
      printf "%s\n" "${script_name}: invalid %C% flags: $CFLAGS" >&2
########## CX_BLOCK_START
      printf "%s\n" "${script_name}: invalid %C% flags: $CXXFLAGS" >&2
########## BLOCK_END
      exit 1
    fi
  fi
  if test -n "$LDFLAGS"; then
    prop_ldflags=$LDFLAGS
  fi
  
  read_cc_props
  prop_cmd=$cc_cmd
}

echo_status() {
  if test "$1" = "-l"; then
    p1=$2
    p2=$3
    printf "\n# $p1\n" "$p2" >> $cstem_log
  else
    p1=$1
    p2=$2
  fi
  if test x$op_no_echo = x; then
    printf "$p1" "$p2"
  elif test x$op_echo_fail = x1; then
    printf "$p1" "$p2" >> $tmp_buf
  fi
}

clean_exit() {
  exit_status=$1

  if test $exit_status != 0 && test x$op_echo_fail = x1 && test -f $tmp_buf; then
    cat $tmp_buf
  fi
  rm -f $tmp_buf

  if test -f $cstem_log; then
    if test x$op_echo_log = x1; then
      printf "\n%s\n%s\n" "LOG" "----------------------------------------" >&2
      cat $cstem_log >&2
    fi
    if test -n "$op_log_file"; then
      cat $cstem_log >> $op_log_file
    fi
  fi
  cd $orig_dir
  rm -rf $tmp_dir
  rm -f $cstem_log

  exit $exit_status
}


log_title() {
  cat <<EOF >>$cstem_log

################################################################################
# $1
EOF
}

log_src() {
  if test -n "$1" && test -f "$1"; then
    echo "****************************************">>$cstem_log
    cat $1 | sed 's/^/* /g' >>$cstem_log
    echo "****************************************">>$cstem_log
  fi
}

setup_test_dir() {
  rm -f $tmp_dir
  mkdir $tmp_dir
  cd $tmp_dir
  
  test_src_base=test_src_base.$ext
  
  rm -f $test_src_base
  echo "" >$test_src_base
  for inc in $op_with_inc; do
    inc=`echo "$inc" | sed 's/[<]//' | sed 's/[>]//'`
    echo "#include <$inc>" >> $test_src_base
  done
}


case x"$1" in
  x-h|x-help|x--help)
    print_help
    exit 0
    ;;
  x-help-props)
    print_help_props
    exit 0
    ;;
  xconfig)
    mode_config=1
    shift
    ;;
  xtest)
    mode_test=1
    shift
    ;;
  xdef)
    mode_def=1
    shift
    ;;
  xprobe)
    mode_probe=1
    shift
    ;;
  x-v)
    print_version
    exit 0
    ;;
  *)
    mode_probe=1
    ;;
esac

if test x$mode_config = x1; then
  param_cc=
  param_cflags=
  param_ldflags=
  have_params=
  while test $# -gt 0; do
    have_params=1
    case "$1" in
########## CC_BLOCK_START
      CC=*)
        param_cc=`echo "$1" | sed 's/^[^=]*=//'`
        ;;
      CFLAGS=*)
        param_cflags=`echo "$1" | sed 's/^[^=]*=//'`
        ;;
########## CX_BLOCK_START
      CXX=*)
        param_cc=`echo "$1" | sed 's/^[^=]*=//'`
        ;;
      CXXFLAGS=*)
        param_cflags=`echo "$1" | sed 's/^[^=]*=//'`
        ;;
########## BLOCK_END
      LD=*)
        param_ld=`echo "$param" | sed 's/^[^=]*=//'`
        ;;
      LDFLAGS=*)
        param_ldflags=`echo "$1" | sed 's/^[^=]*=//'`
        ;;
      *)
        printf "%s\n" "$script_name: invalid parameter $1" >&2
        exit 1
        ;;
    esac
    shift
  done

  if test x$have_params = x1; then
    if test -f $config_file; then
      echo "" > $config_file 2>/dev/null
      if test $? != 0; then
        echo "$script_name: error: could not modify config file $config_file" >&2
        exit 1
      fi
    else
      touch $config_file >/dev/null 2>&1
      if test -f $config_file; then
        :
      else
        echo "$script_name: error: could not create config file $config_file" >&2
        exit 1
      fi
    fi

########## CC_BLOCK_START
    if test -n "$param_cc"; then
      echo "CC=\"$param_cc\"" >>$config_file
    fi
    if test -n "$param_cflags"; then
      echo "CFLAGS=\"$param_cflags\"" >>$config_file
    fi
########## CX_BLOCK_START
    if test -n "$param_cc"; then
      echo "CXX=\"$param_cc\"" >>$config_file
    fi
    if test -n "$param_cflags"; then
      echo "CXXFLAGS=\"$param_cflags\"" >>$config_file
    fi
########## BLOCK_END
    if test -n "$param_ldflags"; then
      echo "LDFLAGS=\"$param_ldflags\"" >>$config_file
    fi
    if test -n "$param_ld"; then
      echo "LD=\"$param_ld\"" >>$config_file
    fi
  else
    rm -f $config_file >/dev/null 2>&1
  fi

  exit 0
fi

if test -f $config_file; then
  . $config_file
fi

if test x$mode_probe = x1; then
  while test $# -gt 0; do
    case "$1" in
########## CC_BLOCK_START
      CC=*)
        CC=`echo "$1" | sed 's/^[^=]*=//'`
        ;;
      CFLAGS=*)
        CFLAGS=`echo "$1" | sed 's/^[^=]*=//'`
        ;;
      CFLAGS_ADD=*)
        CFLAGS_ADD=`echo "$param" | sed 's/^[^=]*=//'`
        ;;
      -cflags)
        print_string="$print_string cflags"
        ;;
########## CX_BLOCK_START
      CXX=*)
        CXX=`echo "$1" | sed 's/^[^=]*=//'`
        ;;
      CXXFLAGS=*)
        CXXFLAGS=`echo "$1" | sed 's/^[^=]*=//'`
        ;;
      CXXFLAGS_ADD=*)
        CXXFLAGS_ADD=`echo "$param" | sed 's/^[^=]*=//'`
        ;;
      -cxxflags)
        print_string="$print_string cxxflags"
        ;;
########## BLOCK_END
      LD=*)
        :
        ;;
      LDFLAGS=*)
        LDFLAGS=`echo "$1" | sed 's/^[^=]*=//'`
        ;;
      LDFLAGS_ADD=*)
        LDFLAGS_ADD=`echo "$param" | sed 's/^[^=]*=//'`
        ;;
      -ldflags)
        print_string="$print_string ldflags"
        ;;
      -id)
        print_string="$print_string id"
        ;;
      -ver)
        print_string="$print_string version"
        ;;
      -cmd)
        print_string="$print_string cmd"
        ;;
      -std)
        print_string="$print_string std"
        ;;
      -os)
        print_string="$print_string os"
        ;;
      -osver)
        print_string="$print_string os_version"
        ;;
      -kernel)
        print_string="$print_string kernel"
        ;;
      -arch)
        print_string="$print_string arch"
        ;;
      -bits)
        print_string="$print_string bitness"
        ;;
      -endian)
        print_string="$print_string endianess"
        ;;
      -dm)
        print_string="$print_string data_model"
        ;;
      -f1|-f2|-f3)
        out_format=`echo "$1" | sed 's/^-f//'`
        ;;
      *)
        printf "%s\n" "$script_name: invalid parameter $1" >&2
        exit 1
        ;;
    esac
    shift
  done

########## CC_BLOCK_START
  CFLAGS=`echo "$CFLAGS $CFLAGS_ADD" | sed 's/^ *//' | sed 's/ *$//'`
########## CX_BLOCK_START
  CXXFLAGS=`echo "$CXXFLAGS $CXXFLAGS_ADD" | sed 's/^ *//' | sed 's/ *$//'`
########## BLOCK_END
  LDFLAGS=`echo "$LDFLAGS $LDFLAGS_ADD" | sed 's/^ *//' | sed 's/ *$//'`

  perform_probe

  if test -z "$print_string" && test -z "$out_format"; then
    cat <<EOF
id:                 ${prop_id:--}
version:            ${prop_version:--}
command:            ${prop_cmd:--}
########## CC_BLOCK_START
cflags:             ${prop_cflags:--}
########## CX_BLOCK_START
cxxflags:           ${prop_cxxflags:--}
########## BLOCK_END
ldflags:            ${prop_ldflags:--}
language standard:  ${prop_std:--}
target os:          ${prop_os:--}
target os version:  ${prop_os_version:--}
target kernel:      ${prop_kernel:--}
target arch:        ${prop_arch:--}
bitness:            ${prop_bitness:--}
endianess:          ${prop_endianess:--}
data model:         ${prop_data_model:--}
EOF
  else
    if test -z "$print_string"; then
########## CC_BLOCK_START
      print_string="cmd cflags id version std os os_version kernel arch bitness endianess data_model"
########## CX_BLOCK_START
      print_string="cmd cxxflags id version std os os_version kernel arch bitness endianess data_model"
########## BLOCK_END
    fi
    print_space=
    for prop in $print_string; do
      prop_var=`echo "$prop" | tr [a-z] [A-Z]`
      eval prop_val=\$prop_$prop
      case x$out_format in
        x)
          printf "%s" "$print_space$prop_val"
          print_space=" "
          ;;
        x1)
          printf "%s\n" "$prop_var=\"$prop_val\""
          ;;
        x2) 
          printf "%s\n" "$prop_var: $prop_val"
          ;;
        x3) 
          printf "%s\n" "${prop_val:--}"
          ;;
      esac
    done
    if test x$out_format = x; then
      printf "\n"
    fi
  fi

  exit 0
fi

if test x$mode_test = x1; then
  tmp_buf="/tmp/cstem_$$_buf.txt"
  rm -f $tmp_buf
  cstem_log=/tmp/cstem$$.log

  current_opt=
  def_num=0
  type_num=0
  while test $# -gt 0; do
    param=`echo "$1" | sed 's/^ *//' | sed 's/^# */#/'`
    case "$param" in
########## CC_BLOCK_START
      CC=*)
        CC=`echo "$param" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
      CFLAGS=*)
        CFLAGS=`echo "$param" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
      CFLAGS_ADD=*)
        CFLAGS_ADD=`echo "$param" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
      -cc)
        op_test_cc=1
        current_opt=cc
        ;;
      -cflags=*)
        op_test_flags=`echo "$param" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
########## CX_BLOCK_START
      CXX=*)
        CXX=`echo "$param" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
      CXXFLAGS=*)
        CXXFLAGS=`echo "$param" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
      CXXFLAGS_ADD=*)
        CXXFLAGS_ADD=`echo "$param" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
      -cxx)
        op_test_cc=1
        current_opt=cxx
        ;;
      -cxxflags=*)
        op_test_flags=`echo "$param" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
########## BLOCK_END
      LD=*)
        LD=`echo "$param" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
      LDFLAGS=*)
        LDFLAGS=`echo "$param" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
      LDFLAGS_ADD=*)
        LDFLAGS_ADD=`echo "$param" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
      INC=*)
        op_with_inc=`echo "$param" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
      -n)
        op_no_echo=1
        op_echo_fail=
        current_opt=
        ;;
      -f)
        op_echo_fail=1
        op_no_echo=1
        current_opt=
        ;;
      -disable-ld)
        op_disable_ld=1
        op_test_ld=
        current_opt=
        ;;
      -out=*)
        op_out=`echo "$param" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
      -def-out=*)
        op_def_out=`echo "$param" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
      -status=*)
        op_status_id=`echo "$param" | sed 's/^[^=]*=//' | sed 's/[^a-zA-Z0-9_]//g'`
        current_opt=
        ;;
      -no-break)
        op_no_break=1
        current_opt=
        ;;
      -ld)
        op_test_ld=1
        op_disable_ld=
        current_opt=ld
        ;;
      -ldflags=*)
        op_test_ldflags=`echo "$param" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
      -lib)
        current_opt=lib
        ;;
      -inc)
        current_opt=inc
        ;;
      -def)
        current_opt=def
        ;;
      -type)
        current_opt='type'
        ;;
      -enum)
        current_opt=enum
        ;;
      -var)
        current_opt=var
        ;;
      -func)
        current_opt=func
        ;;
      -sym)
        current_opt=sym
        ;;
      -rval)
        current_opt=rval
        ;;
      -cstr)
        current_opt=cstr
        ;;
      -log)
        op_echo_log=1
        current_opt=
        ;;
      -log=*)
        op_log_file=`echo "$param" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
      -l*)
        op_libs="$op_libs $param"
        current_opt=
        ;;
      -[ID]*)
        op_with_flags="$op_with_flags $param"
        current_opt=
        ;;
      -L*)
        op_with_ldflags="$op_with_ldflags $param"
        current_opt=
        ;;
      \#if*)
        eval def$def_num=\$param
        def_num=`expr $def_num + 1`
        if test x$current_opt != xdef; then
          current_opt=
        fi
        ;;
########## CC_BLOCK_START
      *.h|*.H)
        op_inc="$op_inc $param"
        current_opt=
        ;;
      *.c|*.C)
        op_src="$op_src $param"
        current_opt=
        ;;
########## CX_BLOCK_START
      *.h|*.H|*.[Hh]++|*.[Hh][Hh]|*.[Hh][Xx][Xx]|*.[Hh][Pp][Pp])
        op_inc="$op_inc $param"
        current_opt=
        ;;
      *.c|*.C|*.[Cc][Cc]|*.[Cc][Pp][Pp]|*.[Cc][Xx][Xx]|*.[Cc]++)
        op_src="$op_src $param"
        current_opt=
        ;;
########## BLOCK_END
      *.so|*.so.*)
        op_libs="$op_libs $param"
        if test x$current_opt != xlib; then
          current_opt=
        fi
        ;;
      *.a)
        op_libs="$op_libs $param"
        if test x$current_opt != xlib; then
          current_opt=
        fi
        ;;
      *)
        if test -z "$current_opt"; then
          printf "%s\n" "$script_name: invalid parameter $param" >&2
          clean_exit 1
        fi
        case "$current_opt" in
########## CC_BLOCK_START
          cc)
            CC=$param
            current_opt=
            ;;
########## CX_BLOCK_START
          cxx)
            CXX=$param
            current_opt=
            ;;
########## BLOCK_END
          ld)
            LD=$param
            current_opt=
            ;;
          lib)
            param=`echo "$param" | sed 's/^lib//'`
            if test -n "$param"; then
              op_libs="$op_libs -l$param"
            fi
            ;;
          inc)
            op_inc="$op_inc $param"
            ;;
          def)
            eval def$def_num=\$param
            def_num=`expr $def_num + 1`
            ;;
          type)
            eval type$type_num=\$param
            type_num=`expr $type_num + 1`
            ;;
          enum)
            op_enum="$op_enum $param"
            ;;
          var)
            op_var="$op_var $param"
            ;;
          func)
            op_func="$op_func $param"
            ;;
          sym)
            op_sym="$op_sym $param"
            ;;
          rval)
            op_rval="$op_rval $param"
            ;;
          cstr)
            op_cstr=$1
            current_opt=
            ;;
        esac
        ;;
    esac
    shift
  done
########## CC_BLOCK_START
  CFLAGS="$op_with_flags $CFLAGS $CFLAGS_ADD"
  op_with_flags=$CFLAGS
########## CX_BLOCK_START
  CXXFLAGS="$op_with_flags $CXXFLAGS $CXXFLAGS_ADD"
  op_with_flags=$CXXFLAGS
########## BLOCK_END
  op_with_flags=`echo "$op_with_flags" | sed 's/^ *//' | sed 's/ *$//'`

  op_with_ldflags="$op_with_ldflags $LDFLAGS $LDFLAGS_ADD"
  op_with_ldflags=`echo "$op_with_ldflags" | sed 's/^ *//' | sed 's/ *$//'`

  op_test_flags=`echo "$op_test_flags" | sed 's/^ *//' | sed 's/ *$//'`
  op_test_ldflags=`echo "$op_test_ldflags" | sed 's/^ *//' | sed 's/ *$//'`

  op_with_inc=`echo "$op_with_inc" | sed 's/^ *//' | sed 's/ *$//'`

  if test -n "$op_log_file"; then
    if echo "$op_log_file" | grep "^/" > /dev/null; then : ; else
      op_log_file="$orig_dir/$op_log_file"
    fi
  fi
  if test -n "$op_out"; then
    if echo "$op_out" | grep "^/" > /dev/null; then : ; else
      op_out="$orig_dir/$op_out"
    fi
  fi
  if test -n "$op_def_out"; then
    if echo "$op_def_out" | grep "^/" > /dev/null; then : ; else
      op_def_out="$orig_dir/$op_def_out"
    fi
  fi


################################################################################
# SET UP COMPILER AND LINKER
  CPP_FLAG=-E

########## CC_BLOCK_START
  CC_CMD=$CC
########## CX_BLOCK_START
  CC_CMD=$CXX
########## BLOCK_END
  if test -z "$CC_CMD"; then
    perform_probe
    CC_CMD=$prop_cmd
  fi

  if test -n "$LD"; then
    LD_CMD=$LD
  else
    LD_CMD=$CC_CMD
  fi
  
################################################################################
# SET UP TEST DIR
  setup_test_dir
  test_src=test_src.$ext
  
################################################################################
# TEST COMPILER
  log_title "TEST COMPILER"
  if test x$op_test_cc = x1; then
    echo_status -l "%s" "checking compiler $CC_CMD ... "
  fi

  cat <<EOF >test.$ext
int main(int argc, char *argv[]) {
  return 0;
}
EOF
  log_src test.$ext
  echo "$CC_CMD -c -o test.o test.$ext" >> $cstem_log
  $CC_CMD -c -o test.o test.$ext>> $cstem_log 2>&1
  ret=$?
  if test $ret -ne 0; then
    if test x$op_test_cc = x1; then
      echo_status "%s\n" "Failed"
    else
      echo_status "%s\n" "checking compiler $CC_CMD ... Failed"
    fi
    clean_exit $ret
  else
    if test x$op_test_cc = x1; then
      echo_status "%s\n" "OK"
    fi
  fi
  rm -f test.$ext
  rm -f test.o
  
################################################################################
# TEST op_with_flags
  if test -n "$op_with_flags"; then
    log_title "TEST ADDITIONAL COMPILER FLAGS (op_with_flags)"

    cat <<EOF >test.$ext
int main(int argc, char *argv[]) {
  return 0;
}
EOF
    log_src test.$ext
    echo "$CC_CMD $op_with_flags -c -o test.o test.$ext" >> $cstem_log
    $CC_CMD $op_with_flags -c -o test.o test.$ext>> $cstem_log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "checking compiler flags '$op_with_flags'... Failed"
      clean_exit $ret
    fi
    rm -f test.$ext
    rm -f test.o
  fi

################################################################################
# TEST COMPILER FLAGS
  if test -n "$op_test_flags"; then
    log_title "TEST COMPILER FLAGS"
    echo_status -l "%s" "checking compiler flags $op_test_flags ... "

    cat <<EOF >test.$ext
int main(int argc, char *argv[]) {
  return 0;
}
EOF
    log_src test.$ext
    echo "$CC_CMD $op_with_flags $op_test_flags -c -o test.o test.$ext" >> $cstem_log
    $CC_CMD $op_with_flags $op_test_flags -c -o test.o test.$ext>> $cstem_log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      flags=
      for flag in $op_test_flags; do
       echo_status "%s" "  $flag ... "
       flags="$flags $flag"
       echo "$CC_CMD $op_with_flags $flags -c -o test.o test.$ext" >> $cstem_log
       $CC_CMD $op_with_flags $flags -c -o test.o test.$ext>> $cstem_log 2>&1
       _ret=$?
       if test $_ret -ne 0; then
         echo_status "%s\n" "Failed"
         clean_exit $_ret
       else
         echo_status "%s\n" "OK"
       fi
      done
      clean_exit $ret
    else
      echo_status "%s\n" "OK"
    fi
    rm -f test.$ext
    rm -f test.o
  fi
  
################################################################################
# TEST LD
  if test x$op_disable_ld = x; then
    log_title "TEST LD"
    if test x$op_test_ld = x1; then
      echo_status -l "%s" "checking linker $LD_CMD ... "
    fi

    cat <<EOF >test.$ext
int main(int argc, char *argv[]) {
  return 0;
}
EOF
    log_src test.$ext
    echo "$CC_CMD $op_with_flags $op_test_flags -c -o test.o test.$ext" >> $cstem_log
    $CC_CMD $op_with_flags $op_test_flags -c -o test.o test.$ext>> $cstem_log 2>&1
    
    echo "$LD_CMD -o app test.o" >> $cstem_log
    $LD_CMD -o app test.o>> $cstem_log 2>&1
    ret=$?
    if test $ret -ne 0; then
      if test x$op_test_ld = x1; then
        echo_status "%s\n" "Failed"
      else
        echo_status "%s\n" "checking linker $LD_CMD ... Failed"
      fi
      if test x$op_no_break = x; then
        clean_exit $ret
      fi
      exit_status=1
    else
      if test x$op_test_ld = x1; then
        echo_status "%s\n" "OK"
      fi
    fi
    rm -f app
    rm -f test.o
    rm -f test.$ext
  fi

################################################################################
# TEST op_with_ldflags
  if test x$op_disable_ld = x && test -n "$op_with_ldflags"; then
    log_title "TEST ADDITIONAL LILNKER FLAGS (op_with_ldflags)"

    cat <<EOF >test.$ext
int main(int argc, char *argv[]) {
  return 0;
}
EOF
    log_src test.$ext
    echo "$CC_CMD $op_with_flags $op_test_flags -c -o test.o test.$ext" >> $cstem_log
    $CC_CMD $op_with_flags $op_test_flags -c -o test.o test.$ext>> $cstem_log 2>&1
    
    echo "$LD_CMD -o app test.o $op_with_ldflags" >> $cstem_log
    $LD_CMD -o app test.o $op_with_ldflags >> $cstem_log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "checking linker flags '$op_with_ldflags'... Failed"
      if test x$op_no_break = x; then
        clean_exit $ret
      fi
      exit_status=1
    fi
    rm -f app
    rm -f test.o
    rm -f test.$ext
  fi

################################################################################
# TEST LD FLAGS
  if test x$op_disable_ld = x && test -n "$op_test_ldflags"; then
    log_title "TEST LD FLAGS"
    echo_status -l "%s" "checking linker flags $op_test_ldflags ... "

    cat <<EOF >test.$ext
int main(int argc, char *argv[]) {
  return 0;
}
EOF
    log_src test.$ext
    echo "$CC_CMD $op_with_flags $op_test_flags -c -o test.o test.$ext" >> $cstem_log
    $CC_CMD $op_with_flags $op_test_flags -c -o test.o test.$ext>> $cstem_log 2>&1

    echo "$LD_CMD -o app test.o $op_with_ldflags $op_test_ldflags" >> $cstem_log
    $LD_CMD -o app test.o $op_with_ldflags $op_test_ldflags >> $cstem_log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      flags=
      for flag in $op_test_ldflags; do
        echo_status "%s" "  $flag ... "
        flags="$flags $flag"
        echo "$LD_CMD -o app test.o $op_with_ldflags $flags" >> $cstem_log
        $LD_CMD -o app test.o $op_with_ldflags $flags >> $cstem_log 2>&1
        _ret=$?
        if test $_ret -ne 0; then
          echo_status "%s\n" "Failed"
          if test x$op_no_break = x; then
            clean_exit $_ret
          else
            break
          fi
        else
          echo_status "%s\n" "OK"
        fi
      done
      if test x$op_no_break = x; then
        clean_exit $ret
      fi
      exit_status=1
    else
      echo_status "%s\n" "OK"
    fi
    rm -f app
    rm -f test.o
  fi

################################################################################
# TEST op_with_inc
  if test -n "$op_with_inc"; then
    log_title "TEST ADDITIONAL HEADERS (op_with_inc)"

    cat $test_src_base > $test_src
    echo "int cstem_test = 1;" >> $test_src

    log_src $test_src
    echo "$CC_CMD $op_with_flags $op_test_flags -c -o test.o $test_src" >> $cstem_log
    $CC_CMD $op_with_flags $op_test_flags -c -o test.o $test_src >> $cstem_log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "checking headers '$op_with_inc'... Failed"
      if test x$op_no_break = x; then
        clean_exit $ret
      fi
      exit_status=1
    fi
    rm -f test.o
  fi

################################################################################
# TEST HEADERS
  if test -n "$op_inc"; then
    log_title "TEST HEADERS"
    for inc in $op_inc; do
      cat $test_src_base > $test_src
      inc=`echo "$inc" | sed 's/[<]//' | sed 's/[>]//'`
      echo "#include <$inc>" >> $test_src
      echo_status -l "%s" "checking header $inc ... "
      log_src $test_src
      echo "$CC_CMD $op_with_flags $op_test_flags -c -o test.o $test_src" >> $cstem_log
      $CC_CMD $op_with_flags $op_test_flags -c -o test.o $test_src >> $cstem_log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        if test x$op_no_break = x; then
          clean_exit $ret
        fi
        exit_status=1
      else
        echo_status "%s\n" "OK"
        if test -n "$op_out$op_def_out"; then
          out_var=`echo "SC_HAVE_INC_$inc" | sed 's/[^a-zA-Z0-9_]/_/g' | tr '[a-z]' '[A-Z]'`
          if test -n "$op_out"; then
            echo "$out_var=1" >>$op_out
          fi
          if test -n "$op_def_out"; then
            echo "#define $out_var 1" >>$op_def_out
          fi
        fi
        echo "#include <$inc>" >> $test_src_base
      fi
      rm -f test.o
    done
  fi
  
################################################################################
# TEST CPP DEFINES
  if test $def_num -gt 0; then
    log_title "TEST CPP DEFINES"
  fi
  def_idx=0
  while test $def_idx -lt $def_num; do
    cat $test_src_base > $test_src

    if_directive=0
    eval def_string=\$def$def_idx
    def_string=`echo "$def_string" | sed 's/^ *//'`
    echo_status -l "%s" "checking define $def_string ... "
    case "$def_string" in
      '#if'*)
        if_directive=1
        ;;
    esac
  
    if test $if_directive = 1; then
      cat >>$test_src <<EOF
$def_string
#else
#error cstem: false directive: $def_string
#endif

EOF
    else
      def_name=`echo "$def_string" | sed 's/[^a-zA-Z0-9_].*//'`
      case "$def_name" in
        [0-9]*)
          echo "$script_name: error invalid macro $def_name" >&2
          clean_exit 1
          ;;
      esac
      rpart=`echo "$def_string" | sed 's/[a-zA-Z0-9_]*//'`
      if test "x$rpart" = x; then
        cat >>$test_src <<EOF
#ifndef $def_name
#error cstem: $def_name not defined
#endif

EOF
      else
        opstr=`echo "$rpart" | sed 's/^\([=><!]*\).*/\1/'`
        rval=`echo "$rpart" | sed 's/^[=><!]*//'`
        case x$opstr in
          'x=='|'x!='|'x>'|'x<'|'x>='|'x<=')
            :
            ;;
          'x=')
            opstr="=="
            ;;
          *)
            echo "$script_name: error invalid argument $def_string" >&2
            clean_exit 1
            ;;
        esac
        cat >>$test_src <<EOF
#if $def_name $opstr $rval
#else
#error cstem: false expression: $def_name $opstr $rval
#endif

EOF
      fi
    fi
    log_src $test_src
    echo "$CC_CMD $op_with_flags $op_test_flags -c -o test.o $test_src" >> $cstem_log
    $CC_CMD $op_with_flags $op_test_flags -c -o test.o $test_src >> $cstem_log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      if test x$op_no_break = x; then
        clean_exit $ret
      fi
      exit_status=1
    else
      echo_status "%s\n" "OK"
    fi
    rm -f test.o
    def_idx=`expr $def_idx + 1`
  done
  
################################################################################
# TEST TYPES
  if test $type_num -gt 0; then
    log_title "TEST TYPES"
    type_idx=0
    while test $type_idx -lt $type_num; do
      cat $test_src_base > $test_src

      eval type_string=\$type$type_idx
      type_string=`echo "$type_string" | sed 's/^ *//'`

      type_base=`echo "$type_string" | sed 's/\**$//'`
      var_name=`echo "cstem_$type_base" | sed 's/[^a-zA-Z0-9_]/_/g'`
      echo "$type_base *$var_name;" >> $test_src
    
      echo_status -l "%s" "checking type $type_string ... "
      log_src $test_src
      echo "$CC_CMD $op_with_flags $op_test_flags -c -o test.o $test_src" >> $cstem_log
      $CC_CMD $op_with_flags $op_test_flags -c -o test.o $test_src >> $cstem_log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        if test x$op_no_break = x; then
          clean_exit $ret
        fi
        exit_status=1
      else
        echo_status "%s\n" "OK"
        if test -n "$op_out$op_def_out"; then
          out_var=`echo "SC_HAVE_TYPE_$type_string" | sed 's/[^a-zA-Z0-9_]/_/g' | tr '[a-z]' '[A-Z]'`
          if test -n "$op_out"; then
            echo "$out_var=1" >>$op_out
          fi
          if test -n "$op_def_out"; then
            echo "#define $out_var 1" >>$op_def_out
          fi
        fi
      fi
      rm -f test.o
      type_idx=`expr $type_idx + 1`
    done
  fi
  
################################################################################
# TEST ENUMS
  if test -n "$op_enum"; then
    log_title "TEST ENUMS"
    for enum in $op_enum; do
      cat $test_src_base > $test_src

      echo "int cstem_$enum = $enum;" >> $test_src
    
      echo_status -l "%s" "checking enum $enum ... "
      log_src $test_src
      echo "$CC_CMD $op_with_flags $op_test_flags -c -o test.o $test_src" >> $cstem_log
      $CC_CMD $op_with_flags $op_test_flags -c -o test.o $test_src >> $cstem_log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        if test x$op_no_break = x; then
          clean_exit $ret
        fi
        exit_status=1
      else
        echo_status "%s\n" "OK"
        if test -n "$op_out$op_def_out"; then
          out_var=`echo "SC_HAVE_ENUM_$enum" | sed 's/[^a-zA-Z0-9_]/_/g' | tr '[a-z]' '[A-Z]'`
          if test -n "$op_out"; then
            echo "$out_var=1" >>$op_out
          fi
          if test -n "$op_def_out"; then
            echo "#define $out_var 1" >>$op_def_out
          fi
        fi
      fi
      rm -f test.o
    done
  fi
  
################################################################################
# TEST LIBRARIES
  if test x$op_disable_ld = x && test -n "$op_libs"; then
    log_title "TEST LIBRARIES"
    echo_status -l "%s" "checking libraries $op_libs ... "

    cat <<EOF >test.$ext
int main(int argc, char *argv[]) {
  return 0;
}
EOF
    log_src test.$ext
    echo "$CC_CMD $op_with_flags $op_test_flags -c -o test.o test.$ext" >> $cstem_log
    $CC_CMD $op_with_flags $op_test_flags -c -o test.o test.$ext>> $cstem_log 2>&1

    echo "$LD_CMD -o app test.o $op_with_ldflags $op_test_ldflags $op_libs" >> $cstem_log
    $LD_CMD -o app test.o $op_with_ldflags $op_test_ldflags $op_libs >> $cstem_log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      libs=
      for lib in $op_libs; do
        echo_status "%s" "  $lib ... "
        libs="$libs $lib"
        echo "$LD_CMD -o app test.o $op_with_ldflags $op_test_ldflags $libs" >> $cstem_log
        $LD_CMD -o app test.o $op_with_ldflags $op_test_ldflags $libs >> $cstem_log 2>&1
        _ret=$?
        if test $_ret -ne 0; then
          echo_status "%s\n" "Failed"
          if test x$op_no_break = x; then
            clean_exit $_ret
          else
            break
          fi
        else
          echo_status "%s\n" "OK"
        fi
      done
      if test x$op_no_break = x; then
        clean_exit $ret
      fi
      exit_status=1
    else
      echo_status "%s\n" "OK"
    fi
    rm -f app
    rm -f test.o
  fi
  
################################################################################
# TEST CSTR
  if test -n "$op_cstr"; then
    test_failed=

    log_title "TEST CSTR"
    cat $test_src_base > $test_src
    echo "$op_cstr" >> $test_src
  
    echo_status -l "%s" "checking source string $op_cstr ... "
    log_src $test_src
    echo "$CC_CMD $op_with_flags $op_test_flags -c -o test.o $test_src" >> $cstem_log
    $CC_CMD $op_with_flags $op_test_flags -c -o test.o $test_src >> $cstem_log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      test_failed=1
      if test x$op_no_break = x; then
        clean_exit $ret
      fi
    else
      if test x$op_disable_ld = x; then
        echo "$LD_CMD -o app test.o $op_with_ldflags $op_test_ldflags $op_libs" >> $cstem_log
        $LD_CMD -o app test.o $op_with_ldflags $op_test_ldflags $op_libs >> $cstem_log 2>&1
        ret=$?
        if test $ret -ne 0; then
          rm -f test.o
          echo "test again ..." >> $cstem_log
          echo "int main(int argc, char *argv[]) { return 0;}" >>$test_src
          log_src $test_src
          echo "$CC_CMD $op_with_flags $op_test_flags -c -o test.o $test_src" >> $cstem_log
          $CC_CMD $op_with_flags $op_test_flags -c -o test.o $test_src >> $cstem_log 2>&1
          ret=$?
          if test $ret -ne 0; then
            echo_status "%s\n" "Failed"
            test_failed=1
            if test x$op_no_break = x; then
              clean_exit $ret
            fi
          else
            echo "$LD_CMD -o app test.o $op_with_ldflags $op_test_ldflags $op_libs" >> $cstem_log
            $LD_CMD -o app test.o $op_with_ldflags $op_test_ldflags $op_libs >> $cstem_log 2>&1
            ret=$?
            if test $ret -ne 0; then
              echo_status "%s\n" "Failed"
              test_failed=1
              if test x$op_no_break = x; then
                clean_exit $ret
              fi
            fi
          fi
        fi
      fi
    fi
    rm -f test.o
    if test x$test_failed = x; then
      echo_status "%s\n" "OK"
    else
      exit_status=1
    fi
  fi
  
################################################################################
# TEST VARIABLES
  if test -n "$op_var"; then
    log_title "TEST VARIABLES"
    for var in $op_var; do
      test_failed=
      cat $test_src_base > $test_src

      echo_status -l "%s" "checking variable $var ... "
    
      echo "int main(int argc, char *argv[]) {int cstem_$var = (int) $var; return 0;}" >> $test_src
    
      log_src $test_src
      echo "$CC_CMD $op_with_flags $op_test_flags -c -o test.o $test_src" >> $cstem_log
      $CC_CMD $op_with_flags $op_test_flags -c -o test.o $test_src >> $cstem_log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        test_failed=1
        if test x$op_no_break = x; then
          clean_exit $ret
        fi
      fi
    
      if test x$op_disable_ld = x; then
        echo "$LD_CMD -o app test.o $op_with_ldflags $op_test_ldflags $op_libs" >> $cstem_log
        $LD_CMD -o app test.o $op_with_ldflags $op_test_ldflags $op_libs >> $cstem_log 2>&1
        ret=$?
        if test $ret -ne 0; then
          echo_status "%s\n" "Failed"
          test_failed=1
          if test x$op_no_break = x; then
            clean_exit $ret
          fi
        fi
      fi

      if test x$test_failed = x; then
        echo_status "%s\n" "OK"
        if test -n "$op_out$op_def_out"; then
          out_var=`echo "SC_HAVE_VAR_$var" | sed 's/[^a-zA-Z0-9_]/_/g' | tr '[a-z]' '[A-Z]'`
          if test -n "$op_out"; then
            echo "$out_var=1" >>$op_out
          fi
          if test -n "$op_def_out"; then
            echo "#define $out_var 1" >>$op_def_out
          fi
        fi
      else
        exit_status=1
      fi
      rm -f test.o
    done
  fi
  
################################################################################
# TEST SYMBOLS
  if test -n "$op_sym"; then
    log_title "TEST SYMBOLS"
    for sym in $op_sym; do
      test_failed=

      echo_status -l "%s" "checking symbol $sym ... "
    
      echo "extern void *$sym;" > $test_src
      echo "int main(int argc, char *argv[]) {void *cstem_$sym = $sym; return 0;}" >> $test_src
    
      log_src $test_src
      echo "$CC_CMD $op_with_flags $op_test_flags -c -o test.o $test_src" >> $cstem_log
      $CC_CMD $op_with_flags $op_test_flags -c -o test.o $test_src >> $cstem_log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        test_failed=1
        if test x$op_no_break = x; then
          clean_exit $ret
        fi
      fi
    
      if test x$op_disable_ld = x; then
        echo "$LD_CMD -o app test.o $op_with_ldflags $op_test_ldflags $op_libs" >> $cstem_log
        $LD_CMD -o app test.o $op_with_ldflags $op_test_ldflags $op_libs >> $cstem_log 2>&1
        ret=$?
        if test $ret -ne 0; then
          echo_status "%s\n" "Failed"
          test_failed=1
          if test x$op_no_break = x; then
            clean_exit $ret
          fi
        fi
      fi

      if test x$test_failed = x; then
        echo_status "%s\n" "OK"
        if test -n "$op_out$op_def_out"; then
          out_var=`echo "SC_HAVE_SYM_$sym" | sed 's/[^a-zA-Z0-9_]/_/g' | tr '[a-z]' '[A-Z]'`
          if test -n "$op_out"; then
            echo "$out_var=1" >>$op_out
          fi
          if test -n "$op_def_out"; then
            echo "#define $out_var 1" >>$op_def_out
          fi
        fi
      else
        exit_status=1
      fi
      rm -f test.o
    done
  fi
  
################################################################################
# TEST RVALS
  if test -n "$op_rval"; then
    log_title "TEST RVALS"
    for var in $op_rval; do
      test_failed=
      cat $test_src_base > $test_src

      echo_status -l "%s" "checking rval $var ... "
    
      echo "int main(int argc, char *argv[]) {int cstem_$var = (int) $var; return 0;}" >> $test_src
    
      log_src $test_src
      echo "$CC_CMD $op_with_flags $op_test_flags -c -o test.o $test_src" >> $cstem_log
      $CC_CMD $op_with_flags $op_test_flags -c -o test.o $test_src >> $cstem_log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        test_failed=1
        if test x$op_no_break = x; then
          clean_exit $ret
        fi
      fi
    
      if test x$op_disable_ld = x; then
        echo "$LD_CMD -o app test.o $op_with_ldflags $op_test_ldflags $op_libs" >> $cstem_log
        $LD_CMD -o app test.o $op_with_ldflags $op_test_ldflags $op_libs >> $cstem_log 2>&1
        ret=$?
        if test $ret -ne 0; then
          echo_status "%s\n" "Failed"
          test_failed=1
          if test x$op_no_break = x; then
            clean_exit $ret
          fi
        fi
      fi

      if test x$test_failed = x; then
        echo_status "%s\n" "OK"
        if test -n "$op_out$op_def_out"; then
          out_var=`echo "SC_HAVE_RVAL_$var" | sed 's/[^a-zA-Z0-9_]/_/g' | tr '[a-z]' '[A-Z]'`
          if test -n "$op_out"; then
            echo "$out_var=1" >>$op_out
          fi
          if test -n "$op_def_out"; then
            echo "#define $out_var 1" >>$op_def_out
          fi
        fi
      else
        exit_status=1
      fi
      rm -f test.o
    done
  fi
  
################################################################################
# TEST FUNCTIONS
  if test -n "$op_func"; then
    log_title "TEST FUNCTIONS"
    for func in $op_func; do
      test_failed=
      func=`echo "$func" | sed 's/[(]//' | sed 's/[)]//'`
    
      echo_status -l "%s" "checking function $func ... "
    
      echo "int $func(int);" > $test_src
      echo "int main(int argc, char *argv[]) { int cstem_$func = $func(1); return cstem_$func; }" >> $test_src
    
      log_src $test_src
      echo "$CC_CMD $op_with_flags $op_test_flags -c -o test.o $test_src" >> $cstem_log
      $CC_CMD $op_with_flags $op_test_flags -c -o test.o $test_src >> $cstem_log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        test_failed=1
        if test x$op_no_break = x; then
          clean_exit $ret
        fi
      fi
    
      if test x$op_disable_ld = x; then
        echo "$LD_CMD -o app test.o $op_with_ldflags $op_test_ldflags $op_libs" >> $cstem_log
        $LD_CMD -o app test.o $op_with_ldflags $op_test_ldflags $op_libs >> $cstem_log 2>&1
        ret=$?
        if test $ret -ne 0; then
          echo_status "%s\n" "Failed"
          test_failed=1
          if test x$op_no_break = x; then
            clean_exit $ret
          fi
        fi
      fi

      if test x$test_failed = x; then
        echo_status "%s\n" "OK"
        if test -n "$op_out$op_def_out"; then
          out_var=`echo "SC_HAVE_FUNC_$func" | sed 's/[^a-zA-Z0-9_]/_/g' | tr '[a-z]' '[A-Z]'`
          if test -n "$op_out"; then
            echo "$out_var=1" >>$op_out
          fi
          if test -n "$op_def_out"; then
            echo "#define $out_var 1" >>$op_def_out
          fi
        fi
      else
        exit_status=1
      fi
      rm -f test.o
    done
  fi
  
################################################################################
# TEST SOURCE FILES
  if test -n "$op_src"; then
    log_title "TEST SOURCE FILES"
    for src in $op_src; do
      test_failed=
      if echo "$src" | grep "^/" > /dev/null; then 
        src_full=$src
      else
        src_full="$orig_dir/$src"
      fi
    
      echo_status -l "%s" "checking source file $src ... "
    
      if test ! -f $src_full; then
        echo_status "%s\n" "Failed"
        echo_status "%s\n" "  file $src not found"
        clean_exit 1
      fi
      cp $src_full .
      src_base=`basename $src_full`
    
      log_src $src_base
      echo "$CC_CMD $op_with_flags $op_test_flags -c -o test.o $src_base" >> $cstem_log
      $CC_CMD $op_with_flags $op_test_flags -c -o test.o $src_base >> $cstem_log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        test_failed=1
        if test x$op_no_break = x; then
          clean_exit $ret
        fi
      fi
    
      if test x$op_disable_ld = x; then
        echo "$LD_CMD -o app test.o $op_with_ldflags $op_test_ldflags $op_libs" >> $cstem_log
        $LD_CMD -o app test.o $op_with_ldflags $op_test_ldflags $op_libs >> $cstem_log 2>&1
        ret=$?
        if test $ret -ne 0; then
          echo_status "%s\n" "Failed"
          test_failed=1
          if test x$op_no_break = x; then
            clean_exit $ret
          fi
        fi
      fi

      if test x$test_failed = x; then
        echo_status "%s\n" "OK"
      else
        exit_status=1
      fi
      rm -f test.o $src_base
    done
  fi
  
  if test -n "$op_status_id" && test -n "$op_out$op_def_out"; then
    if test x$exit_status = x || test x$exit_status = x0; then
      if test -n "$op_out"; then
        echo "$op_status_id=1" >>$op_out
      fi
      if test -n "$op_def_out"; then
        echo "#define $op_status_id 1" >>$op_def_out
      fi
    fi
  fi
  if test -n "$exit_status"; then
    clean_exit $exit_status
  else
    clean_exit 0
  fi
fi

if test x$mode_def = x1; then
  op_no_echo=1
  op_echo_fail=1
  op_def=
  current_opt=
  while test $# -gt 0; do
    case "$1" in
########## CC_BLOCK_START
      CC=*)
        CC=`echo "$1" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
      CFLAGS=*)
        CFLAGS=`echo "$1" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
      CFLAGS_ADD=*)
        CFLAGS_ADD=`echo "$1" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
      -cc)
        current_opt=cc
        ;;
      -cflags=*)
        CFLAGS=`echo "$1" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
      *.h|*.H)
        op_with_inc="$op_with_inc $1"
        current_opt=
        ;;
########## CX_BLOCK_START
      CXX=*)
        CXX=`echo "$1" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
      CXXFLAGS=*)
        CXXFLAGS=`echo "$1" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
      CXXFLAGS_ADD=*)
        CXXFLAGS_ADD=`echo "$1" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
      -cxx)
        current_opt=cxx
        ;;
      -cxxflags=*)
        CXXFLAGS=`echo "$1" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
      *.h|*.H|*.[Hh]++|*.[Hh][Hh]|*.[Hh][Xx][Xx]|*.[Hh][Pp][Pp])
        op_with_inc="$op_with_inc $1"
        current_opt=
        ;;
########## BLOCK_END
      INC=*)
        op_with_inc=`echo "$1" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
      -inc)
        current_opt=inc
        ;;
      -[ID]*)
        op_with_flags="$op_with_flags $1"
        current_opt=
        ;;
      *)
        case "$current_opt" in
########## CC_BLOCK_START
          cc)
            CC=$1
            current_opt=
            ;;
########## CX_BLOCK_START
          cxx)
            CXX=$1
            current_opt=
            ;;
########## BLOCK_END
          inc)
            op_with_inc="$op_with_inc $1"
            ;;
          *)
            op_def="$op_def $1"
            ;;
        esac
        ;;
    esac
    shift
  done

  if test -z "$op_def"; then
    exit 0
  fi
########## CC_BLOCK_START
  CFLAGS="$op_with_flags $CFLAGS $CFLAGS_ADD"
  op_with_flags=$CFLAGS
########## CX_BLOCK_START
  CXXFLAGS="$op_with_flags $CXXFLAGS $CXXFLAGS_ADD"
  op_with_flags=$CXXFLAGS
########## BLOCK_END
  op_with_flags=`echo "$op_with_flags" | sed 's/^ *//' | sed 's/ *$//'`


  op_with_inc=`echo "$op_with_inc" | sed 's/^ *//' | sed 's/ *$//'`

################################################################################
# SET UP COMPILER
  CPP_FLAG=-E
########## CC_BLOCK_START
  CC_CMD=$CC
########## CX_BLOCK_START
  CC_CMD=$CXX
########## BLOCK_END
  if test -z "$CC_CMD"; then
    perform_probe
    CC_CMD=$prop_cmd
  fi

################################################################################
# SET UP TEST DIR
  setup_test_dir
  test_src=test_src.$ext

################################################################################
# TEST COMPILER
  cat <<EOF >test.$ext
int main(int argc, char *argv[]) {
  return 0;
}
EOF
  $CC_CMD -c -o test.o test.$ext 2>&1
  ret=$?
  if test $ret -ne 0; then
    echo "%s" "checking compiler $CC_CMD ... Failed" >&2
    clean_exit $ret
  fi
  rm -f test.$ext
  rm -f test.o

################################################################################
# TEST op_with_flags
  if test -n "$op_with_flags"; then
    cat <<EOF >test.$ext
int main(int argc, char *argv[]) {
  return 0;
}
EOF
    $CC_CMD $op_with_flags -c -o test.o test.$ext 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo "%s" "checking compiler flags '$op_with_flags'... Failed" >&2
      clean_exit $ret
    fi
    rm -f test.$ext
    rm -f test.o
  fi

################################################################################
# TEST op_with_inc
  if test -n "$op_with_inc"; then
    cat $test_src_base > $test_src
    echo "int cstem_test = 1;" >> $test_src

    $CC_CMD $op_with_flags -c -o test.o $test_src 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo "%s" "checking headers '$op_with_inc'... Failed" >&2
      clean_exit $ret
    fi
    rm -f test.o
  fi

################################################################################
# READ DEFINES
  defvals=
  for def in $op_def; do
    cat $test_src_base > $test_src

    cat <<EOF >>$test_src
#ifdef $def
CSTEM_DEFVAL=$def
#endif
EOF
    $CC_CMD $op_with_flags $CPP_FLAG $test_src 2>/dev/null > test_c.out
    defval=`cat test_c.out | grep "^ *CSTEM_DEFVAL" | sed 's/^ *CSTEM_DEFVAL=//' | sed 's/ *$//' | sed 's/"$//' |  sed 's/^"//' | tr -d '\n'`
    if test -n "$defval"; then
      if test -n "$defvals"; then
        defvals="$defvals $defval"
      else
        defvals=$defval
      fi
    fi
  done
  echo "$defvals" | sed 's/^ *//'
  rm -f $test_src
  clean_exit 0
fi



exit 0


cat <<EOF
/* COMPILER DEFINES */

/* STANDARDS */

#ifdef __STDC__
DSET__STDC__=1
#endif

#ifdef __STDC_VERSION__
DSET__STDC_VERSION__=1
DVAL__STDC_VERSION__=__STDC_VERSION__
#endif

#ifdef __cplusplus
DSET__cplusplus=1
DVAL__cplusplus=__cplusplus
#endif

#ifdef __cplusplus_cli
DSET_cplusplus_cli=1
DVAL_cplusplus_cli=__cplusplus_cli
#endif

#ifdef __embedded_cplusplus
DSET__embedded_cplusplus=1
#endif


/* COMPILERS */

#ifdef __CMB__
DSET__CMB__=1
#endif

#ifdef __VERSION__
DSET__VERSION__=1
DVAL__VERSION__=__VERSION__
#endif

#ifdef __REVISION__
DSET__REVISION__=1
DVAL__REVISION__=__REVISION__
#endif

#ifdef __BUILD__
DSET__BUILD__=1
DVAL__BUILD__=__BUILD__
#endif

#ifdef __CHC__
DSET__CHC__=1
#endif

#ifdef __ACK__
DSET__ACK__=1
#endif

#ifdef __CC_ARM
DSET__CC_ARM=1
#endif

#ifdef __ARMCC_VERSION
DSET__ARMCC_VERSION=1
DVAL__ARMCC_VERSION=__ARMCC_VERSION
#endif

#ifdef __BORLANDC__
DSET__BORLANDC__=1
DVAL__BORLANDC__=__BORLANDC__
#endif

#ifdef __CODEGEARC__
DSET__CODEGEARC__=1
DVAL__CODEGEARC__=__CODEGEARC__
#endif

#ifdef __clang__
DSET__clang__=1
#endif

#ifdef __clang_major__
DSET__clang_major__=1
DVAL__clang_major__=__clang_major__
#endif

#ifdef __clang_minor__
DSET__clang_minor__=1
DVAL__clang_minor__=__clang_minor__
#endif

#ifdef __clang_patchlevel__
DSET__clang_patchlevel__=1
DVAL__clang_patchlevel__=__clang_patchlevel__
#endif

#ifdef __COMO__
DSET__COMO__=1
#endif

#ifdef __COMO_VERSION__
DSET__COMO_VERSION__=1
DVAL__COMO_VERSION__=__COMO_VERSION__
#endif

#ifdef __COMPCERT__
DSET__COMPCERT__=1
#endif

#ifdef __DCC__
DSET__DCC__=1
#endif

#ifdef __VERSION_NUMBER__
DSET__VERSION_NUMBER__=1
DVAL__VERSION_NUMBER__=__VERSION_NUMBER__
#endif

#ifdef __DMC__
DSET__DMC__=1
DVAL__DMC__=__DMC__
#endif

#ifdef __SYSC__
DSET__SYSC__=1
#endif

#ifdef __SYSC_VER__
DSET__SYSC_VER__=1
DVAL__SYSC_VER__=__SYSC_VER__
#endif

#ifdef __DJGPP__
DSET__DJGPP__=1
DVAL__DJGPP__=__DJGPP__
#endif

#ifdef __DJGPP_MINOR__
DSET__DJGPP_MINOR__=1
DVAL__DJGPP_MINOR__=__DJGPP_MINOR__
#endif

#ifdef __GO32__
DSET__GO32__=1
#endif

#ifdef __EDG__
DSET__EDG__=1
#endif

#ifdef __EDG_VERSION__
DSET__EDG_VERSION__=1
DVAL__EDG_VERSION__=__EDG_VERSION__
#endif

#ifdef __PATHCC__
DSET__PATHCC__=1
DVAL__PATHCC__=__PATHCC__
#endif

#ifdef __PATHCC_MINOR__
DSET__PATHCC_MINOR__=1
DVAL__PATHCC_MINOR__=__PATHCC_MINOR__
#endif

#ifdef __PATHCC_PATCHLEVEL__
DSET__PATHCC_PATCHLEVEL__=1
DVAL__PATHCC_PATCHLEVEL__=__PATHCC_PATCHLEVEL__
#endif

#ifdef __GNUC__
DSET__GNUC__=1
DVAL__GNUC__=__GNUC__
#endif

#ifdef __GNUC_MINOR__
DSET__GNUC_MINOR__=1
DVAL__GNUC_MINOR__=__GNUC_MINOR__
#endif

#ifdef __GNUC_PATCHLEVEL__
DSET__GNUC_PATCHLEVEL__=1
DVAL__GNUC_PATCHLEVEL__=__GNUC_PATCHLEVEL__
#endif

#ifdef __GNUC_VERSION__
DSET__GNUC_VERSION__=1
DVAL__GNUC_VERSION__=__GNUC_VERSION__
#endif

#ifdef __ghs__
DSET__ghs__=1
#endif

#ifdef __GHS_VERSION_NUMBER__
DSET__GHS_VERSION_NUMBER__=1
DVAL__GHS_VERSION_NUMBER__=__GHS_VERSION_NUMBER__
#endif

#ifdef __GHS_REVISION_DATE__
DSET__GHS_REVISION_DATE__=1
DVAL__GHS_REVISION_DATE__=__GHS_REVISION_DATE__
#endif

#ifdef __HP_cc
DSET__HP_cc=1
#endif

#ifdef __HP_aCC
DSET__HP_aCC=1
DVAL__HP_aCC=__HP_aCC
#endif

#ifdef __IAR_SYSTEMS_ICC__
DSET__IAR_SYSTEMS_ICC__=1
#endif

#ifdef __VER__
DSET__VER__=1
DVAL__VER__=__VER__
#endif

#ifdef __xlc__
DSET__xlc__=1
DVAL__xlc__=__xlc__
#endif

#ifdef __xlC__
DSET__xlC__=1
DVAL__xlC__=__xlC__
#endif

#ifdef __xlC_ver__
DSET__xlC_ver__=1
DVAL__xlC_ver__=__xlC_ver__
#endif

#ifdef __IBMC__
DSET__IBMC__=1
DVAL__IBMC__=__IBMC__
#endif

#ifdef __IBMCPP__
DSET__IBMCPP__=1
DVAL__IBMCPP__=__IBMCPP__
#endif

#ifdef __COMPILER_VER__
DSET__COMPILER_VER__=1
DVAL__COMPILER_VER__=__COMPILER_VER__
#endif

#ifdef __IMAGECRAFT__
DSET__IMAGECRAFT__=1
#endif

#ifdef __INTEL_COMPILER
DSET__INTEL_COMPILER=1
DVAL__INTEL_COMPILER=__INTEL_COMPILER
#endif

#ifdef __ICC
DSET__ICC=1
#endif

#ifdef __ECC
DSET__ECC=1
#endif

#ifdef __ICL
DSET__ICL=1
#endif

#ifdef __INTEL_COMPILER_BUILD_DATE
DSET__INTEL_COMPILER_BUILD_DATE=1
DVAL__INTEL_COMPILER_BUILD_DATE=__INTEL_COMPILER_BUILD_DATE
#endif

#ifdef __C166__
DSET__C166__=1
DVAL__C166__=__C166__
#endif

#ifdef __C51__
DSET__C51__=1
DVAL__C51__=__C51__
#endif

#ifdef __CX51__
DSET__CX51__=1
DVAL__CX51__=__CX51__
#endif

#ifdef __LCC__
DSET__LCC__=1
#endif

#ifdef __HIGHC__
DSET__HIGHC__=1
#endif

#ifdef __MWERKS__
DSET__MWERKS__=1
DVAL__MWERKS__=__MWERKS__
#endif

#ifdef __CWCC__
DSET__CWCC__=1
DVAL__CWCC__=__CWCC__
#endif

#ifdef _MSC_VER
DSET_MSC_VER=1
DVAL_MSC_VER=_MSC_VER
#endif

#ifdef _MSC_FULL_VER
DSET_MSC_FULL_VER=1
DVAL_MSC_FULL_VER=_MSC_FULL_VER
#endif

#ifdef _MSC_BUILD
DSET_MSC_BUILD=1
DVAL_MSC_BUILD=_MSC_BUILD
#endif

#ifdef _MRI
DSET_MRI=1
#endif

#ifdef __MINGW32__
DSET__MINGW32__=1

#include <stdlib.h>

#ifdef __MINGW32_MAJOR_VERSION
DSET__MINGW32_MAJOR_VERSION=1
DVAL__MINGW32_MAJOR_VERSION=__MINGW32_MAJOR_VERSION
#endif

#ifdef __MINGW32_MINOR_VERSION
DSET__MINGW32_MINOR_VERSION=1
DVAL__MINGW32_MINOR_VERSION=__MINGW32_MINOR_VERSION
#endif

#ifdef __MINGW64_VERSION_MAJOR
DSET__MINGW64_VERSION_MAJOR=1
DVAL__MINGW64_VERSION_MAJOR=__MINGW64_VERSION_MAJOR
#endif

#ifdef __MINGW64_VERSION_MINOR
DSET__MINGW64_VERSION_MINOR=1
DVAL__MINGW64_VERSION_MINOR=__MINGW64_VERSION_MINOR
#endif

#endif

#ifdef __MINGW64__
DSET__MINGW64__=1
#endif

#ifdef __sgi
DSET__sgi=1
#endif

#ifdef sgi
DSETsgi=1
#endif

#ifdef _COMPILER_VERSION
DSET_COMPILER_VERSION=1
DVAL_COMPILER_VERSION=_COMPILER_VERSION
#endif

#ifdef _SGI_COMPILER_VERSION
DSET_SGI_COMPILER_VERSION=1
DVAL_SGI_COMPILER_VERSION=_SGI_COMPILER_VERSION
#endif

#ifdef __OPEN64__
DSET__OPEN64__=1
#endif

#ifdef __OPENCC__
DSET__OPENCC__=1
DVAL__OPENCC__=__OPENCC__
#endif

#ifdef __OPENCC_MINOR__
DSET__OPENCC_MINOR__=1
DVAL__OPENCC_MINOR__=__OPENCC_MINOR__
#endif

#ifdef __OPENCC_PATCHLEVEL__
DSET__OPENCC_PATCHLEVEL__=1
DVAL__OPENCC_PATCHLEVEL__=__OPENCC_PATCHLEVEL__
#endif

#ifdef __SUNPRO_C
DSET__SUNPRO_C=1
DVAL__SUNPRO_C=__SUNPRO_C
#endif

#ifdef __SUNPRO_CC
DSET__SUNPRO_CC=1
DVAL__SUNPRO_CC=__SUNPRO_CC
#endif

#ifdef __POCC__
DSET__POCC__=1
DVAL__POCC__=__POCC__
#endif

#ifdef __PGI
DSET__PGI=1
#endif

#ifdef __PGIC__
DSET__PGIC__=1
DVAL__PGIC__=__PGIC__
#endif

#ifdef __PGIC_MINOR__
DSET__PGIC_MINOR__=1
DVAL__PGIC_MINOR__=__PGIC_MINOR__
#endif

#ifdef __PGIC_PATCHLEVEL__
DSET__PGIC_PATCHLEVEL__=1
DVAL__PGIC_PATCHLEVEL__=__PGIC_PATCHLEVEL__
#endif

#ifdef __RENESAS__
DSET__RENESAS__=1
#endif

#ifdef __HITACHI__
DSET__HITACHI__=1
#endif

#ifdef __RENESAS_VERSION__
DSET__RENESAS_VERSION__=1
DVAL__RENESAS_VERSION__=__RENESAS_VERSION__
#endif

#ifdef __HITACHI_VERSION__
DSET__HITACHI_VERSION__=1
DVAL__HITACHI_VERSION__=__HITACHI_VERSION__
#endif

#ifdef SDCC
DSETSDCC=1
DVALSDCC=SDCC
#endif

#ifdef __SNC__
DSET__SNC__=1
#endif

#ifdef __VOSC__
DSET__VOSC__=1
DVAL__VOSC__=__VOSC__
#endif

#ifdef __TenDRA__
DSET__TenDRA__=1
#endif

#ifdef __TI_COMPILER_VERSION__
DSET__TI_COMPILER_VERSION__=1
DVAL__TI_COMPILER_VERSION__=__TI_COMPILER_VERSION__
#endif

#ifdef __TINYC__
DSET__TINYC__=1
#endif

#ifdef __VBCC__
DSET__VBCC__=1
#endif

#ifdef __WATCOMC__
DSET__WATCOMC__=1
DVAL__WATCOMC__=__WATCOMC__
#endif


/* OPERATING SYSTEMS */

#ifdef _AIX
DSET_AIX=1
#endif

#ifdef __TOS_AIX__
DSET__TOS_AIX__=1
#endif

#ifdef _AIX3
DSET_AIX3=1
#endif

#ifdef _AIX31
DSET_AIX31=1
#endif

#ifdef _AIX4
DSET_AIX4=1
#endif

#ifdef _AIX41
DSET_AIX41=1
#endif

#ifdef _AIX5
DSET_AIX5=1
#endif

#ifdef _AIX51
DSET_AIX51=1
#endif

#ifdef _AIX6
DSET_AIX6=1
#endif

#ifdef _AIX61
DSET_AIX61=1
#endif

#ifdef _AIX7
DSET_AIX7=1
#endif

#ifdef _AIX71
DSET_AIX71=1
#endif

#ifdef _AIX8
DSET_AIX8=1
#endif

#ifdef _AIX81
DSET_AIX81=1
#endif

#ifdef _AIX9
DSET_AIX9=1
#endif

#ifdef _AIX91
DSET_AIX91=1
#endif

#ifdef __ANDROID__
DSET__ANDROID__=1

#include <android/api-level.h>
#ifdef __ANDROID_API__
DSET__ANDROID_API__=1
DVAL__ANDROID_API__=__ANDROID_API__
#endif

#endif

#ifdef AMIGA
DSETAMIGA=1
#endif

#ifdef __amigaos__
DSET__amigaos__=1
#endif

#ifdef __FreeBSD__
DSET__FreeBSD__=1
DVAL__FreeBSD__=__FreeBSD__
#endif

#ifdef __FreeBSD_kernel__
DSET__FreeBSD_kernel__=1
#endif

#ifdef __NetBSD__
DSET__NetBSD__=1
#endif

#ifdef __OpenBSD__
DSET__OpenBSD__=1
#endif

#ifdef __DragonFly__
DSET__DragonFly__=1
#endif

#ifdef __CYGWIN__
DSET__CYGWIN__=1
#endif

#ifdef __ECOS
DSET__ECOS=1
#endif

#ifdef __GNU__
DSET__GNU__=1
#endif

#ifdef __gnu_hurd__
DSET__gnu_hurd__=1
#endif

#ifdef __GLIBC__
DSET__GLIBC__=1
#endif

#ifdef __gnu_linux__
DSET__gnu_linux__=1
#endif

#ifdef linux
DSETlinux=1
#endif

#ifdef __linux
DSET__linux=1
#endif

#ifdef __linux__
DSET__linux__=1
#endif

#ifdef __gnu_linux
DSET__gnu_linux=1
#endif

#ifdef _hpux
DSET_hpux=1
#endif

#ifdef hpux
DSEThpux=1
#endif

#ifdef __hpux
DSET__hpux=1
#endif

#ifdef __INTEGRITY
DSET__INTEGRITY=1
#endif

#ifdef __INTERIX
DSET__INTERIX=1
#endif

#ifdef __Lynx__
DSET__Lynx__=1
#endif

#ifdef __APPLE__
DSET__APPLE__=1
#endif

#ifdef __MACH__
DSET__MACH__=1
#endif

#ifdef __OS9000
DSET__OS9000=1
#endif

#ifdef _OSK
DSET_OSK=1
#endif

#ifdef __minix
DSET__minix=1
#endif

#ifdef __MORPHOS__
DSET__MORPHOS__=1
#endif

#ifdef __TANDEM
DSET__TANDEM=1
#endif

#ifdef __nucleus__
DSET__nucleus__=1
#endif

#ifdef __palmos__
DSET__palmos__=1
#endif

#ifdef __QNX__
DSET__QNX__=1
#endif

#ifdef __QNXNTO__
DSET__QNXNTO__=1

#include <sys/neutrino.h>
#ifdef _NTO_VERSION
DSET_NTO_VERSION=1
DVAL_NTO_VERSION=_NTO_VERSION
#endif

#endif

#ifdef M_I386
DSETM_I386=1
#endif

#ifdef M_XENIX
DSETM_XENIX=1
#endif

#ifdef sun
DSETsun=1
#endif

#ifdef __sun
DSET__sun=1
#endif

#ifdef __sun__
DSET__sun__=1
#endif

#ifdef __SVR4
DSET__SVR4=1
#endif

#ifdef __svr4__
DSET__svr4__=1
#endif

#ifdef __SunOS
DSET__SunOS=1
#endif

#ifdef __SunOS_5_8
DSET__SunOS_5_8=1
#endif

#ifdef __SunOS_5_9
DSET__SunOS_5_9=1
#endif

#ifdef __SunOS_5_10
DSET__SunOS_5_10=1
#endif

#ifdef __SunOS_5_11
DSET__SunOS_5_11=1
#endif

#ifdef __VOS__
DSET__VOS__=1
#endif

#ifdef __SYLLABLE__
DSET__SYLLABLE__=1
#endif

#ifdef __VXWORKS__
DSET__VXWORKS__=1
#endif

#ifdef __vxworks
DSET__vxworks=1
#endif

#if defined(__VXWORKS__) || defined(__vxworks)
#include <version.h>

#ifdef _WRS_VXWORKS_MAJOR
DSET_WRS_VXWORKS_MAJOR=1
DVAL_WRS_VXWORKS_MAJOR=_WRS_VXWORKS_MAJOR
#endif

#ifdef _WRS_VXWORKS_MINOR
DSET_WRS_VXWORKS_MINOR=1
DVAL_WRS_VXWORKS_MINOR=_WRS_VXWORKS_MINOR
#endif

#ifdef _WRS_VXWORKS_MAINT
DSET_WRS_VXWORKS_MAINT=1
DVAL_WRS_VXWORKS_MAINT=_WRS_VXWORKS_MAINT
#endif

#endif /*__VXWORKS __vxworks */

#ifdef __RTP__
DSET__RTP__=1
#endif

#ifdef _WRS_KERNEL
DSET_WRS_KERNEL=1
#endif

#ifdef _WIN32
DSET_WIN32=1
#endif

#ifdef _WIN64
DSET_WIN64=1
#endif

#ifdef __WIN32__
DSET__WIN32__=1
#endif

#ifdef __TOS_WIN__
DSET__TOS_WIN__=1
#endif

#ifdef __WINDOWS__
DSET__WINDOWS__=1
#endif

#ifdef WIN32
DSETWIN32=1
#endif

#ifdef __WIN32
DSET__WIN32=1
#endif

#ifdef WIN64
DSETWIN64=1
#endif

#ifdef __WIN64
DSET__WIN64=1
#endif

#ifdef __WIN64__
DSET__WIN64__=1
#endif

#ifdef WINNT
DSETWINNT=1
#endif

#ifdef __WINNT
DSET__WINNT=1
#endif

#ifdef __WINNT__
DSET__WINNT__=1
#endif

#ifdef __MVS__
DSET__MVS__=1
#endif

#ifdef __HOS_MVS__
DSET__HOS_MVS__=1
#endif

#ifdef __TOS_MVS__
DSET__TOS_MVS__=1
#endif

#ifdef __MINGW32__
DSET__MINGW32__=1
#endif

#ifdef __MINGW64__
DSET__MINGW64__=1
#endif


/* ARCHITECTURES */

#ifdef __alpha__
DSET__alpha__=1
#endif

#ifdef _M_ALPHA
DSET_M_ALPHA=1
#endif

#ifdef __amd64__
DSET__amd64__=1
#endif

#ifdef __amd64
DSET__amd64=1
#endif

#ifdef __x86_64__
DSET__x86_64__=1
#endif

#ifdef __x86_64
DSET__x86_64=1
#endif

#ifdef _M_X64
DSET_M_X64=1
#endif

#ifdef _M_AMD64
DSET_M_AMD64=1
#endif

#ifdef __arm__
DSET__arm__=1
#endif

#ifdef __thumb__
DSET__thumb__=1
#endif

#ifdef __TARGET_ARCH_ARM
DSET__TARGET_ARCH_ARM=1
#endif

#ifdef __TARGET_ARCH_THUMB
DSET__TARGET_ARCH_THUMB=1
#endif

#ifdef _ARM
DSET_ARM=1
#endif

#ifdef _M_ARM
DSET_M_ARM=1
#endif

#ifdef _M_ARMT
DSET_M_ARMT=1
#endif

#ifdef __arm
DSET__arm=1
#endif

#ifdef __aarch64__
DSET__aarch64__=1
#endif

#ifdef __bfin
DSET__bfin=1
#endif

#ifdef __BFIN__
DSET__BFIN__=1
#endif

#ifdef __epiphany__
DSET__epiphany__=1
#endif

#ifdef __hppa__
DSET__hppa__=1
#endif

#ifdef __HPPA__
DSET__HPPA__=1
#endif

#ifdef __hppa
DSET__hppa=1
#endif

#ifdef i386
DSETi386=1
#endif

#ifdef __i386
DSET__i386=1
#endif

#ifdef __i386__
DSET__i386__=1
#endif

#ifdef __i486__
DSET__i486__=1
#endif

#ifdef __i586__
DSET__i586__=1
#endif

#ifdef __i686__
DSET__i686__=1
#endif

#ifdef __IA32__
DSET__IA32__=1
#endif

#ifdef _M_IX86
DSET_M_IX86=1
#endif

#ifdef __X86__
DSET__X86__=1
#endif

#ifdef _X86_
DSET_X86_=1
#endif

#ifdef __THW_INTEL__
DSET__THW_INTEL__=1
#endif

#ifdef __I86__
DSET__I86__=1
#endif

#ifdef __INTEL__
DSET__INTEL__=1
#endif

#ifdef __386
DSET__386=1
#endif

#ifdef __ia64__
DSET__ia64__=1
#endif

#ifdef _IA64
DSET_IA64=1
#endif

#ifdef __IA64__
DSET__IA64__=1
#endif

#ifdef __ia64
DSET__ia64=1
#endif

#ifdef _M_IA64
DSET_M_IA64=1
#endif

#ifdef __itanium__
DSET__itanium__=1
#endif

#ifdef ia64
DSETia64=1
#endif

#ifdef __mips__
DSET__mips__=1
#endif

#ifdef mips
DSETmips=1
#endif

#ifdef __mips
DSET__mips=1
#endif

#ifdef __MIPS__
DSET__MIPS__=1
#endif

#ifdef __powerpc
DSET__powerpc=1
#endif

#ifdef __powerpc__
DSET__powerpc__=1
#endif

#ifdef __powerpc64__
DSET__powerpc64__=1
#endif

#ifdef __POWERPC__
DSET__POWERPC__=1
#endif

#ifdef __ppc__
DSET__ppc__=1
#endif

#ifdef __ppc64__
DSET__ppc64__=1
#endif

#ifdef __PPC__
DSET__PPC__=1
#endif

#ifdef __PPC64__
DSET__PPC64__=1
#endif

#ifdef _ARCH_PPC
DSET_ARCH_PPC=1
#endif

#ifdef _ARCH_PPC64
DSET_ARCH_PPC64=1
#endif

#ifdef _M_PPC
DSET_M_PPC=1
#endif

#ifdef __PPCGECKO__
DSET__PPCGECKO__=1
#endif

#ifdef __PPCBROADWAY__
DSET__PPCBROADWAY__=1
#endif

#ifdef _XENON
DSET_XENON=1
#endif

#ifdef __ppc
DSET__ppc=1
#endif

#ifdef __PowerPC__
DSET__PowerPC__=1
#endif

#ifdef __PPC
DSET__PPC=1
#endif

#ifdef __ppc64
DSET__ppc64=1
#endif

#ifdef __sparc__
DSET__sparc__=1
#endif

#ifdef __sparc
DSET__sparc=1
#endif

#ifdef __sparc64__
DSET__sparc64__=1
#endif

#ifdef __sh__
DSET__sh__=1
#endif

#ifdef __s390x__
DSET__s390x__=1
#endif

#ifdef __zarch__
DSET__zarch__=1
#endif

#ifdef __SYSC_ZARCH__
DSET__SYSC_ZARCH__=1
#endif

/* ENDIANESS */

#ifdef __BIG_ENDIAN__
DSET__BIG_ENDIAN__=1
#endif

#ifdef __ARMEB__
DSET__ARMEB__=1
#endif

#ifdef __THUMBEB__
DSET__THUMBEB__=1
#endif

#ifdef __AARCH64EB__
DSET__AARCH64EB__=1
#endif

#ifdef _MIPSEB
DSET_MIPSEB=1
#endif

#ifdef __MIPSEB
DSET__MIPSEB=1
#endif

#ifdef __MIPSEB__
DSET__MIPSEB__=1
#endif

#ifdef __BYTE_ORDER__
DSET__BYTE_ORDER__=1
DVAL__BYTE_ORDER__=__BYTE_ORDER__
#endif

#ifdef __FLOAT_WORD_ORDER__
DSET__FLOAT_WORD_ORDER__=1
DVAL__FLOAT_WORD_ORDER__=__FLOAT_WORD_ORDER__
#endif

#ifdef __LITTLE_ENDIAN__
DSET__LITTLE_ENDIAN__=1
#endif

#ifdef __ARMEL__
DSET__ARMEL__=1
#endif

#ifdef __THUMBEL__
DSET__THUMBEL__=1
#endif

#ifdef __AARCH64EL__
DSET__AARCH64EL__=1
#endif

#ifdef _MIPSEL
DSET_MIPSEL=1
#endif

#ifdef __MIPSEL
DSET__MIPSEL=1
#endif

#ifdef __MIPSEL__
DSET__MIPSEL__=1
#endif


/* DATA MODELS */

#ifdef _ILP32
DSET_ILP32=1
#endif

#ifdef __ILP32__
DSET__ILP32__=1
#endif

#ifdef _LP64
DSET_LP64=1
#endif

#ifdef __LP64__
DSET__LP64__=1
#endif
EOF
