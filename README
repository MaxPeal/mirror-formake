Formake is a collection of Bash scripts for POSIX systems.

Universal and portable scripts can be used in build automation, software configuration and system administration tasks.

Formake provides the following scripts:
  abspath       Calculate absolute path
  cstem         C/C++ system query and test tool
  excom         Command test tool
  ldlshell      Load interactive shell with predefined LD library path environment
  ldlwrap       Create program wrapper script with predefined LD library path environment
  libro         Build static and dynamic libraries
  mkconfigure   Create 'configure' script
  mkdep         Generate dependencies of C/C++ source files for Makefile
  mkmkmf        Generate mkmf script (Makefile generation script)
  mkrule        Generate Make rules
  optool        Command-line options processing tool
  pofig         Portable figure out system properties
  relpath       Calculate relative path between two directories
  src2obj       Convert source list to object list



Description of scripts and examples of usage
---------------------------------------------

abspath
  
abspath calculates the absolute path of given arguments or from standard input.

  $ abspath -help
  abspath [-b BASE_DIR] [<path> ...]

Examples:
  $ pwd
  /home/user/tmp
  $ abspath ./
  /home/user/tmp
  $ abspath ../dir1/subdir2/../subdir3
  /home/user/dir1/subdir3
  $ abspath -b /tmp/dir1 ../dir2/../dir3/../dir4
  /tmp/dir4
  $ echo './' | abspath
  /home/user/tmp
  $ abspath ./ .. ../../../usr/../tmp
  /home/user/tmp
  /home/user
  /tmp


================

cstem

cstem is a script for probing C/C++ compiler parameters and testing C/C++ system properties. It can be configured for using specified compiler
command, linker command, compiler and linker flags.

cstem has 4 modes:
  - config mode, for configuring compiler and linker
  - probe mode, for getting detailed compiler parameters. This is the default mode
  - test mode, for testing different C system facilities
  - def mode, for getting CPP macro values

To get help run 'cstem -help'.

Example. Configure cstem:
  $ cstem config CC=gcc CFLAGS="-O3 -g0 -I. -DRELEASE" LDFLAGS="-L."

Example. Probe compiler parameters:
  $ cstem
  id:                 gcc
  version:            4.9.2
  command:            gcc
  cflags:             -O3 -g0 -I. -DRELEASE
  ldflags:            -L.
  language standard:  c89
  target os:          gnulinux
  target os version:  -
  target kernel:      linux
  target arch:        x86_64
  bitness:            64
  endianess:          -
  data model:         lp64

Example. Probe compiler command and flags:
  $ cstem -cmd -cflags
  gcc -O3 -g0 -I. -DRELEASE

Example. Probe compiler type:
  $ cstem -id
  gcc

Example. Probe compiler version:
  $ cstem -ver
  4.9.2

Example. Probe compiler target architecture:
  $ cstem -arch
  x86_64

Exmaple. Probe linker flags:
  $ cstem -ldflags
  -L.

Example. Test libxml2 library and headers:
  $ cstem test -lxml2 -I/usr/include/libxml2 libxml/hash.h
  checking header libxml/hash.h ... OK
  checking libraries  -lxml2 ... OK

Example. Test compiler flags:
  $ cstem test -cflags="-Wall -march=native"
  checking compiler flags -Wall -march=native ... OK

Example. Check '__gnu_linux__' macro:
  $ cstem def __gnu_linux__
  1

Example. Check '__SIZEOF_INT__' macro:
  $ cstem def __SIZEOF_INT__
  4

cstem has many options that allow to probe and test any C related properties. In 'probe' mode it allows to get the following data:
  - compiler type (vendor)
  - compiler version
  - compiler command
  - C language standard
  - target OS
  - target OS version
  - target kernel
  - target architecture
  - target bitness
  - target endianess
  - target data model

In 'test' we can test the following system properties:
  - compiler. check if we have workable compiler
  - compiler flags. check if given flags are correct
  - linker. check if we have workable linker
  - linker flags. check if given linker flags are correct for our linker
  - libraries. check if given libraries are available
  - headers. check if specified headers are available on system
  - defines. test specified defines and complex macro commands
  - types. check if specified types are available
  - enum constants
  - extern variables
  - functions
  - symbols
  - rvalues
  - one line source strings

cstem has many options for every mode that allow to configure compiler/linker command, compiler and linker flags, output format, etc.


================

excom

excom is an abbreviation for COMmand EXist. This script tests if we have specified commands on system.

For example, let's check if we have commands ar, install, wget:
  $ excom ar install wget
  checking ar ... OK
  checking install ... OK
  checking wget ... OK


================

ldlshell

Load interactive shell with predefined LD library path environment

This script runs new Shell with properly defined LD variables (LD_LIBRARY_PATH and other). It takes values from configuration file and uses profiles.
This tool is useful in software build systems to test compiled programs that depend on other libraries from a software package.


================

ldlwrap

This tool generates wrapper Shell script with predefined LD variables for testing compiled programs.

For example, we have program 'src/calc' that depends on libraries 'libs/libmath' and 'libs/libui' of our package. To test program we generate wrapper script:
  $ cd src; ../mk/ldlwrap -L../libs calc
  $ ls calc-ldlw
  calc-ldlw
  $ ./calc-ldlw
In the above example ldlwrap generates script 'calc-ldlw'. This script runs 'calc' program with properly defined LD_LIBRARY_PATH variable to find all dependency
libraries: libmath and libui.


================

libro

This script hides all the complexities of building a C/C++ library on different systems. It is under development.


================

mkconfigure

Generate 'configure' script.

This tool generates 'configure' script that is workable out of box. It can be tuned slightly using a set of parameters. For simple tasks it works without modifications.
Generated script is well commented and is easy to read. Generated script is a good starting point for developing software build system. Together with 'mkmf' scripts it
is possible to develop flexible and portable build system without undesired bloat.

================

mkdep

Generate dependencies of C/C++ source files for Makefile

Example for simple source file 'file1.c':
  $ mkdep file1.c
  $ cat file1.d
  file1.o: file1.c /usr/include/stdc-predef.h /usr/include/stdio.h \
   /usr/include/features.h /usr/include/x86_64-linux-gnu/sys/cdefs.h \
   /usr/include/x86_64-linux-gnu/bits/wordsize.h \
   /usr/include/x86_64-linux-gnu/gnu/stubs.h \
   /usr/include/x86_64-linux-gnu/gnu/stubs-64.h \
   /usr/lib/gcc/x86_64-linux-gnu/4.9/include/stddef.h \
   /usr/include/x86_64-linux-gnu/bits/types.h \
   /usr/include/x86_64-linux-gnu/bits/typesizes.h /usr/include/libio.h \
   /usr/include/_G_config.h /usr/include/wchar.h \
   /usr/lib/gcc/x86_64-linux-gnu/4.9/include/stdarg.h \
   /usr/include/x86_64-linux-gnu/bits/stdio_lim.h \
   /usr/include/x86_64-linux-gnu/bits/sys_errlist.h
  /usr/include/stdc-predef.h:
  /usr/include/stdio.h:
  /usr/include/features.h:
  /usr/include/x86_64-linux-gnu/sys/cdefs.h:
  /usr/include/x86_64-linux-gnu/bits/wordsize.h:
  /usr/include/x86_64-linux-gnu/gnu/stubs.h:
  /usr/include/x86_64-linux-gnu/gnu/stubs-64.h:
  /usr/lib/gcc/x86_64-linux-gnu/4.9/include/stddef.h:
  /usr/include/x86_64-linux-gnu/bits/types.h:
  /usr/include/x86_64-linux-gnu/bits/typesizes.h:
  /usr/include/libio.h:
  /usr/include/_G_config.h:
  /usr/include/wchar.h:
  /usr/lib/gcc/x86_64-linux-gnu/4.9/include/stdarg.h:
  /usr/include/x86_64-linux-gnu/bits/stdio_lim.h:
  /usr/include/x86_64-linux-gnu/bits/sys_errlist.h:


This script should be used in Makefiles. The proper usage can be seen from 'mkmf' script generated by mkmkmf tool.

================

mkmkmf

mkmkmf is a mkmf generation script. mkmf script is Makefile generation script. So mkmkmf is used to quickly generate 'mkmf' scripts that generate Makefile scripts.
This script is useful for developers that want to create portable and parametrized software build system.

It has many parameters for configuring output script. The generated 'mkmf' script is workable and can be used without modifications in most cases.
Generated script is easily readable and can be modified for desired functioning.

There are plenty parameters and a defined techique of constructing portable and flexible software build system. See a manual in doc directory.

================

mkrule

mkrule generates Make rules.

This script is extensively used in 'mkmf' scripts to generate Makefile parts.
It has many modes for generating different types of rules:
  init        generate standard init macros and rules
  obj         generate rules that compile objects from sources
  prog        generate rule that links program from objects
  lib         generate rule that creates library from objects
  subdir      generate rule that runs Make in other sub-directories
  clean       generate rule that cleans files
  distclean   generate rule that cleans build configuration files
  install     generate rules that install/uninstall files on system
  dist        generate rule that creates distribution tarball

Every mode has many parameters. Run 'mkrule -help' and for every mode 'mkrule <MODE> -help' to get a short help on usage.

Example. Generate initial Makefile block:
  $ mkrule init
  ################################################################################
  # INIT
  # # mkrule init
  # all:
  # install:
  # uninstall:
  # clean:
  # distclean:
  # dist:
  # dist-tree:

Example. Generate C source compilation rules:
  $ ./mkrule obj -cflags="-DRELEASE -DGUI -I../md -I." -d _objects -src file1.c file2.c file3.c
  ################################################################################
  # OBJECTS
  # mkrule obj -cflags=-DRELEASE -DGUI -I../md -I. -d _objects -src file1.c file2.c
  _objects/file1.o: file1.c  .deps/_objects/file1.d
          @test -d .deps/_objects/ || mkdir -p .deps/_objects/
          @mkdep -cflags="-DRELEASE -DGUI -I../md -I." -o _objects/file1.o -stdout file1.c >.deps/_objects/file1.d
          @test -d _objects/ || mkdir -p _objects/
          gcc  -DRELEASE -DGUI -I../md -I. -c file1.c -o _objects/file1.o
  -include .deps/_objects/file1.d
  .deps/_objects/file1.d:
  
  _objects/file2.o: file2.c  .deps/_objects/file2.d
          @test -d .deps/_objects/ || mkdir -p .deps/_objects/
          @mkdep -cflags="-DRELEASE -DGUI -I../md -I." -o _objects/file2.o -stdout file2.c >.deps/_objects/file2.d
          @test -d _objects/ || mkdir -p _objects/
          gcc  -DRELEASE -DGUI -I../md -I. -c file2.c -o _objects/file2.o
  -include .deps/_objects/file2.d
  .deps/_objects/file2.d:
  
  clean: clean-obj-469934
  clean-obj-469934:
          rm -f  _objects/file1.o _objects/file2.o
  
  distclean: distclean-obj-469934
  distclean-obj-469934: clean-obj-469934
          rm -Rf .deps



mkrule depends on the following scripts: pofig, cstem, mkdep, ldlwrap, libro


================

optool

This script allows to do some processing with command-line options. It has several work modes that allow:
  convert options to Shell variables
  convert options to CPP defines
  check options
  test options
  parse options

Example. Convert options to Shell variables:
  $ optool dump -cflags -enable-db -prefix=/usr/local -output-format=xml
  FLAG_CFLAGS=1
  FLAG_ENABLE_DB=1
  PREFIX="/usr/local"
  OUTPUT_FORMAT="xml"

Example. Validate input options:
  $ optool validate -help -cflags -enable-db -prefix -cflags -output-format - -cflags -help -zzzzz
  invalid parameter: -zzzzz

Example. Parse options:
  $ . `optool source -option1 -option2 -prefix=/usr/local -output-format=xml`
  $ echo $FLAG_OPTION1
  1
  $ echo $PREFIX
  /usr/local
  $ echo $OUTPUT_FORMAT
  xml


This tool is usefull in Shell scripts to quickly check and parse input options.

================

pofig

pofig - Portable Figure Out system properties

This scripts probes the following system parameters:
  - OS
  - OS version
  - kernel
  - kernel version
  - distro
  - distro version
  - architecture

Example. Get all system properties in verbose mode:
  $ pofig -v
  OS                gnulinux
  OS Version        unknown
  Kernel            linux
  Kernel version    3.16.0
  Distro            Debian
  Distro version    8.7
  Arch              x86_64

Example. Get operating system name:
  $ pofig -os
  gnulinux



================

relpath

Calculate relative path between two directories - source directory (FROM) and destination directory (TO). First parameter is source. Second parameter is destination.
Second parameter can be omitted, by default it is current location.

Run 'relpath -help' to get usage format.

Example:
  $ pwd
  /home/user/tmp
  $ relpath ./
  .
  $ relpath /home
  user/tmp
  $ relpath /usr/include
  ../../home/user/tmp
  $ relpath ./ /usr/include
  ../../../usr/include


================

src2obj

Convert list of source files to a list of object files.

This script is useful in generating rules for Makefiles. For example:
  $ src2obj -o _objects file1.c file2.c file3.c
  _objects/file1.o
  _objects/file2.o
  _objects/file3.o

Example2:
  $ src2obj -s _sources file1.c src/file2.c src2/file3.c
  _sources/file1.o
  _sources/src/file2.o
  _sources/src2/file3.o

