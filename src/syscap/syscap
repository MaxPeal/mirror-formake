#!/bin/sh
#
# Formake syscap
#
# Copyright (c) 2015-2017, Oleksiy Chernyavskyy
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# --------------------------------------------------------------------------------
#
# syscap info NOTE: if kernel name and OS name are same than config_is_<name> means OS name. If some OSes explore kernel that has
# the name as it's native OS than for that custom OSes config_is_<name> is not used for indicating kernel. For example,
# there are some OSes based on FreeBSd kernel. We should not indicated kernel name with prop_os_freebsd for DragonflyBSD,
# for example, since this name indicates FreeBSD OS name.

# NOTE: Linux is a kernel name. It is not OS name. Generally all GNU-based Linux distributions are GNU/Linux OS. So this is
# the name of linux kernel based OS. Since there is no OS named Linux we can use prop_kernel_linux to indicate kernel name.


script_name=`basename $0`
script_dir=`dirname $0`

################################################################################
# LOAD CONFIG
PATH=$FORMAKE:$PATH
SYSCAP=
if test -f $script_dir/formake.conf; then
  . $script_dir/formake.conf
fi
test -n "$FORMAKE_SYSCAP" && SYSCAP=$FORMAKE_SYSCAP
if test -n "$SYSCAP" && test -z "$SYSCAP_REDIRECT"; then
  export SYSCAP_REDIRECT=1
  $SYSCAP "$@"
  ret=$?
  if test $ret -ne 64; then
    exit $ret
  fi
fi
################################################################################

print_help() {
cat <<EOF >&2
System capabilities query and test tool

$script_name [info] [OPTIONS]
$script_name test   [OPTIONS]
$script_name def    [OPTIONS]

Modes:
  info   get base system properties
  test   test system properties
  def    read CPP defines

INFO MODE
 -os        print OS
 -osver     print OS version
 -kernel    print kernel
 -kernver   print kernel version
 -distro    print distro
 -distver   print distro version
 -arch      print architecture
 -id        print system id
 -v         verbose mode

TEST MODE
Flags:
 -n                   no echo
 -f                   echo only on fail
 -with-cc[=CMD]       use C compiler. Optional compiler command can be passed. The compiler will not be tested
 -with-cxx[=CMD]      use C++ compiler. Optional compiler command can be passed. The compiler will not be tested
 -with-cflags=FLAGS   use C/C++ compiler flags. The flags will not be tested
 -with-ldflags=FLAGS  use linker flags. The flags will not be tested
 -disable-ld          disable any linking tests
 -with-inc=INCLUDES   use library include headers. The headers will not be tested

System properties to test:
 -cc CMD            C compiler (overrides -with-cc)
 -cxx CMD           C++ compiler (overrides -with-cxx)
 -cflags=FLAGS      C/C++ flags (appends -with-cflags)
 -ld                C/C++ linker
 -ldflags=FLAGS     linker flags (appends -with-ldflags)
 -prog ..           system programs
 -lib ..            sustem libraries
 -inc ..            library include headers (appends -with-inc)
 -def ..            library defines
 -type ..           library types
 -enum ..           library enum constants
 -var ..            library extern variables
 -func ..           library functions
 -sym ..            library symbols
 -rval ..           library rvalues (define, enum, variable)
 -cstr TEXT         one line source string
 -log[=FILE]        print log to stdout or specified file
 -l*                system libraries
 "#if* ..."         preprocessor condition directives
 *.h|*.hh           lib include headers. Different file extensions are recognized
 *.c|*.cc           test source files. Different file extensions are recognized
 *.so|*.so.*        dynamic libraries
 *.a                static libraries
 *                  system programs
 standard compiler and linker flags are accepted: -I -D -l -L

DEF MODE
 -cc [CMD]       use C compiler. Optional compiler command can be passed
 -cxx [CMD]      use C++ compiler. Optional compiler command can be passed
 -cflags=FLAGS   compiler flags
 -inc ..         include headers
 *.h|*.hh        include headers. Different file extensions are recognized
 *               list of CPP defines
 standard CPP flags are accepted: -I -D
EOF
}

gen_system_id() {
  uname_n=`(uname -n) 2>/dev/null` || uname_n=unknown
  uname_m=`(uname -m) 2>/dev/null` || uname_m=unknown
  uname_r=`(uname -r) 2>/dev/null` || uname_r=unknown
  uname_s=`(uname -s) 2>/dev/null` || uname_s=unknown
  uname_v=`(uname -v) 2>/dev/null` || uname_v=unknown
  uname_p=`(uname -p) 2>/dev/null` || uname_p=unknown
  uname_i=`(uname -i) 2>/dev/null` || uname_i=unknown
  uname_o=`(uname -o) 2>/dev/null` || uname_o=unknown
  arch=`(arch) 2>/dev/null` || arch=unknown
  host_name=`(hostname) 2>/dev/null` || host_name=unknown
  host_id=`(hostid) 2>/dev/null` || host_id=unknown
  lsb_release_a=`(lsb_release -a) 2>/dev/null` || lsb_release_a=unknown
  
  _system_id="${uname_n}${uname_m}${uname_r}${uname_s}${uname_v}${uname_p}${uname_i}${uname_o}${arch}${host_name}${host_id}${lsb_release_a}"
  system_id=`echo "$_system_id" | tr -d '\n\t ' 2>/dev/null | sed 's/\///g'` || system_id=$_system_id
}


perform_probe() {
  config_os=unknown
  config_os_version=unknown
  config_kernel=unknown
  config_kernel_version=unknown
  config_distro=unknown
  config_distro_version=unknown
  config_arch=unknown
  config_system_id=unknown

  gen_system_id
  config_system_id=$system_id

  uname >/dev/null 2>&1
  if test $? -eq 127; then
    return
  fi

  uname_m=`(uname -m) 2>/dev/null` || uname_m=unknown
  uname_r=`(uname -r) 2>/dev/null` || uname_r=unknown
  uname_s=`(uname -s) 2>/dev/null` || uname_s=unknown
  uname_v=`(uname -v) 2>/dev/null` || uname_v=unknown
  uname_p=`(uname -p) 2>/dev/null` || uname_p=unknown

  if test "x$uname_m" = x; then
    uname_m=unknown
  fi
  if test "x$uname_r" = x; then
    uname_r=unknown
  fi
  if test "x$uname_s" = x; then
    uname_s=unknown
  fi
  if test "x$uname_v" = x; then
    uname_v=unknown
  fi
  if test "x$uname_p" = x; then
    uname_p=unknown
  fi

  uname_s_lc=`echo "$uname_s" | tr [A-Z] [a-z]`

  case "$uname_s_lc" in
    netbsd)
      config_os=netbsd
      case "$uname_p" in
        alpha)
          config_arch=alpha
          ;;
        arm)
          config_arch=arm
          ;;
        hppa)
          config_arch=hppa
          ;;
        mipseb | mipsel)
          config_arch=mips
          ;;
        powerpc)
          config_arch=powerpc
          ;;
        sh5*)
          config_arch=superh
          ;;
        sh3eb | sh3el)
          config_arch=superh
          ;;
        sparc)
          config_arch=sparc
          ;;
        sparc64)
          config_arch=sparc64
          ;;
        x86_64)
          config_arch=x86_64
          ;;
      esac
      ;;
    bitrig)
      config_os=bitrig
      ;;
    openbsd)
      config_os=openbsd
      ;;
    mirbsd)
      config_os=mirbsd
      case "$uname_m" in
        macppc)
          config_arch=powerpc
          ;;
      esac
      ;;
    amigaos)
      config_os=amiga
      ;;
    morphos)
      config_os=morphos
      ;;
    z/VM)
      config_os=zvm
      config_arch=zarch
      ;;
    riscos)
      config_os=riscos
      case "$uname_m" in
        arm*)
          config_arch=arm
          ;;
      esac
      ;;
    sunos)
      case "$uname_m:$uname_r" in
        sun4*:5.* | tadpole*:5.* | sun4*:6*)
          config_os=solaris
          config_arch=sparc
          ;;
        prep*:5.*)
          config_arch=powerpc
          config_os=solaris
          ;;
      esac

      case "$uname_r" in
        5.*)
          config_os_vmajor=`echo $uname_r | /usr/bin/sed 's/.*\.\([0-9]*\)/\1/g'`
          ;;
      esac

      case "$uname_p" in
        sparc)
          config_arch=sparc
          ;;
      esac
      ;;
    irix*)
      config_os=irix
      config_arch=mips
      case "$uname_s_lc" in
        irix64)
          config_arch=mips64
          ;;
      esac

      case "$uname_r" in
        *.*)
          config_os_vmajor=`echo $uname_r | sed 's/\([0-9]*\)\..*/\1/g'`
          config_os_vminor=`echo $uname_r | sed 's/.*\.\([0-9]*\)/\1/g'`
          ;;
      esac
      ;;
    aix)
      config_os=aix
      case "$uname_v" in
        [0-9] | [0-9][0-9])
          config_os_vmajor=$uname_v
          ;;
      esac
      case "$uname_r" in
        [0-9] | [0-9][0-9])
          config_os_vminor=$uname_r
          ;;
      esac

      case "$uname_p" in
        powerpc)
          config_arch=powerpc
          ;;
      esac

      case "$uname_m" in
        ia64)
          config_arch=ia64
          ;;
      esac
      ;;
    hp-ux)
      config_os=hpux

      case "$uname_m" in
        ia64)
          config_arch=ia64
          ;;
	  esac
      ;;
    freebsd)
      config_os=freebsd
      case "$uname_p" in
        amd64)
          config_arch=x86_64
          ;;
      esac
      ;;
    cygwin)
      config_os=cygwin
      case "$uname_m" in
        amd64 | x86_64)
          config_arch=x86_64
          ;;
        i*)
          config_arch=x86
          ;;
        p*)
          config_arch=powerpc
          ;;
      esac
      ;;
    mingw64)
      config_os=mingw64
      ;;
    mingw*)
      config_os=mingw
      ;;
    windows32*)
      config_os=mingw
      case "$uname_m" in
        i*)
          config_arch=x86
          ;;
      esac
      ;;
    interix)
      config_os=interix
      case "$uname_m" in
        x86)
          config_arch=x86
          ;;
        authenticamd | genuineintel | EM64T)
          config_arch=x86_64
          ;;
        IA64)
          config_arch=ia64
          ;;
      esac
      ;;
    windows_95 | windows_98 | windows_nt)
      case "$uname_m" in
        8664)
          config_os=mks
          config_arch=x86_64
          ;;
      esac
      ;;
    minix)
      config_os=minix
      case "$uname_m" in
        i*86)
          config_arch=x86
          ;;
      esac
      ;;
    linux)
      config_kernel=linux
      uname_o=`uname -o 2>/dev/null`
      case "$uname_o" in
        GNU/Linux)
          config_os=gnulinux
          ;;
      esac

      uname_r=`uname -r 2>/dev/null`
      kernel_version=`uname -r 2>/dev/null | sed 's/\([0-9]*\.[0-9]*\.[0-9]*\).*/\1/'`
      config_kernel_vmajor=`echo $kernel_version | sed 's/\([0-9]*\)\..*/\1/'`
      config_kernel_vminor=`echo $kernel_version | sed 's/^.*\.\([0-9]*\)\.[0-9]*.*/\1/'`
      config_kernel_vrevision=`echo $kernel_version | sed 's/^.*\.[0-9]*\.\([0-9]*\).*/\1/'`

      case "$uname_m" in
        aarch64 | aarch64_be)
          config_arch=arm64
          ;;
        alpha)
          config_arch=alpha
          ;;
        arc | arceb)
          config_arch=arc
          ;;
        arm*)
          config_arch=arm
          ;;
        avr32*)
          config_arch=avr32
          ;;
        cris | crisv32)
          config_arch=cris
          ;;
        frv)
          config_arch=frv
          ;;
        hexagon)
          config_arch=hexagon
          ;;
        i686)
          config_arch=x86
          ;;
        ia64)
          config_arch=ia64
          ;;
        m32r*)
          config_arch=m32r
          ;;
        mips)
          config_arch=mips
          ;;
        mips64)
          config_arch=mips64
          ;;
        or1k|or32)
          config_arch=or1k
          ;;
        padre)
          config_arch=sparc
          ;;
        parisc64 | hppa64)
          config_arch=hppa64
          ;;
        parisc | hppa)
          config_arch=hppa
          ;;
        ppc64 | ppc64le)
          config_arch=powerpc
          ;;
        ppc | ppcle)
          config_arch=powerpc
          ;;
        sh64*)
          config_arch=superh
          ;;
        sh*)
          config_arch=superh
          ;;
        sparc)
          config_arch=sparc
          ;;
        sparc64)
          config_arch=sparc64
          ;;
        tile*)
          config_arch=tile
          ;;
        x86_64)
          config_arch=x86_64
          ;;
        xtensa*)
          config_arch=xtensa
          ;;
      esac

      if test -f /etc/gentoo-release; then
        distro_version=`cat /etc/gentoo-release | sed 's/.* release *\([0-9.][0-9.]*\).*/\1/'`
        config_distro=gentoo
        config_distro_vmajor=`echo $distro_version | sed 's/\([0-9]*\)\..*/\1/'`
        config_distro_vminor=`echo $distro_version | sed 's/^.*\.\([0-9]*\).*/\1/'`
      fi
      ;;
    syllable)
      config_os=syllable
      case "$uname_m" in
        i*86)
          config_arch=x86
          ;;
      esac
      ;;
    lynxos)
      config_os=lynxos
      case "$uname_m:$uname_r" in
        i*86:*)
          config_arch=x86
          ;;
        TSUNAMI:2.*)
          config_arch=sparc
          ;;
        PowerPC:2.* | PowerPC:3.[01]* | PowerPC:4.[02]*)
          config_arch=powerpc
          ;;
      esac
      ;;
    haiku)
      config_os=haiku
      case "$uname_m" in
        x86_64)
          config_arch=x86_64
          ;;
      esac
      ;;
    darwin)
      config_os=darwin
      ;;
    procnto* | QNX)
      config_os=qnx

      if test "$uname_p" = "x86"; then
        config_arch=x86
      fi
      ;;
    dragonfly)
      config_os=dragonfly
      ;;
    aros)
      config_os=aros
      case "$uname_m" in
        i*86)
          config_arch=x86
        ;;
      esac
      ;;
    vmkernel)
      config_os=esx
      case "$uname_m" in
        x86_64)
          config_arch=x86_64
        ;;
      esac
      ;;
  esac


  if test -n "$config_os_vmajor"; then
    config_os_version=$config_os_vmajor
    if test -n "$config_os_vminor"; then
      config_os_version=${config_os_version}.${config_os_vminor}
      if test -n "$config_os_vrevision"; then
        config_os_version="${config_os_version}.${config_os_vrevision}"
      fi
    fi
  fi

  if test -n "$config_kernel_vmajor"; then
    config_kernel_version=$config_kernel_vmajor
    if test -n "$config_kernel_vminor"; then
      config_kernel_version=${config_kernel_version}.${config_kernel_vminor}
      if test -n "$config_kernel_vrevision"; then
        config_kernel_version="${config_kernel_version}.${config_kernel_vrevision}"
      fi
    fi
  fi

  if test -n "$config_distro_vmajor"; then
    config_distro_version=$config_distro_vmajor
    if test -n "$config_distro_vminor"; then
      config_distro_version=${config_distro_version}.${config_distro_vminor}
      if test -n "$config_distro_vrevision"; then
        config_distro_version="${config_distro_version}.${config_distro_vrevision}"
      fi
    fi
  fi

}

echo_status() {
  if test "$1" = "-l"; then
    p1=$2
    p2=$3
    printf "\n# $p1\n" "$p2" >> $syscap_log
  else
    p1=$1
    p2=$2
  fi
  if test x$op_no_echo = x; then
    printf "$p1" "$p2"
  elif test x$op_echo_fail = x1; then
    printf "$p1" "$p2" >> $tmp_buf
  fi
}

clean_exit() {
  exit_status=$1

  if test $exit_status != 0 && test x$op_echo_fail = x1 && test -f $tmp_buf; then
    cat $tmp_buf
  fi
  rm -f $tmp_buf

  if test -f $syscap_log; then
    if test x$op_echo_log = x1; then
      printf "\n%s\n%s\n" "LOG" "----------------------------------------" >&2
      cat $syscap_log >&2
    fi
    if test -n "$op_log_file"; then
      cat $syscap_log >> $op_log_file
    fi
  fi
  cd $orig_dir
  rm -Rf $tmp_dir
  rm -f $syscap_log

  exit $exit_status
}

log_title() {
  cat <<EOF >>$syscap_log

################################################################################
# $1
EOF
}

log_src() {
  if test -n "$1" && test -f "$1"; then
    echo "****************************************">>$syscap_log
    cat $1 | sed 's/^/* /g' >>$syscap_log
    echo "****************************************">>$syscap_log
  fi
}

abs_path() {
  _sub_orig_dir=`pwd`
  if test $# = 0; then
    abs_path_ret=
    return
  fi
  if test $# = 2; then
    _arg_orig_dir=$1
    _arg=$2
    if echo -n "$_arg" | grep "^/" > /dev/null; then
      :
    else
      _arg=`echo -n "$_arg_orig_dir/$_arg" | sed 's!//*!/!g'`
    fi
  else
    _arg=$1
  fi
  if test -e "$_arg"; then
    if test -d $_arg; then
      _file=
    else
      _file=`basename -- $_arg`
      _arg=`dirname -- $_arg`
    fi

    cd $_cd_param $_arg
    abs_path_ret=`pwd`
    if test x"$_file" != "x"; then
      abs_path_ret="$abs_path_ret/$_file"
    fi

    cd $_cd_param $_sub_orig_dir
  else
    if echo -n "$_arg" | grep "^/" > /dev/null; then
      abs_path_ret="$_arg"
    else
      abs_path_ret="$_sub_orig_dir/$_arg"
    fi
    abs_path_ret=`echo -n "$abs_path_ret" | sed 's#//*#/#g'`
    abs_path_ret=`echo -n "$abs_path_ret" | sed 's#/*$#/#'`
    string_prev=
    while test "x$abs_path_ret" != "x$string_prev" ; do
      string_prev=$abs_path_ret
      abs_path_ret=`echo -n "$abs_path_ret" | sed 's#/[^/][^/][^/][^/]*/\.\./#/#g' | sed 's#/[^/][^/.]/\.\./#/#g' | sed 's#/[^/.][^/]/\.\./#/#g' | sed 's#/[^/.]/\.\./#/#g'`
      abs_path_ret=`echo -n "$abs_path_ret" | sed 's#^/\.\./#/#' | sed 's#^/\.\.$#/#'`
      abs_path_ret=`echo -n "$abs_path_ret" | sed 's#/\./#/#g' | sed 's#/\.$#/#'`
    done
    abs_path_ret=`echo -n "$abs_path_ret" | sed 's#/$##' | sed 's#^$#/#'`
  fi
}

get_cstem() {
  cstem -h >/dev/null 2>&1
  if test $? -ne 127; then
    CSTEM=cstem
  elif test -f $script_dir/cstem; then
    CSTEM=$script_dir/cstem
  fi
  cstem+ -h >/dev/null 2>&1
  if test $? -ne 127; then
    CSTEMX=cstem+
  elif test -f $script_dir/cstem+; then
    CSTEMX=$script_dir/cstem+
  fi
}

get_cc() {
  if test x$cc_type = xcxx; then
    if test -n "$op_with_cmd"; then
      CC_CMD=$op_with_cmd
    elif test -n "$CSTEMX"; then
      CC_CMD=`$CSTEMX -cmd -cflags`
    else
      for cmd in g++ c++ CC xlc++ xlC; do
        $cmd >/dev/null 2>&1 
        if test $? -ne 127; then
          CC_CMD=$cmd
          break
        fi
      done
    fi
    ext="C"
  else
    if test -n "$op_with_cmd"; then
      CC_CMD=$op_with_cmd
    elif test -n "$CSTEM"; then
      CC_CMD=`$CSTEM -cmd -cflags`
    else
      for cmd in gcc cc xlc c99 c89; do
        $cmd >/dev/null 2>&1 
        if test $? -ne 127; then
          CC_CMD=$cmd
          break
        fi
      done
    fi
    ext="c"
  fi
  if test -z "$CC_CMD"; then
    echo_status "%s" "compiler not found"
    clean_exit 1
  fi

  CPP_FLAG=-E
}
  
setup_test_dir() {
  rm -f $tmp_dir
  mkdir $tmp_dir
  cd $tmp_dir
  
  test_src_base=test_src_base.$ext
  
  rm -f $test_src_base
  for inc in $op_with_inc $op_inc; do
    inc=`echo "$inc" | sed 's/[<]//' | sed 's/[>]//'`
    echo "#include <$inc>" >> $test_src_base
  done
}

tmp_buf="/tmp/syscap_$$_buf.txt"
rm -f $tmp_buf
syscap_log=/tmp/syscap$$.log
orig_dir=`pwd`
abs_path `dirname $0`
script_dir=$abs_path_ret
tmp_dir=/tmp/syscap_$$

if test $# -eq 0; then
  op_mode=info
else
  case "$1" in
    info)
      op_mode=info
      shift
      ;;
    test)
      op_mode=test
      shift
      ;;
    def)
      op_mode=def
      shift
      ;;
    -h|-help|--help)
      print_help
      exit 0
      ;;
    *)
      op_mode=info
      ;;
  esac
fi

if test "$op_mode" = info; then
  perform_probe
  
  op_verbose=
  for arg in "$@"; do
    case "$arg" in
      -v)
        op_verbose=1
        ;;
    esac
  done
  
  if test $# -eq 0; then
    print_string="$config_os $config_os_version $config_kernel $config_kernel_version $config_distro $config_distro_version $config_arch"
  fi

  while test $# -gt 0; do
    case "$1" in
      -os)
        print_string="$print_string $config_os"
        op_os=1
        ;;
      -osver)
        print_string="$print_string $config_os_version"
        op_osver=1
        ;;
      -kernel)
        print_string="$print_string $config_kernel"
        op_kernel=1
        ;;
      -kernver)
        print_string="$print_string $config_kernel_version"
        op_kernver=1
        ;;
      -distro)
        print_string="$print_string $config_distro"
        op_distro=1
        ;;
      -distver)
        print_string="$print_string $config_distro_version"
        op_distver=1
        ;;
      -arch)
        print_string="$print_string $config_arch"
        op_arch=1
        ;;
      -id)
        print_string="$print_string $config_system_id"
        op_id=1
        ;;
      -v) : ;;
      *)
        printf "%s\n" "$script_name: invalid parameter $1" >&2
        exit 1
        ;;
    esac
    shift
  done
  
  if test x$op_verbose = x1; then
    if test -z "$op_os$op_osver$op_kernel$op_kernver$op_distro$op_distver$op_arch$op_id"; then
      op_os=1
      op_osver=1
      op_kernel=1
      op_kernver=1
      op_distro=1
      op_distver=1
      op_arch=1
    fi
    if test x$op_os = x1; then
      echo "OS                ${config_os:-'-'}"
    fi
    if test x$op_osver = x1; then
      echo "OS Version        ${config_os_version:-'-'}"
    fi
    if test x$op_kernel = x1; then
      echo "Kernel            ${config_kernel:-'-'}"
    fi
    if test x$op_kernver = x1; then
      echo "Kernel version    ${config_kernel_version:-'-'}"
    fi
    if test x$op_distro = x1; then
      echo "Distro            ${config_distro:-'-'}"
    fi
    if test x$op_distver = x1; then
      echo "Distro version    ${config_distro_version:-'-'}"
    fi
    if test x$op_arch = x1; then
      echo "Arch              ${config_arch:-'-'}"
    fi
    if test x$op_id = x1; then
      echo "System id         ${config_system_id:-'-'}"
    fi
  else
    print_string=`echo "$print_string" | sed 's/^ *//' | sed 's/ *$//' | sed 's/  */ /g'`
    printf "%s\n" "$print_string"
  fi
  
  exit 0
elif test "$op_mode" = test; then
  command -v ls >/dev/null 2>&1
  if test $? -ne 127; then
    have_command_v=1
  fi
  hash ls >/dev/null 2>&1
  if test $? -eq 0; then
    have_hash=1
  fi
  type -P ls >/dev/null 2>&1
  if test $? -eq 0; then
    have_type_p=1
  fi
  whence -p ls >/dev/null 2>&1
  if test $? -eq 0; then
    have_whence_p=1
  fi

  get_cstem

  current_opt=
  def_num=0
  have_cc_tests=
  while test $# -gt 0; do
    param=`echo -n "$1" | sed 's/^ *//' | sed 's/^# */#/'`
    case "$param" in
      -n)
        op_no_echo=1
        op_echo_fail=
        current_opt=
        ;;
      -f)
        op_echo_fail=1
        op_no_echo=1
        current_opt=
        ;;
      -with-cc)
        with_cc_type=cc
        have_cc_tests=1
        current_opt=
        ;;
      -with-cc=*)
        with_cc_type=cc
        op_with_cmd=`echo -n "$param" | sed 's/^[^=]*=//'`
        have_cc_tests=1
        current_opt=
        ;;
      -with-cxx)
        with_cc_type=cxx
        have_cc_tests=1
        current_opt=
        ;;
      -with-cxx=*)
        with_cc_type=cxx
        op_with_cmd=`echo -n "$param" | sed 's/^[^=]*=//'`
        have_cc_tests=1
        current_opt=
        ;;
      -with-cflags=*)
        op_with_cflags=`echo -n "$param" | sed 's/^[^=]*=//'`
        have_cc_tests=1
        current_opt=
        ;;
      -with-ldflags=*)
        op_with_ldflags=`echo -n "$param" | sed 's/^[^=]*=//'`
        have_cc_tests=1
        current_opt=
        ;;
      -disable-ld)
        op_disable_ld=1
        have_cc_tests=1
        current_opt=
        ;;
      -with-inc=*)
        op_with_inc=`echo -n "$param" | sed 's/^[^=]*=//'`
        have_cc_tests=1
        current_opt=
        ;;
      -cc)
        cc_type=cc
        op_test_cc=1
        have_cc_tests=1
        current_opt=cc
        ;;
      -cxx)
        cc_type=cxx
        op_test_cc=1
        have_cc_tests=1
        current_opt=cxx
        ;;
      -cflags=*|-cxxflags=*)
        op_cflags=`echo -n "$param" | sed 's/^[^=]*=//'`
        have_cc_tests=1
        current_opt=
        ;;
      -ld)
        op_test_ld=1
        have_cc_tests=1
        current_opt=
        ;;
      -ldflags=*)
        op_ldflags=`echo -n "$param" | sed 's/^[^=]*=//'`
        have_cc_tests=1
        current_opt=
        ;;
      -prog)
        current_opt=prog
        ;;
      -lib)
        have_cc_tests=1
        current_opt=lib
        ;;
      -inc)
        have_cc_tests=1
        current_opt=inc
        ;;
      -def)
        have_cc_tests=1
        current_opt=def
        ;;
      -type)
        have_cc_tests=1
        current_opt='type'
        ;;
      -enum)
        have_cc_tests=1
        current_opt=enum
        ;;
      -var)
        have_cc_tests=1
        current_opt=var
        ;;
      -func)
        have_cc_tests=1
        current_opt=func
        ;;
      -sym)
        have_cc_tests=1
        current_opt=sym
        ;;
      -rval)
        have_cc_tests=1
        current_opt=rval
        ;;
      -cstr)
        have_cc_tests=1
        current_opt=cstr
        ;;
      -log)
        op_echo_log=1
        current_opt=
        ;;
      -log=*)
        op_log_file=`echo -n "$param" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
      -l*)
        have_cc_tests=1
        op_libs="$op_libs $param"
        current_opt=
        ;;
      -[ID]*)
        have_cc_tests=1
        op_with_cflags_add="$op_with_cflags_add $param"
        current_opt=
        ;;
      -L*)
        have_cc_tests=1
        op_with_ldflags_add="$op_with_ldflags_add $param"
        current_opt=
        ;;
      \#if*)
        have_cc_tests=1
        eval def$def_num=\$param
        def_num=`expr $def_num + 1`
        if test x$current_opt != xdef; then
          current_opt=
        fi
        ;;
      *.h)
        have_cc_tests=1
        op_inc="$op_inc $param"
        current_opt=
        ;;
      *.H|*.[Hh]++|*.[Hh][Hh]|*.[Hh][Xx][Xx]|*.[Hh][Pp][Pp])
        have_cc_tests=1
        op_inc="$op_inc $param"
        if test -z "$cc_type"; then
          cc_type=cxx
        fi
        current_opt=
        ;;
      *.c)
        have_cc_tests=1
        op_src="$op_src $param"
        current_opt=
        ;;
      *.C|*.[Cc][Cc]|*.[Cc][Pp][Pp]|*.[Cc][Xx][Xx]|*.[Cc]++)
        have_cc_tests=1
        op_src="$op_src $param"
        if test -z "$cc_type"; then
          cc_type=cxx
        fi
        current_opt=
        ;;
      *.so|*.so.*)
        have_cc_tests=1
        op_libs="$op_libs $param"
        if test x$current_opt != xlib; then
          current_opt=
        fi
        ;;
      *.a)
        have_cc_tests=1
        op_libs="$op_libs $param"
        if test x$current_opt != xlib; then
          current_opt=
        fi
        ;;
      *)
        if test x$current_opt = x; then
          current_opt=prog
        fi
        case "$current_opt" in
          cc|cxx)
            op_with_cmd=$param
            current_opt=
            ;;
          prog)
            op_progs="$op_progs $param"
            ;;
          lib)
            param=`echo -n "$param" | sed 's/^lib//'`
            if test -n "$param"; then
              op_libs="$op_libs -l$param"
            fi
            ;;
          inc)
            op_inc="$op_inc $param"
            ;;
          def)
            eval def$def_num=\$param
            def_num=`expr $def_num + 1`
            ;;
          type)
            op_type="$op_type $param"
            ;;
          enum)
            op_enum="$op_enum $param"
            ;;
          var)
            op_var="$op_var $param"
            ;;
          func)
            op_func="$op_func $param"
            ;;
          sym)
            op_sym="$op_sym $param"
            ;;
          rval)
            op_rval="$op_rval $param"
            ;;
          cstr)
            op_cstr=$1
            current_opt=
            ;;
        esac
        ;;
    esac
    shift
  done

  if test -z "$cc_type"; then
    cc_type=$with_cc_type
  fi
  op_with_cflags="$op_with_cflags_add $op_with_cflags"
  op_with_ldflags="$op_with_ldflags_add $op_with_ldflags"

  op_cflags=`echo "$op_cflags" | sed 's/^ *//' | sed 's/ *$//'`
  op_ldflags=`echo "$op_ldflags" | sed 's/^ *//' | sed 's/ *$//'`

  if test -n "$op_log_file"; then
    if echo -n "$op_log_file" | grep "^/" > /dev/null; then : ; else
      op_log_file="$orig_dir/$op_log_file"
    fi
  fi

################################################################################
# TEST PROGRAMS
  op_progs=`echo -n "$op_progs" | tr ' ' '\n' | sort | uniq | tr '\n' ' '`
  for prog in $op_progs; do
    echo_status -l "%s" "checking $prog ... "
    if test x$have_command_v = x1; then
      command -v $prog >/dev/null 2>&1
      if test $? != 0; then
        echo_status "%s\n" "Failed"
        clean_exit 1
      fi
    elif test x$have_hash = x1; then
      hash $prog >/dev/null 2>&1
      if test $? != 0; then
        echo_status "%s\n" "Failed"
        clean_exit 1
      fi
    elif test x$have_type_p = x1; then
      type -P $prog >/dev/null 2>&1
      if test $? != 0; then
        echo_status "%s\n" "Failed"
        clean_exit 1
      fi
    elif test x$have_whence_p = x1; then
      whence -p $prog >/dev/null 2>&1
      if test $? != 0; then
        echo_status "%s\n" "Failed"
        clean_exit 1
      fi
    else
      found=
      IFS_save=$IFS
      IFS=:
      for dir in $PATH; do
        if test -n "$dir" && test -f "$dir/$prog" && test -x "$dir/$prog" ; then
          found=1
          break
        fi
      done
      IFS=$IFS_save
      if test x$found = x; then
        echo_status "%s\n" "Failed"
        clean_exit 1
      fi
    fi
    echo_status "%s\n" "OK"
  done

  if test x$have_cc_tests = x; then
    exit 0
  fi

################################################################################
# SET UP COMPILER AND LINKER
  get_cc
  CPP_FLAG=-E
  LD_CMD=$CC_CMD
  
################################################################################
# SET UP TEST DIR
  setup_test_dir
  test_src=test_src.$ext
  
################################################################################
# TEST COMPILER
  if test x$op_test_cc = x1; then
    log_title "TEST COMPILER"
    echo_status -l "%s" "checking compiler $CC_CMD ... "

    cat <<EOF >test.$ext
int main(int argc, char *argv[]) {
  return 0;
}
EOF
    log_src test.$ext
    echo "$CC_CMD $op_with_cflags -c -o test.o test.$ext" >> $syscap_log
    $CC_CMD $op_with_cflags -c -o test.o test.$ext>> $syscap_log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      clean_exit $ret
    else
      echo_status "%s\n" "OK"
    fi
    rm -f test.$ext
    rm -f test.o
  fi
  
################################################################################
# TEST COMPILER FLAGS
  if test -n "$op_cflags"; then
    log_title "TEST COMPILER FLAGS"
    echo_status -l "%s" "checking compiler flags $op_cflags ... "

    cat <<EOF >test.$ext
int main(int argc, char *argv[]) {
  return 0;
}
EOF
    log_src test.$ext
    echo "$CC_CMD $op_with_cflags $op_cflags -c -o test.o test.$ext" >> $syscap_log
    $CC_CMD $op_with_cflags $op_cflags -c -o test.o test.$ext>> $syscap_log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      flags=
      for flag in $op_cflags; do
       echo_status "%s" "  $flag ... "
       flags="$flags $flag"
       echo "$CC_CMD $op_with_cflags $flags -c -o test.o test.$ext" >> $syscap_log
       $CC_CMD $op_with_cflags $flags -c -o test.o test.$ext>> $syscap_log 2>&1
       _ret=$?
       if test $_ret -ne 0; then
         echo_status "%s\n" "Failed"
         clean_exit $_ret
       else
         echo_status "%s\n" "OK"
       fi
      done
      clean_exit $ret
    else
      echo_status "%s\n" "OK"
    fi
    rm -f test.$ext
    rm -f test.o
  fi
  
################################################################################
# TEST LD
  if test x$op_test_ld = x1; then
    log_title "TEST LD"
    echo_status -l "%s" "checking linker $LD_CMD ... "

    cat <<EOF >test.$ext
int main(int argc, char *argv[]) {
  return 0;
}
EOF
    log_src test.$ext
    echo "$CC_CMD $op_with_cflags $op_cflags -c -o test.o test.$ext" >> $syscap_log
    $CC_CMD $op_with_cflags $op_cflags -c -o test.o test.$ext>> $syscap_log 2>&1
    
    echo "$LD_CMD -o app test.o $op_with_ldflags" >> $syscap_log
    $LD_CMD -o app test.o $op_with_ldflags >> $syscap_log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      clean_exit $ret
    else
      echo_status "%s\n" "OK"
    fi
    rm -f app
    rm -f test.o
  fi

################################################################################
# TEST LD FLAGS
  if test -n "$op_ldflags"; then
    log_title "TEST LD FLAGS"
    echo_status -l "%s" "checking linker flags $op_ldflags ... "

    cat <<EOF >test.$ext
int main(int argc, char *argv[]) {
  return 0;
}
EOF
    log_src test.$ext
    echo "$CC_CMD $op_with_cflags $op_cflags -c -o test.o test.$ext" >> $syscap_log
    $CC_CMD $op_with_cflags $op_cflags -c -o test.o test.$ext>> $syscap_log 2>&1

    echo "$LD_CMD -o app test.o $op_with_ldflags $op_ldflags" >> $syscap_log
    $LD_CMD -o app test.o $op_with_ldflags $op_ldflags >> $syscap_log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      flags=
      for flag in $op_ldflags; do
       echo_status "%s" "  $flag ... "
       flags="$flags $flag"
       echo "$LD_CMD -o app test.o $op_with_ldflags $flags" >> $syscap_log
       $LD_CMD -o app test.o $op_with_ldflags $flags >> $syscap_log 2>&1
       _ret=$?
       if test $_ret -ne 0; then
         echo_status "%s\n" "Failed"
         clean_exit $_ret
       else
         echo_status "%s\n" "OK"
       fi
      done
      clean_exit $ret
    else
      echo_status "%s\n" "OK"
    fi
    rm -f app
    rm -f test.o
  fi

################################################################################
# TEST HEADERS
  if test -n "$op_inc"; then
    log_title "TEST HEADERS"
    for inc in $op_inc; do
      rm -f $test_src
      inc=`echo "$inc" | sed 's/[<]//' | sed 's/[>]//'`
      echo "#include <$inc>" >> $test_src
      echo_status -l "%s" "checking header $inc ... "
      log_src $test_src
      echo "$CC_CMD $op_with_cflags $op_cflags -c -o test.o $test_src" >> $syscap_log
      $CC_CMD $op_with_cflags $op_cflags -c -o test.o $test_src >> $syscap_log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        clean_exit $ret
      else
        echo_status "%s\n" "OK"
      fi
      rm -f test.o
    done
  fi
  
################################################################################
# TEST CPP DEFINES
  if test $def_num -gt 0; then
    log_title "TEST CPP DEFINES"
  fi
  def_idx=0
  while test $def_idx -lt $def_num; do
    rm -f $test_src
    if test -f $test_src_base; then
      cp $test_src_base $test_src
    fi

    if_directive=0
    eval def_string=\$def$def_idx
    def_string=`echo -n "$def_string" | sed 's/^ *//'`
    echo_status -l "%s" "checking define $def_string ... "
    case "$def_string" in
      '#if'*)
        if_directive=1
        ;;
    esac
  
    if test $if_directive = 1; then
      cat >>$test_src <<EOF
$def_string
#else
#error syscap: false directive: $def_string
#endif

EOF
    else
      def_name=`echo -n "$def_string" | sed 's/[^a-zA-Z0-9_].*//'`
      case "$def_name" in
        [0-9]*)
          echo "$script_name: error invalid macro $def_name" >&2
          clean_exit 1
          ;;
      esac
      rpart=`echo -n "$def_string" | sed 's/[a-zA-Z0-9_]*//'`
      if test "x$rpart" = x; then
        cat >>$test_src <<EOF
#ifndef $def_name
#error syscap: $def_name not defined
#endif

EOF
      else
        opstr=`echo -n "$rpart" | sed 's/^\([=><!]*\).*/\1/'`
        rval=`echo -n "$rpart" | sed 's/^[=><!]*//'`
        case x$opstr in
          'x=='|'x!='|'x>'|'x<'|'x>='|'x<=')
            :
            ;;
          'x=')
            opstr="=="
            ;;
          *)
            echo "$script_name: error invalid argument $def_string" >&2
            clean_exit 1
            ;;
        esac
        cat >>$test_src <<EOF
#if $def_name $opstr $rval
#else
#error syscap: false expression: $def_name $opstr $rval
#endif

EOF
      fi
    fi
    log_src $test_src
    echo "$CC_CMD $op_with_cflags $op_cflags -c -o test.o $test_src" >> $syscap_log
    $CC_CMD $op_with_cflags $op_cflags -c -o test.o $test_src >> $syscap_log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      clean_exit $ret
    else
      echo_status "%s\n" "OK"
    fi
    rm -f test.o
    def_idx=`expr $def_idx + 1`
  done
  
################################################################################
# TEST TYPES
  if test -n "$op_type"; then
    log_title "TEST TYPES"
    for type in $op_type; do
      rm -f $test_src
      if test -f $test_src_base; then
        cp $test_src_base $test_src
      fi

      type_base=`echo "$type" | sed 's/ *\**$//'`
      echo "$type_base *syscap_$type_base;" >> $test_src
    
      echo_status -l "%s" "checking type $type_base ... "
      log_src $test_src
      echo "$CC_CMD $op_with_cflags $op_cflags -c -o test.o $test_src" >> $syscap_log
      $CC_CMD $op_with_cflags $op_cflags -c -o test.o $test_src >> $syscap_log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        clean_exit $ret
      else
        echo_status "%s\n" "OK"
      fi
      rm -f test.o
    done
  fi
  
################################################################################
# TEST ENUMS
  if test -n "$op_enum"; then
    log_title "TEST ENUMS"
    for enum in $op_enum; do
      rm -f $test_src
      if test -f $test_src_base; then
        cp $test_src_base $test_src
      fi

      echo "int syscap_$enum = $enum;" >> $test_src
    
      echo_status -l "%s" "checking enum $enum ... "
      log_src $test_src
      echo "$CC_CMD $op_with_cflags $op_cflags -c -o test.o $test_src" >> $syscap_log
      $CC_CMD $op_with_cflags $op_cflags -c -o test.o $test_src >> $syscap_log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        clean_exit $ret
      else
        echo_status "%s\n" "OK"
      fi
      rm -f test.o
    done
  fi
  
################################################################################
# TEST LIBRARIES
  if test -n "$op_libs"; then
    log_title "TEST LIBRARIES"
    echo_status -l "%s" "checking libraries $op_libs ... "

    cat <<EOF >test.$ext
int main(int argc, char *argv[]) {
  return 0;
}
EOF
    log_src test.$ext
    echo "$CC_CMD $op_with_cflags $op_cflags -c -o test.o test.$ext" >> $syscap_log
    $CC_CMD $op_with_cflags $op_cflags -c -o test.o test.$ext>> $syscap_log 2>&1

    echo "$LD_CMD -o app test.o $op_with_ldflags $op_ldflags $op_libs" >> $syscap_log
    $LD_CMD -o app test.o $op_with_ldflags $op_ldflags $op_libs >> $syscap_log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      libs=
      for lib in $op_libs; do
       echo_status "%s" "  $lib ... "
       libs="$libs $lib"
       echo "$LD_CMD -o app test.o $op_with_ldflags $op_ldflags $libs" >> $syscap_log
       $LD_CMD -o app test.o $op_with_ldflags $op_ldflags $libs >> $syscap_log 2>&1
       _ret=$?
       if test $_ret -ne 0; then
         echo_status "%s\n" "Failed"
         clean_exit $_ret
       else
         echo_status "%s\n" "OK"
       fi
      done
      clean_exit $ret
    else
      echo_status "%s\n" "OK"
    fi
    rm -f app
    rm -f test.o
  fi
  
################################################################################
# TEST CSTR
  if test -n "$op_cstr"; then
    log_title "TEST CSTR"
    rm -f $test_src
    if test -f $test_src_base; then
      cp $test_src_base $test_src
    fi
    echo "$op_cstr" >> $test_src
  
    echo_status -l "%s" "checking source string $op_cstr ... "
    log_src $test_src
    echo "$CC_CMD $op_with_cflags $op_cflags -c -o test.o $test_src" >> $syscap_log
    $CC_CMD $op_with_cflags $op_cflags -c -o test.o $test_src >> $syscap_log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      clean_exit $ret
    else
      if test x$op_disable_ld = x; then
        echo "$LD_CMD -o app test.o $op_with_ldflags $op_ldflags $op_libs" >> $syscap_log
        $LD_CMD -o app test.o $op_with_ldflags $op_ldflags $op_libs >> $syscap_log 2>&1
        ret=$?
        if test $ret -ne 0; then
          rm -f test.o
          echo "test again ..." >> $syscap_log
          echo "int main(int argc, char *argv[]) { return 0;}" >>$test_src
          log_src $test_src
          echo "$CC_CMD $op_with_cflags $op_cflags -c -o test.o $test_src" >> $syscap_log
          $CC_CMD $op_with_cflags $op_cflags -c -o test.o $test_src >> $syscap_log 2>&1
          ret=$?
          if test $ret -ne 0; then
            echo_status "%s\n" "Failed"
            clean_exit $ret
          else
            echo "$LD_CMD -o app test.o $op_with_ldflags $op_ldflags $op_libs" >> $syscap_log
            $LD_CMD -o app test.o $op_with_ldflags $op_ldflags $op_libs >> $syscap_log 2>&1
            ret=$?
            if test $ret -ne 0; then
              echo_status "%s\n" "Failed"
              clean_exit $ret
            fi
          fi
        fi
      fi
    fi
    rm -f test.o
    echo_status "%s\n" "OK"
  fi
  
################################################################################
# TEST VARIABLES
  if test -n "$op_var"; then
    log_title "TEST VARIABLES"
    for var in $op_var; do
      rm -f $test_src
      if test -f $test_src_base; then
        cp $test_src_base $test_src
      fi

      echo_status -l "%s" "checking variable $var ... "
    
      echo "int main(int argc, char *argv[]) {int syscap_$var = (int) $var; return 0;}" >> $test_src
    
      log_src $test_src
      echo "$CC_CMD $op_with_cflags $op_cflags -c -o test.o $test_src" >> $syscap_log
      $CC_CMD $op_with_cflags $op_cflags -c -o test.o $test_src >> $syscap_log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        clean_exit $ret
      fi
    
      if test x$op_disable_ld = x; then
        echo "$LD_CMD -o app test.o $op_with_ldflags $op_ldflags $op_libs" >> $syscap_log
        $LD_CMD -o app test.o $op_with_ldflags $op_ldflags $op_libs >> $syscap_log 2>&1
        ret=$?
        if test $ret -ne 0; then
          echo_status "%s\n" "Failed"
          clean_exit $ret
        fi
      fi
      echo_status "%s\n" "OK"
      rm -f test.o
    done
  fi
  
################################################################################
# TEST SYMBOLS
  if test -n "$op_sym"; then
    log_title "TEST SYMBOLS"
    for sym in $op_sym; do
      echo_status -l "%s" "checking symbol $sym ... "
    
      echo "extern void *$sym;" > $test_src
      echo "int main(int argc, char *argv[]) {void *syscap_$sym = $sym; return 0;}" >> $test_src
    
      log_src $test_src
      echo "$CC_CMD $op_with_cflags $op_cflags -c -o test.o $test_src" >> $syscap_log
      $CC_CMD $op_with_cflags $op_cflags -c -o test.o $test_src >> $syscap_log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        clean_exit $ret
      fi
    
      if test x$op_disable_ld = x; then
        echo "$LD_CMD -o app test.o $op_with_ldflags $op_ldflags $op_libs" >> $syscap_log
        $LD_CMD -o app test.o $op_with_ldflags $op_ldflags $op_libs >> $syscap_log 2>&1
        ret=$?
        if test $ret -ne 0; then
          echo_status "%s\n" "Failed"
          clean_exit $ret
        fi
      fi
      echo_status "%s\n" "OK"
      rm -f test.o
    done
  fi
  
################################################################################
# TEST RVALS
  if test -n "$op_rval"; then
    log_title "TEST RVALS"
    for var in $op_rval; do
      rm -f $test_src
      if test -f $test_src_base; then
        cp $test_src_base $test_src
      fi

      echo_status -l "%s" "checking rval $var ... "
    
      echo "int main(int argc, char *argv[]) {int syscap_$var = (int) $var; return 0;}" >> $test_src
    
      log_src $test_src
      echo "$CC_CMD $op_with_cflags $op_cflags -c -o test.o $test_src" >> $syscap_log
      $CC_CMD $op_with_cflags $op_cflags -c -o test.o $test_src >> $syscap_log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        clean_exit $ret
      fi
    
      if test x$op_disable_ld = x; then
        echo "$LD_CMD -o app test.o $op_with_ldflags $op_ldflags $op_libs" >> $syscap_log
        $LD_CMD -o app test.o $op_with_ldflags $op_ldflags $op_libs >> $syscap_log 2>&1
        ret=$?
        if test $ret -ne 0; then
          echo_status "%s\n" "Failed"
          clean_exit $ret
        fi
      fi
      echo_status "%s\n" "OK"
      rm -f test.o
    done
  fi
  
################################################################################
# TEST FUNCTIONS
  if test -n "$op_func"; then
    log_title "TEST FUNCTIONS"
    for func in $op_func; do
      func=`echo "$func" | sed 's/[(]//' | sed 's/[)]//'`
    
      echo_status -l "%s" "checking function $func ... "
    
      echo "int $func(int);" > $test_src
      echo "int main(int argc, char *argv[]) { int syscap_$func = $func(1); return syscap_$func; }" >> $test_src
    
      log_src $test_src
      echo "$CC_CMD $op_with_cflags $op_cflags -c -o test.o $test_src" >> $syscap_log
      $CC_CMD $op_with_cflags $op_cflags -c -o test.o $test_src >> $syscap_log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        clean_exit $ret
      fi
    
      if test x$op_disable_ld = x; then
        echo "$LD_CMD -o app test.o $op_with_ldflags $op_ldflags $op_libs" >> $syscap_log
        $LD_CMD -o app test.o $op_with_ldflags $op_ldflags $op_libs >> $syscap_log 2>&1
        ret=$?
        if test $ret -ne 0; then
          echo_status "%s\n" "Failed"
          clean_exit $ret
        fi
      fi
      echo_status "%s\n" "OK"
      rm -f test.o
    done
  fi
  
################################################################################
# TEST SOURCE FILES
  if test -n "$op_src"; then
    log_title "TEST SOURCE FILES"
    for src in $op_src; do
      if echo -n "$src" | grep "^/" > /dev/null; then 
        src_full=$src
      else
        src_full="$orig_dir/$src"
      fi
    
      echo_status -l "%s" "checking source file $src ... "
    
      if test ! -f $src_full; then
        echo_status "%s\n" "Failed"
        echo_status "%s\n" "  file $src not found"
        clean_exit 1
      fi
      cp $src_full .
      src_base=`basename $src_full`
    
      log_src $src_base
      echo "$CC_CMD $op_with_cflags $op_cflags -c -o test.o $src_base" >> $syscap_log
      $CC_CMD $op_with_cflags $op_cflags -c -o test.o $src_base >> $syscap_log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        clean_exit $ret
      fi
    
      if test x$op_disable_ld = x; then
        echo "$LD_CMD -o app test.o $op_with_ldflags $op_ldflags $op_libs" >> $syscap_log
        $LD_CMD -o app test.o $op_with_ldflags $op_ldflags $op_libs >> $syscap_log 2>&1
        ret=$?
        if test $ret -ne 0; then
          echo_status "%s\n" "Failed"
          clean_exit $ret
        fi
      fi
      echo_status "%s\n" "OK"
      rm -f test.o $src_base
    done
  fi
  
  clean_exit 0
elif test "$op_mode" = def; then
  orig_dir=`pwd`
  abs_path `dirname $0`
  script_dir=$abs_path_ret
  tmp_dir=/tmp/syscap_$$

  get_cstem

  op_def=
  current_opt=
  while test $# -gt 0; do
    case "$1" in
      -cc)
        cc_type=cc
        current_opt=cc
        ;;
      -cxx)
        cc_type=cxx
        current_opt=cxx
        ;;
      -cflags=*)
        op_cflags=`echo -n "$1" | sed 's/^[^=]*=//'`
        current_opt=
        ;;
      -inc)
        current_opt=inc
        ;;
      -[ID]*)
        op_cflags_add="$op_cflags_add $1"
        current_opt=
        ;;
      *.h)
        op_inc="$op_inc $1"
        current_opt=
        ;;
      *.H|*.[Hh]++|*.[Hh][Hh]|*.[Hh][Xx][Xx]|*.[Hh][Pp][Pp])
        op_inc="$op_inc $1"
        if test -z "$cc_type"; then
          cc_type=cxx
        fi
        current_opt=
        ;;
      *)
        case "$current_opt" in
          cc|cxx)
            op_cmd=$1
            current_opt=
            ;;
          inc)
            op_inc="$op_inc $1"
            ;;
          *)
            op_def="$op_def $1"
            ;;
        esac
        ;;
    esac
    shift
  done

  if test -z "$op_def"; then
    exit 0
  fi

  op_cflags=`echo "$op_cflags_add $op_cflags" | sed 's/^ *//' | sed 's/ *$//'`
  op_with_cmd=$op_cmd

  op_no_echo=1
  op_echo_fail=1
  op_with_inc=

################################################################################
# SET UP COMPILER
  get_cc

################################################################################
# SET UP TEST DIR
  setup_test_dir
  test_src=test_src.$ext

################################################################################
# READ DEFINES
  defvals=
  for def in $op_def; do
    rm -f $test_src
    if test -f "$test_src_base"; then
      cat $test_src_base >$test_src
    fi
    echo "SYSCAP_DEFVAL=$def" >>$test_src
    $CC_CMD $op_cflags $CPP_FLAG $test_src 2>/dev/null > test_c.out
    defval=`cat test_c.out | grep "^SYSCAP_DEFVAL" | sed 's/^SYSCAP_DEFVAL=//' | sed 's/ *$//' | sed 's/"$//' |  sed 's/^"//' | tr -d '\n'`
    if test -n "$defvals"; then
      defvals="$defvals $defval"
    else
      defvals=$defval
    fi
  done
  echo "$defvals" | sed 's/^ *//'
  rm -f $test_src
  clean_exit 0
fi


