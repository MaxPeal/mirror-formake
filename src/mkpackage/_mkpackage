#!/bin/sh
#
# Author: Oleksiy Chernyavskyy <ochern@rocketmail.com>
#

version_string="mkpackage 1.0"

orig_dir=`pwd`
script_name=`basename "$0"`
script_dir=`dirname $0`

op_dir=formake
formake_scripts="abspath cfront cstem cstem+ install libro listed mkdep mkrule optool relpath syscap"
share_dir=

print_help() {
  cat <<EOF
Initialize new package

$script_name -v
$script_name [OPTIONS] [SCRIPTS]

 -v      print version

Options:
 -p DIR  create package directory
 -d DIR  package script directory name [formake]
 -std    install standard minimum set of scripts

Scripts:
  abspath      general automation       calculate absolute path
  cstem        configure automation     configure and probe C compiler
  cstem+       configure automation     configure and probe C++ compiler
  cfront       mkmf automation          C/C++ compiler frontend based on cstem/cstem+
  install      general automation       portable version of BSD install
  libro        mkmf automation          build static and dynamic libraries
  listed       general automation       process space separated text lists
  mkdep        mkmf automation          generate dependencies of C/C++ source files for Makefile
  mkrule       mkmf automation          generate Make rules
  optool       general automation       options processing tool
  syscap       configure automation     system capabilities query and test tool
  relpath      general automation       calculate relative path between two directories
EOF
}

print_version() {
  echo "$version_string"
}

select_standard() {
  s_mkrule=1
  s_optool=1
  s_relpath=1
  s_syscap=1
  have_list=1
}

while test $# -gt 0; do
  case $1 in
    -h|-help|--help)
      print_help
      exit 0
      ;;
    -v)
      print_version
      exit 0
      ;;
    -p)
      shift
      if test -z "$1"; then
        echo "$script_name: error. Parameter -p requires argument" >&2
        exit 1
      fi
      op_package_dir=$1
      ;;
    -d)
      shift
      if test -z "$1"; then
        echo "$script_name: error. Parameter -d requires argument" >&2
        exit 1
      fi
      op_dir=$1
      ;;
    -std)
      select_standard
      ;;
    abspath)
      s_abspath=1
      have_list=1
      ;;
    cstem)
      s_cstem=1
      have_list=1
      ;;
    cstem+)
      s_cstemx=1
      have_list=1
      ;;
    cfront)
      s_cfront=1
      have_list=1
      ;;
    install)
      s_install=1
      have_list=1
      ;;
    libro)
      s_libro=1
      have_list=1
      ;;
    listed)
      s_listed=1
      have_list=1
      ;;
    mkdep)
      s_mkdep=1
      have_list=1
      ;;
    mkrule)
      s_mkrule=1
      have_list=1
      ;;
    optool)
      s_optool=1
      have_list=1
      ;;
    syscap)
      s_syscap=1
      have_list=1
      ;;
    relpath)
      s_relpath=1
      have_list=1
      ;;
  esac
  shift
done

test -z "$have_list" && select_standard

if test -n "$s_mkrule"; then
  test -z "$s_cstem$s_cstemx" && s_cstem=1
  s_libro=1
  s_mkdep=1
fi
test -n "$s_libro$s_mkdep$s_cfront" && test -z "$s_cstem$s_cstemx" && s_cstem=1
if test -n "$s_cstem$s_ctemx"; then
  s_syscap=1
fi

for script in $formake_scripts; do
  case $script in
    cstem+)
      selected=$s_cstemx
      ;;
    *)
      eval selected=\$s_$script
      ;;
  esac
  if test x$selected = x1; then
    selected_scripts="$selected_scripts $script"
  fi
done

formake_dir=$share_dir
if test -z "$formake_dir"; then
  if test -z "$script_dir"; then
    for dir in $PATH; do
      if test -f "$dir/$script_name" && test -x "$dir/$script_name" ; then
        script_dir=$dir
        break
      fi
    done
  fi
  if test -n "$script_dir"; then
    cd $script_dir
    formake_dir=`pwd`
    cd $orig_dir
  fi
fi

if test -z "$formake_dir"; then
  if test -d /usr/share/formake; then
    formake_dir=/usr/share/formake
  elif test -d /usr/local/share/formake; then
    formake_dir=/usr/local/share/formake
  elif test -n "$script_dir" && test -d $script_dir/../share/formake; then
    formake_dir=$script_dir/../share/formake
  fi
fi

if test -n "$formake_dir"; then
  for script in $selected_scripts; do
    if test ! -f $formake_dir/$script; then
      echo "$script_name: script $script not found" >&2
      exit 1
    fi
  done
  if test -n "$op_package_dir" && test ! -d $op_package_dir; then
    mkdir -p $op_package_dir
    if test ! -d $op_package_dir; then
      echo "$script_name: could not create package directory $op_dir" >&2
      exit 1
    fi
    cd $op_package_dir
  fi
  test -d $op_dir || mkdir -p $op_dir
  if test ! -d $op_dir; then
    echo "$script_name: could not create script directory $op_dir" >&2
    exit 1
  fi
  for script in $selected_scripts; do
    cp $formake_dir/$script $op_dir
    chmod +x $op_dir/$script
  done
else
  echo "$script_name: script directory not found" >&2
fi

