#!/bin/sh
#
# Author: Oleksiy Chernyavskyy <ochern@rocketmail.com>
#

version_string="mkconfigure 1.0"

script_name=`basename "$0"`
script_options="$@"
tmp_help=/tmp/mkconf_help_$$.txt
rm -f $tmp_help
op_pkgname=softmodule
op_pkgver=
out_file=configure
out_file_dir=.
rm_out_file=0

print_help() {
  cat <<EOF
$script_name [options]
 -name NAME     package name (PACKAGE_NAME) [$op_pkgname]
 -ver VERSION   package version (PACKAGE_VERSION)
 -params=".."   list of parameters for parsing
 -cc            probe and configure C compiler
 -c++           probe and configure C++ compiler
 -lib           probe the tools required for building C/C++ libraries
 -iftool ".."   probe a system with iftool test tool
 -iflib ".."    probe a system with iflib test tool
 -sh CODE       insert shell string
 -build-h       generate BUILDROOT/build.h config header
 -mkpackage     create package
 -o FILE        output script file [$out_file]
 -v             print version
EOF
}

print_version() {
  echo "$version_string"
}

clean_exit() {
  ecode=$1
  if test $rm_out_file = 1; then
    rm -f $out_file
  fi
  exit $ecode
}

op_params=
current_opt=
iflib_index=0
iftool_index=0
while test $# -gt 0; do
  case $1 in
    -h|-help|--help)
      print_help
      clean_exit 0
      ;;
    -v)
      print_version
      clean_exit 0
      ;;
    -name)
      current_opt=name
      ;;
    -ver)
      current_opt=ver
      ;;
    -params=*)
      op_params=`echo -n "$1" | sed 's/^[^=]*=//'`
      rm -f $tmp_help
      for param in $op_params; do
        echo "  $param" >> $tmp_help
      done
      current_opt=
      ;;
    -cc)
      op_cc=1
      current_opt=
      ;;
    -c++)
      op_cxx=1
      current_opt=
      ;;
    -lib)
      op_lib=1
      current_opt=
      ;;
    -iflib)
      current_opt=iflib
      ;;
    -iftool)
      current_opt=iftool
      ;;
    -sh)
      current_opt=sh
      ;;
    -build-h)
      op_build_h=1
      current_opt=
      ;;
    -o)
      current_opt=o
      ;;
    -mkpackage)
      op_mkpackage=1
      current_opt=
      ;;
    *)
      case "$current_opt" in
        name)
          op_pkgname=$1
          current_opt=
          ;;
        ver)
          op_pkgver=$1
          current_opt=
          ;;
        iflib)
          op_iflib=1
          params=$1
          eval iflib${iflib_index}_params=\$params
          iflib_index=`expr $iflib_index + 1`
          current_opt=
          ;;
        iftool)
          op_iftool=1
          params=$1
          eval iftool${iftool_index}_params=\$params
          iftool_index=`expr $iftool_index + 1`
          current_opt=
          ;;
        sh)
          op_sh=$1
          current_opt=
          ;;
        o)
          out_file=$1
          if test -d "$out_file"; then
            out_file="$out_file/configure"
          fi
          out_file_dir=`dirname "$out_file"`
          if test ! -d "$out_file_dir"; then
            echo "$script_name: error. Directory not found: $out_file_dir" >&2
            clean_exit 1
          fi
          current_opt=
          ;;
        *)
          echo "$script_name: error. Invalid parameter: $1" >&2
          clean_exit 1
          ;;
      esac
      ;;
  esac
  shift
done

formake_scripts=pofig
system_tools=
system_tools="$system_tools install"
test -n "$op_iflib$op_lib" && test -z "$op_cc$op_cxx" && op_cc=1
if test x$op_lib = x1; then
  formake_scripts="$formake_scripts libro"
  system_tools="$system_tools ar"
fi
if test x$op_iflib = x1; then
  formake_scripts="$formake_scripts iflib"
fi
if test x$op_cc = x1; then
  formake_scripts="$formake_scripts cstem"
fi
if test x$op_cxx = x1; then
  formake_scripts="$formake_scripts cstem+"
fi
if test -n "$op_cc$op_cxx"; then
  formake_scripts="$formake_scripts mkdep"
fi
formake_scripts=`echo -n "$formake_scripts" | sed 's/^ *//'`
system_tools=`echo -n "$system_tools" | sed 's/^ *//'`

if test x$op_mkpackage = x1; then
  if mkpackage -h >/dev/null; then
    :
  else
    echo "$script_name: mkpackage script not found" >&2
    clean_exit 1
  fi
  test -d $out_file_dir/formake || mkdir -p $out_file_dir/formake
  if test ! -d $out_file_dir/formake; then
    echo "$script_name: could not create Formake directory $out_file_dir/formake" >&2
    clean_exit 1
  fi
  mkpackage -d $out_file_dir/formake -std $formake_scripts mkbuildroot abspath relpath listed mkrule || clean_exit 1
fi


cat <<TOP_EOF >$out_file
#!/bin/sh
################################################################################
# This script was generated with the following command:
#  $script_name $script_options
#
# Important variables to use:
#   PACKAGE_NAME     - name of package
#   PACKAGE_VERSION  - package version
#   CONF             - name of the build config file
#   CONF_H           - name of the build config header file
#   CUSTOM_OPTIONS   - custom configure options
#   TOOLS            - tools used in this package
#   SRCROOT          - package source root directory (package top dir)
#   BUILDROOT        - path to the build root directory (current dir)

################################################################################
# BASE CONFIGURATION
PACKAGE_NAME="$op_pkgname"
PACKAGE_VERSION="$op_pkgver"
CONF="build.conf"
CONF_H="build.h"
CUSTOM_OPTIONS="$op_params"
TOOLS="rcrq mkbuildroot relpath mkrule $formake_scripts $system_tools"

TOP_EOF

cat <<"TOP_EOF" >>$out_file
################################################################################
# INIT
SRCROOT=`dirname $0`
BUILDROOT=`pwd`
PATH=$FORMAKE:$BUILDROOT/formake:$SRCROOT/formake:$PATH

TOP_EOF

rm_out_file=1

validate_ops="-install-options"
config_help_ops="-install"
if test x$op_cc$op_cxx = x11; then
  validate_ops="$validate_ops -c-options -cxx-options"
  config_help_ops="$config_help_ops -cc -cxx"
elif test x$op_cc = x1; then
  validate_ops="$validate_ops -c-options"
  config_help_ops="$config_help_ops -cc"
elif test x$op_cxx = x1; then
  validate_ops="$validate_ops -cxx-options"
  config_help_ops="$config_help_ops -cxx"
fi

cat <<TOP_EOF >>$out_file
################################################################################
# OPTIONS
std_options=\`rcrq $validate_ops\` || exit 1
optool validate "\$@" - -h -help --help \$std_options \$CUSTOM_OPTIONS || exit 1
if optool ifor "\$@" - -h -help --help; then
  confighelp $config_help_ops || exit 1
TOP_EOF
if test -f $tmp_help; then
  echo "  cat <<EOF" >>$out_file
  cat $tmp_help >>$out_file
  echo "EOF" >>$out_file
  rm -f $tmp_help
fi
cat <<TOP_EOF >>$out_file
  exit 0
fi
optool dump "\$@" >\$CONF
. \$CONF

TOP_EOF

cat <<TOP_EOF >>$out_file
################################################################################
# DEPENDENCY TOOLS
iftool \$TOOLS || exit 1
TOP_EOF
if test x$op_iftool = x1; then
  idx=0
  while test $idx -lt $iftool_index; do
    eval iftool_params=\$iftool${idx}_params
    echo "iftool $iftool_params || exit 1" >>$out_file
    idx=`expr $idx + 1`
  done
fi

cat <<"TOP_EOF" >>$out_file

################################################################################
# INIT BUILDROOT
mkbuildroot $SRCROOT $BUILDROOT || exit 1
rm -f configure.log

################################################################################
# CONFIGURE FORMAKE
optool dump "$@ -package-name $PACKAGE_NAME -package-version $PACKAGE_VERSION" >formake/config.rc

TOP_EOF

if test -n "$op_cc$op_cxx"; then
  cat <<TOP_EOF >>$out_file
################################################################################
# PROBE AND CONFIGURE COMPILERS
TOP_EOF
  if test x$op_cc = x1; then
    echo "cstem config -cc \$CC -cflags=\"\$CFLAGS\"" >>$out_file
  fi
  if test x$op_cxx = x1; then
    echo "cstem+ config -cc \$CXX -cflags=\"\$CXXFLAGS\"" >>$out_file
  fi
  echo "" >>$out_file
fi

if test x$op_iflib = x1; then
  cat <<TOP_EOF >>$out_file
################################################################################
# DEPENDENCY LIBRARIES
TOP_EOF
  idx=0
  while test $idx -lt $iflib_index; do
    eval iflib_params=\$iflib${idx}_params
    if test x$op_cc$op_cxx = x11; then
      echo "iflib -cc $iflib_params -log configure.log || exit 1" >>$out_file
    elif test x$op_cxx = x1; then
      echo "iflib -cxx $iflib_params -log configure.log || exit 1" >>$out_file
    else
      echo "iflib -cc $iflib_params -log configure.log || exit 1" >>$out_file
    fi
    idx=`expr $idx + 1`
  done
  echo "" >>$out_file
fi

cat <<TOP_EOF >>$out_file
################################################################################
# CUSTOM CODE
# put your custom code here
TOP_EOF
if test -n "$op_sh"; then
  echo "$op_sh" >>$out_file
fi
echo "" >>$out_file

cat <<"TOP_EOF" >>$out_file
################################################################################
# CONFIG FILES
optool dump -package-name $PACKAGE_NAME -package-version $PACKAGE_VERSION >>$CONF
TOP_EOF
if test x"$op_build_h" = x1; then
  echo "optool hdump \"\$@\" -package-name \"\$PACKAGE_NAME\" -package-version \$PACKAGE_VERSION >\$CONF_H" >>$out_file
fi

cat <<"TOP_EOF" >>$out_file

################################################################################
# MKMF
cd $BUILDROOT
$SRCROOT/mkmf || exit 1

################################################################################
# FINISH
echo "configuring done."

TOP_EOF

chmod +x $out_file

cat <<TOP_EOF
created script "$out_file"
package name: $op_pkgname
package version: $op_pkgver
TOP_EOF

