
################################################################################
# TEST COMPILER

# checking compiler gcc ... 
****************************************
* int main(int argc, char *argv[]) {
*   return 0;
* }
****************************************
gcc   -c -o test.o test.c

################################################################################
# TEST LD

# checking linker gcc ... 
****************************************
* int main(int argc, char *argv[]) {
*   return 0;
* }
****************************************
gcc    -c -o test.o test.c
gcc   -o app test.o

################################################################################
# TEST COMPILER

# checking compiler g++ ... 
****************************************
* int main(int argc, char *argv[]) {
*   return 0;
* }
****************************************
g++   -c -o test.o test.C

################################################################################
# TEST LD

# checking linker g++ ... 
****************************************
* int main(int argc, char *argv[]) {
*   return 0;
* }
****************************************
g++    -c -o test.o test.C
g++   -o app test.o

################################################################################
# TEST HEADERS

# checking header X11/Xlib.h ... 
****************************************
* #include <X11/Xlib.h>
****************************************
gcc    -c -o test.o test_src.c

# checking header X11/X.h ... 
****************************************
* #include <X11/X.h>
****************************************
gcc    -c -o test.o test_src.c

# checking header X11/Intrinsic.h ... 
****************************************
* #include <X11/Intrinsic.h>
****************************************
gcc    -c -o test.o test_src.c

################################################################################
# TEST CPP DEFINES

# checking define __linux__ ... 
****************************************
* #include <X11/Xlib.h>
* #include <X11/X.h>
* #include <X11/Intrinsic.h>
* #ifndef __linux__
* #error syscap: __linux__ not defined
* #endif
* 
****************************************
gcc    -c -o test.o test_src.c

# checking define __unix__ ... 
****************************************
* #include <X11/Xlib.h>
* #include <X11/X.h>
* #include <X11/Intrinsic.h>
* #ifndef __unix__
* #error syscap: __unix__ not defined
* #endif
* 
****************************************
gcc    -c -o test.o test_src.c

# checking define __GNUC__=4 ... 
****************************************
* #include <X11/Xlib.h>
* #include <X11/X.h>
* #include <X11/Intrinsic.h>
* #if __GNUC__ == 4
* #else
* #error syscap: false expression: __GNUC__ == 4
* #endif
* 
****************************************
gcc    -c -o test.o test_src.c

# checking define #ifdef __linux__ && defined __unix__ ... 
****************************************
* #include <X11/Xlib.h>
* #include <X11/X.h>
* #include <X11/Intrinsic.h>
* #ifdef __linux__ && defined __unix__
* #else
* #error syscap: false directive: #ifdef __linux__ && defined __unix__
* #endif
* 
****************************************
gcc    -c -o test.o test_src.c
test_src.c:4:18: warning: extra tokens at end of #ifdef directive
 #ifdef __linux__ && defined __unix__
                  ^

# checking define #if (__GNUC__ == 4 && __GNUC_MINOR__ == 7) || __SIZEOF_LONG_LONG__ == 8 ... 
****************************************
* #include <X11/Xlib.h>
* #include <X11/X.h>
* #include <X11/Intrinsic.h>
* #if (__GNUC__ == 4 && __GNUC_MINOR__ == 7) || __SIZEOF_LONG_LONG__ == 8
* #else
* #error syscap: false directive: #if (__GNUC__ == 4 && __GNUC_MINOR__ == 7) || __SIZEOF_LONG_LONG__ == 8
* #endif
* 
****************************************
gcc    -c -o test.o test_src.c

################################################################################
# TEST TYPES

# checking type Widget ... 
****************************************
* #include <X11/Xlib.h>
* #include <X11/X.h>
* #include <X11/Intrinsic.h>
* Widget *syscap_Widget;
****************************************
gcc    -c -o test.o test_src.c

# checking type int32_t ... 
****************************************
* #include <X11/Xlib.h>
* #include <X11/X.h>
* #include <X11/Intrinsic.h>
* int32_t *syscap_int32_t;
****************************************
gcc    -c -o test.o test_src.c

################################################################################
# TEST LIBRARIES

# checking libraries  -lX11 -lXt ... 
****************************************
* int main(int argc, char *argv[]) {
*   return 0;
* }
****************************************
gcc    -c -o test.o test.c
gcc     -lX11 -lXt -o app test.o

################################################################################
# TEST CSTR

# checking source string Widget *w = NULL; ... 
****************************************
* #include <X11/Xlib.h>
* #include <X11/X.h>
* #include <X11/Intrinsic.h>
* Widget *w = NULL;
****************************************
gcc    -c -o test.o test_src.c
gcc     -lX11 -lXt -o app test.o
/usr/lib/gcc/x86_64-linux-gnu/4.9/../../../x86_64-linux-gnu/crt1.o: In function `_start':
/build/glibc-daoqzt/glibc-2.19/csu/../sysdeps/x86_64/start.S:118: undefined reference to `main'
collect2: error: ld returned 1 exit status
test again ...
****************************************
* #include <X11/Xlib.h>
* #include <X11/X.h>
* #include <X11/Intrinsic.h>
* Widget *w = NULL;
* int main(int argc, char *argv[]) { return 0;}
****************************************
gcc    -c -o test.o test_src.c
gcc     -lX11 -lXt -o app test.o

################################################################################
# TEST RVALS

# checking rval __GNUC__ ... 
****************************************
* #include <X11/Xlib.h>
* #include <X11/X.h>
* #include <X11/Intrinsic.h>
* int main(int argc, char *argv[]) {int syscap___GNUC__ = (int) __GNUC__; return 0;}
****************************************
gcc    -c -o test.o test_src.c
gcc     -lX11 -lXt -o app test.o

# checking rval __linux__ ... 
****************************************
* #include <X11/Xlib.h>
* #include <X11/X.h>
* #include <X11/Intrinsic.h>
* int main(int argc, char *argv[]) {int syscap___linux__ = (int) __linux__; return 0;}
****************************************
gcc    -c -o test.o test_src.c
gcc     -lX11 -lXt -o app test.o

################################################################################
# TEST FUNCTIONS

# checking function XtCreateWidget ... 
****************************************
* int XtCreateWidget(int);
* int main(int argc, char *argv[]) { int syscap_XtCreateWidget = XtCreateWidget(1); return syscap_XtCreateWidget; }
****************************************
gcc    -c -o test.o test_src.c
gcc     -lX11 -lXt -o app test.o

# checking function fprintf ... 
****************************************
* int fprintf(int);
* int main(int argc, char *argv[]) { int syscap_fprintf = fprintf(1); return syscap_fprintf; }
****************************************
gcc    -c -o test.o test_src.c
test_src.c:1:5: warning: conflicting types for built-in function ‘fprintf’
 int fprintf(int);
     ^
gcc     -lX11 -lXt -o app test.o

# checking function atoi ... 
****************************************
* int atoi(int);
* int main(int argc, char *argv[]) { int syscap_atoi = atoi(1); return syscap_atoi; }
****************************************
gcc    -c -o test.o test_src.c
gcc     -lX11 -lXt -o app test.o

################################################################################
# TEST SOURCE FILES

# checking source file ./test.c ... 
****************************************
* 
* enum mon_type {
*   JAN=1,
*   FEB,
*   MAR
* };
* 
* 
* extern void *XCreateWindow;
* 
* int month = FEB;
* 
* int main(int argc, char *argv[]) {
*   void *a;
* 
*   a= XCreateWindow;
* }
* 
****************************************
gcc    -c -o test.o test.c
gcc     -lX11 -lXt -o app test.o

# checking grep ... 

# checking tclsh ... 

################################################################################
# TEST HEADERS

# checking header Xm/Xm.h ... 
****************************************
* #include <Xm/Xm.h>
****************************************
gcc    -c -o test.o test_src.c

# checking header Xm/PushB.h ... 
****************************************
* #include <Xm/PushB.h>
****************************************
gcc    -c -o test.o test_src.c

################################################################################
# TEST ENUMS

# checking enum XmSET ... 
****************************************
* #include <Xm/Xm.h>
* #include <Xm/PushB.h>
* int syscap_XmSET = XmSET;
****************************************
gcc    -c -o test.o test_src.c

# checking enum XmTOGGLEBUTTON ... 
****************************************
* #include <Xm/Xm.h>
* #include <Xm/PushB.h>
* int syscap_XmTOGGLEBUTTON = XmTOGGLEBUTTON;
****************************************
gcc    -c -o test.o test_src.c

################################################################################
# TEST LIBRARIES

# checking libraries  -lXm ... 
****************************************
* int main(int argc, char *argv[]) {
*   return 0;
* }
****************************************
gcc    -c -o test.o test.c
gcc     -lXm -o app test.o

################################################################################
# TEST VARIABLES

# checking variable xmPushButtonWidgetClass ... 
****************************************
* #include <Xm/Xm.h>
* #include <Xm/PushB.h>
* int main(int argc, char *argv[]) {int syscap_xmPushButtonWidgetClass = (int) xmPushButtonWidgetClass; return 0;}
****************************************
gcc    -c -o test.o test_src.c
test_src.c: In function ‘main’:
test_src.c:3:72: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
 int main(int argc, char *argv[]) {int syscap_xmPushButtonWidgetClass = (int) xmPushButtonWidgetClass; return 0;}
                                                                        ^
gcc     -lXm -o app test.o

################################################################################
# TEST SYMBOLS

# checking symbol xmTextFieldWidgetClass ... 
****************************************
* extern void *xmTextFieldWidgetClass;
* int main(int argc, char *argv[]) {void *syscap_xmTextFieldWidgetClass = xmTextFieldWidgetClass; return 0;}
****************************************
gcc    -c -o test.o test_src.c
gcc     -lXm -o app test.o

################################################################################
# TEST RVALS

# checking rval XmSET ... 
****************************************
* #include <Xm/Xm.h>
* #include <Xm/PushB.h>
* int main(int argc, char *argv[]) {int syscap_XmSET = (int) XmSET; return 0;}
****************************************
gcc    -c -o test.o test_src.c
gcc     -lXm -o app test.o

################################################################################
# TEST FUNCTIONS

# checking function XmCreatePushButton ... 
****************************************
* int XmCreatePushButton(int);
* int main(int argc, char *argv[]) { int syscap_XmCreatePushButton = XmCreatePushButton(1); return syscap_XmCreatePushButton; }
****************************************
gcc    -c -o test.o test_src.c
gcc     -lXm -o app test.o

################################################################################
# TEST HEADERS

# checking header gif_lib.h ... 
****************************************
* #include <gif_lib.h>
****************************************
gcc    -c -o test.o test_src.c

################################################################################
# TEST LIBRARIES

# checking libraries  -lgif ... 
****************************************
* int main(int argc, char *argv[]) {
*   return 0;
* }
****************************************
gcc    -c -o test.o test.c
gcc     -lgif -o app test.o

################################################################################
# TEST HEADERS

# checking header QtGui/QtGui ... 
****************************************
* #include <QtGui/QtGui>
****************************************
g++    -c -o test.o test_src.C
test_src.C:1:23: fatal error: QtGui/QtGui: No such file or directory
 #include <QtGui/QtGui>
                       ^
compilation terminated.
