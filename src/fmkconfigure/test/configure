#!/bin/sh
################################################################################
# Generated by Formake fmkconfigure
# Mon Feb 20 09:34:58 EET 2017
#
# fmkconfigure 
#
# Important variables to use:
#   PACKAGE_NAME     - package (project) name
#   PACKAGE_VERSION  - package version
#   CONF             - name of the build config file
#   CONF_H           - name of the build config header file
#   SRCROOT          - package source root directory (package top dir)
#   STD_OPTIONS      - standard configure options
#   OPTIONS          - custom configure options
#   VPATH_ON         - set to 1 if configure is run outside of the source root dir

################################################################################
# BASE CONFIGURATION
PACKAGE_NAME="package"
PACKAGE_VERSION=""
CONF="build.conf"
CONF_H="build.h"

################################################################################
# PACKAGE PATHES
SRCROOT=`dirname $0`
PATH=$FORMAKE:`pwd`/formake:$SRCROOT/formake:$PATH

################################################################################
# OPTIONS
#
# Additional C standard options: -cc -cflags -ldflags
# Additional C standard options help:
#   --cc=CMD                C compiler command
#   --cflags=FLAGS          C compiler flags
#   --ldflags=FLAGS         LD flags
#
# Additional C++ standard options: -cxx -cxxflags -ldflags
# Additional C++ standard options help:
#   --cxx=CMD               C++ compiler command
#   --cxxflags=FLAGS        C++ compiler flags
#   --ldflags=FLAGS         LD flags
#
# Variables:
#   STD_OPTIONS   - specify standard options
#   OPTIONS       - specify package specific options
#
# Note: optool script is part of Formake package. It must be installed into PACKAGE/formake
#       directory before running this script

STD_OPTIONS="-h -help --help -prefix -exec-prefix -bindir -sbindir -libexecdir -libdir -incdir \
             -etcdir -vardir -sharedir -mandir -docdir"
OPTIONS=""

optool validate xh $STD_OPTIONS $OPTIONS - "$@" || exit 1
if optool test any -h -help --help - "$@"; then
  cat <<EOF
Usage: configure [options]
  --prefix=PREFIX         path to install architecture-independent files [/usr/local]
  --exec-prefix=EPREFIX   path to install architecture-dependent files [PREFIX]
  --bindir=DIR            bin path [EPREFIX/bin]
  --sbindir=DIR           sbin path [EPREFIX/sbin]
  --libexecdir=DIR        libexec path [EPREFIX/libexec]
  --libdir=DIR            lib path [EPREFIX/lib]
  --incdir=DIR            include path [PREFIX/include]
  --etcdir=DIR            etc path [PREFIX/etc]
  --vardir=DIR            var path [PREFIX/var]
  --sharedir=DIR          share path [PREFIX/share]
  --mandir=DIR            man path [SHAREDIR/man]
  --docdir=DIR            doc path [SHAREDIR/doc]
EOF
  exit 0
fi
. `optool source "$@"`

################################################################################
# VPATH
VPATH_ON=
test ! -f `basename $0` && VPATH_ON=1

################################################################################
# INIT BUILD ROOT
if test x$VPATH_ON = x1; then
  if test -f $SRCROOT/formake; then
    rm -Rf formake
    cp -Rf $SRCROOT/formake ./
    rm -f formake/*.conf
  fi
fi
rm -f configure.log

################################################################################
# PACKAGE CONSISTENCY
#
# Here we check scripts that are used by package build automation scripts

syscap test relpath mkrule || exit 1

################################################################################
# STANDARD DIRECTORIES
#
# Set up standard installation directories. You should initialize PACKAGE_NAME and
# PACKAGE_VERSION variables above with valid values

test -n "$PREFIX"      || PREFIX=/usr/local
test -n "$EXEC_PREFIX" || EXEC_PREFIX=$PREFIX
test -n "$BINDIR"      || BINDIR=$EXEC_PREFIX/bin
test -n "$SBINDIR"     || SBINDIR=$EXEC_PREFIX/sbin
test -n "$LIBEXECDIR"  || LIBEXECDIR=$EXEC_PREFIX/libexec
test -n "$ETCDIR"      || ETCDIR=$PREFIX/etc
test -n "$VARDIR"      || VARDIR=$PREFIX/etc
test -n "$LIBDIR"      || LIBDIR=$EXEC_PREFIX/lib
test -n "$INCDIR"      || INCDIR=$PREFIX/include
test -n "$SHAREDIR"    || SHAREDIR=$PREFIX/share
test -n "$MANDIR"      || MANDIR=$SHAREDIR/man
test -n "$DOCDIR"      || DOCDIR=$SHAREDIR/doc

DOCDIR=$DOCDIR/$PACKAGE_NAME
DATADIR=$SHAREDIR/$PACKAGE_NAME

################################################################################
# BUILD CONFIGS
#
# Create package configuration files. Normally you should create TOP/build.conf
# configuration file that will be read by mkmf scripts.
# Additionally you can generate CPP header config:
#   optool hdump "$@" -package-name "$PACKAGE_NAME" -package-version "$PACKAGE_VERSION" >$CONF_H

optool dump "$@" -package-name "$PACKAGE_NAME" -package-version "$PACKAGE_VERSION" \
            -prefix $PREFIX -exec-prefix $EXEC_PREFIX -bindir $BINDIR -sbindir $SBINDIR \
            -libexecdir $LIBEXECDIR -libdir $LIBDIR -incdir $INCDIR -etcdir $ETCDIR \
            -vardir $VARDIR -sharedir $SHAREDIR -mandir $MANDIR -docdir $DOCDIR \
            -datadir $DATADIR >$CONF

################################################################################
# FORMAKE CONFIG
optool dump -prefix $PREFIX -exec-prefix $EXEC_PREFIX -bindir $BINDIR -sbindir $SBINDIR \
            -libexecdir $LIBEXECDIR -libdir $LIBDIR -incdir $INCDIR -etcdir $ETCDIR \
            -vardir $VARDIR -sharedir $SHAREDIR -mandir $MANDIR -docdir $DOCDIR \
            -datadir $DATADIR \
            -package-name $PACKAGE_NAME -package-version $PACKAGE_VERSION >formake/formake.conf

################################################################################
# SYSTEM DEPENDENCIES
syscap test install || exit 1

################################################################################
# CUSTOM CODE

################################################################################
# MKMF
$SRCROOT/mkmf || exit 1

################################################################################
# FINISH
echo "configuring done."

