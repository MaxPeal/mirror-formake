#!/bin/sh
#
# Author: Oleksiy Chernyavskyy <ochern@rocketmail.com>
#

abs_path() {
  _sub_orig_dir=`pwd`
  if test $# = 0; then
    abs_path_ret=
    return
  fi
  if test $# = 2; then
    _arg_orig_dir=$1
    _arg=$2
    if echo -n "$_arg" | grep "^/" > /dev/null; then
      :
    else
      _arg=`echo -n "$_arg_orig_dir/$_arg" | sed 's!//*!/!g'`
    fi
  else
    _arg=$1
  fi
  if test -e "$_arg"; then
    if test -d $_arg; then
      _file=
    else
      _file=`basename -- $_arg`
      _arg=`dirname -- $_arg`
    fi

    cd $_cd_param $_arg
    abs_path_ret=`pwd`
    if test x"$_file" != "x"; then
      abs_path_ret="$abs_path_ret/$_file"
    fi

    cd $_cd_param $_sub_orig_dir
  else
    if echo -n "$_arg" | grep "^/" > /dev/null; then
      abs_path_ret="$_arg"
    else
      abs_path_ret="$_sub_orig_dir/$_arg"
    fi
    abs_path_ret=`echo -n "$abs_path_ret" | sed 's#//*#/#g'`
    abs_path_ret=`echo -n "$abs_path_ret" | sed 's#/*$#/#'`
    string_prev=
    while test "x$abs_path_ret" != "x$string_prev" ; do
      string_prev=$abs_path_ret
      abs_path_ret=`echo -n "$abs_path_ret" | sed 's#/[^/][^/][^/][^/]*/\.\./#/#g' | sed 's#/[^/][^/.]/\.\./#/#g' | sed 's#/[^/.][^/]/\.\./#/#g' | sed 's#/[^/.]/\.\./#/#g'`
      abs_path_ret=`echo -n "$abs_path_ret" | sed 's#^/\.\./#/#' | sed 's#^/\.\.$#/#'`
      abs_path_ret=`echo -n "$abs_path_ret" | sed 's#/\./#/#g' | sed 's#/\.$#/#'`
    done
    abs_path_ret=`echo -n "$abs_path_ret" | sed 's#/$##' | sed 's#^$#/#'`
  fi
}


orig_dir=`pwd`
script_name=`basename $0`
abs_path `dirname $0`
script_dir=$abs_path_ret
tmp_dir=/tmp/iflib_$$
PATH="$script_dir:$PATH"

cstem -h >/dev/null 2>&1
if test $? -ne 127; then
  have_cstem=1
fi

cstem+ -h >/dev/null 2>&1
if test $? -ne 127; then
  have_cstemx=1
fi


print_help() {
cat <<EOF
library test tool
$script_name options
 -inc ..         library include headers
 -def ..         library defines
 -type ..        library types
 -enum ..        library enum constants
 -var ..         library extern variables
 -func ..        library functions
 -sym ..         library symbols
 -rval ..        library rvalues (define, enum, variable)
 -cstr TEXT      one line source string
 -cflags=FLAGS   compiler flags
 -ldflags=FLAGS  linker flags
 -cc[=cmd]       use C compiler. Optional compiler command can be passed
 -cxx[=cmd]      use C++ compiler. Optional compiler command can be passed
 "#if* ..."      test preprocessor condition directives
 *.h|*.hh        lib include headers. Different file extensions are recognized
 *.c|*.cc        test source files. Different file extensions are recognized
 -log[=FILE]     print log to stdout or specified file
 -short          run short test - do not check compiler, linker, cflags,
                 ldflags, includes and libraries
 -no-ld          disable any ld tests
 -rdef ..        read library defines
 -n              no echo
 standard compiler and linker flags are accepted: -I -D -l -L
EOF
}

echo_status() {
  if test x$op_no_echo = x; then
    printf "$1" "$2"
  fi
}

script_exit() {
  ecode=$1
  if test -f $tmp_dir/iflib.log; then
    if test x$op_echo_log = x1; then
      printf "\n%s\n%s\n" "LOG" "----------------------------------------" >&2
      cat $tmp_dir/iflib.log >&2
    fi
    if test -n "$op_log_file"; then
      cat $tmp_dir/iflib.log >> $op_log_file
    fi
  fi
  cd $orig_dir
  rm -Rf $tmp_dir
  exit $ecode
}

current_opt=
def_num=0
while test $# -gt 0; do
  param=`echo -n "$1" | sed 's/^ *//' | sed 's/^# */#/'`
  case "$param" in
    -h|-help|--help)
      print_help
      exit 0
      ;;
    -inc)
      current_opt=inc
      ;;
    -def)
      current_opt=def
      ;;
    -rdef)
      op_short=1
      current_opt=rdef
      ;;
    -type)
      current_opt='type'
      ;;
    -enum)
      current_opt=enum
      ;;
    -var)
      current_opt=var
      ;;
    -func)
      current_opt=func
      ;;
    -sym)
      current_opt=sym
      ;;
    -rval)
      current_opt=rval
      ;;
    -cstr)
      shift
      op_cstr=$1
      current_opt=
      ;;
    -cflags=*)
      arg=`echo -n "$param" | sed 's/^[^=]*=//'`
      op_cflags="$op_cflags $arg"
      current_opt=
      ;;
    -ldflags=*)
      arg=`echo -n "$param" | sed 's/^[^=]*=//'`
      op_ldflags="$op_ldflags $arg"
      current_opt=
      ;;
    -cc)
      cc_type=cc
      current_opt=
      ;;
    -cc=*)
      cc_type=cc
      arg=`echo -n "$param" | sed 's/^[^=]*=//'`
      op_cmd=$arg
      current_opt=
      ;;
    -cxx)
      cc_type=cxx
      current_opt=
      ;;
    -cxx=*)
      cc_type=cxx
      arg=`echo -n "$param" | sed 's/^[^=]*=//'`
      op_cmd=$arg
      current_opt=
      ;;
    -log)
      op_echo_log=1
      current_opt=
      ;;
    -log=*)
      arg=`echo -n "$param" | sed 's/^[^=]*=//'`
      op_log_file=$arg
      current_opt=
      ;;
    -[ID]*)
      op_cflags="$op_cflags $param"
      current_opt=
      ;;
    -[lL]*)
      op_ldflags="$op_ldflags $param"
      current_opt=
      ;;
    -n)
      op_no_echo=1
      current_opt=
      ;;
    -short)
      op_short=1
      current_opt=
      ;;
    -no-ld)
      op_no_ld=1
      current_opt=
      ;;
    *.h)
      op_inc="$op_inc $param"
      current_opt=
      ;;
    *.H|*.[Hh]++|*.[Hh][Hh]|*.[Hh][Xx][Xx]|*.[Hh][Pp][Pp])
      op_inc="$op_inc $param"
      if test -z "$cc_type"; then
        cc_type=cxx
      fi
      current_opt=
      ;;
    *.c)
      op_src="$op_src $param"
      current_opt=
      ;;
    *.C|*.[Cc][Cc]|*.[Cc][Pp][Pp]|*.[Cc][Xx][Xx]|*.[Cc]++)
      op_src="$op_src $param"
      if test -z "$cc_type"; then
        cc_type=cxx
      fi
      current_opt=
      ;;
    \#if*)
      eval def$def_num=\$param
      def_num=`expr $def_num + 1`
      if test x$current_opt != xdef; then
        current_opt=
      fi
      ;;
    *)
      if test x$current_opt = x; then
        echo "$script_name: error: bad option $param" >&2
        exit 1
      fi
      case $current_opt in
        inc)
          op_inc="$op_inc $param"
          ;;
        def)
          eval def$def_num=\$param
          def_num=`expr $def_num + 1`
          ;;
        rdef)
          op_rdef="$op_rdef#c0d04567-cf3d-4a16-844e-3d7e0476b9b8#$param"
          ;;
        type)
          op_type="$op_type $param"
          ;;
        enum)
          op_enum="$op_enum $param"
          ;;
        var)
          op_var="$op_var $param"
          ;;
        func)
          op_func="$op_func $param"
          ;;
        sym)
          op_sym="$op_sym $param"
          ;;
        rval)
          op_rval="$op_rval $param"
          ;;
      esac
      ;;
  esac
  shift
done

if test -n "$op_log_file"; then
  if echo -n "$op_log_file" | grep "^/" > /dev/null; then : ; else
    op_log_file="$orig_dir/$op_log_file"
  fi
fi

op_cflags=`echo "$op_cflags" | sed 's/^ *//' | sed 's/ *$//'`
op_ldflags=`echo "$op_ldflags" | sed 's/^ *//' | sed 's/ *$//'`

if test x$cc_type = xcxx; then
  if test -n "$op_cmd"; then
    CC_CMD=$op_cmd
  elif test x$have_cstemx = x1; then
    CC_CMD=`cstem+ -cmd -cflags`
    CC_ID=`cstem+ -id`
  else
    for cmd in CC xlc++ xlC c++ g++; do
      $cmd >/dev/null 2>&1 
      if test $? -ne 127; then
        CC_CMD=$cmd
        break
      fi
    done
  fi
  ext="C"
else
  if test -n "$op_cmd"; then
    CC_CMD=$op_cmd
  elif test x$have_cstem = x1; then
    CC_CMD=`cstem -cmd -cflags`
    CC_ID=`cstem -id`
  else
    for cmd in cc xlc c99 c89 gcc; do
      $cmd >/dev/null 2>&1 
      if test $? -ne 127; then
        CC_CMD=$cmd
        break
      fi
    done
  fi
  ext="c"
fi
LD_CMD=$CC_CMD

case $CC_ID in
  gcc)
    CPP_FLAG=-E
    ;;
  *)
    CPP_FLAG=-E
    ;;
esac

if test -z "$CC_CMD"; then
  echo_status "%s" "compiler not found"
  exit 1
fi

_CC_CMD=$CC_CMD
CC_CMD="$CC_CMD $op_cflags"
_LD_CMD=$LD_CMD
LD_CMD="$LD_CMD $op_ldflags"

rm -f $tmp_dir
mkdir $tmp_dir
cd $tmp_dir

test_cc=test_cc.$ext
test_cc2=test_cc2.$ext

echo "" > $test_cc

if test x$op_short = x; then
# CHECKING COMPILER
  echo_status "%s" "checking compiler $_CC_CMD ... "
  cat <<EOF >test.$ext
int main(int argc, char *argv[]) {
  return 0;
}
EOF
  echo "\$ $_CC_CMD -c -o test.o test.$ext" >> iflib.log
  $_CC_CMD -c -o test.o test.$ext>> iflib.log 2>&1
  ret=$?
  if test $ret -ne 0; then
    echo_status "%s\n" "Failed"
    script_exit $ret
  else
    echo_status "%s\n" "OK"
  fi
  rm -f test.$ext
  rm -f test.o


# CHECKING COMPILER FLAGS
  if test -n "$op_cflags"; then
    echo_status "%s" "checking compiler flags $op_cflags ... "
    cat <<EOF >test.$ext
int main(int argc, char *argv[]) {
  return 0;
}
EOF
    echo "\$ $CC_CMD -c -o test.o test.$ext" >> iflib.log
    $CC_CMD -c -o test.o test.$ext>> iflib.log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      flags=
      for flag in $op_cflags; do
       echo_status "%s" "  $flag ... "
       flags="$flags $flag"
       echo "\$ $_CC_CMD $flags -c -o test.o test.$ext" >> iflib.log
       $_CC_CMD $flags -c -o test.o test.$ext>> iflib.log 2>&1
       _ret=$?
       if test $_ret -ne 0; then
         echo_status "%s\n" "Failed"
         script_exit $_ret
       else
         echo_status "%s\n" "OK"
       fi
      done
      script_exit $ret
    else
      echo_status "%s\n" "OK"
    fi
    rm -f test.$ext
    rm -f test.o
  fi


# CHECKING LD
  if test x$op_no_ld = x; then
    cat <<EOF >test.$ext
int main(int argc, char *argv[]) {
  return 0;
}
EOF
    echo "\$ $CC_CMD -c -o test.o test.$ext" >> iflib.log
    $CC_CMD -c -o test.o test.$ext>> iflib.log 2>&1
    
    echo_status "%s" "checking linker $_LD_CMD ... "
    echo "\$ $_LD_CMD -o app test.o" >> iflib.log
    $_LD_CMD -o app test.o>> iflib.log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      script_exit $ret
    else
      echo_status "%s\n" "OK"
    fi
    rm -f app


# CHECKING LD FLAGS
    for flag in $op_ldflags; do
      case $flag in
        -l*|*.so|*.so.*|*.a)
          l_flags="$l_flags $flag"
          ;;
        *)
          misc_flags="$misc_flags $flag"
          ;;
      esac
    done
    if test -n "$misc_flags"; then
      echo_status "%s" "checking linker flags $misc_flags ... "
      echo "\$ $_LD_CMD $misc_flags -o app test.o" >> iflib.log
      $_LD_CMD $misc_flags -o app test.o>> iflib.log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        flags=
        for flag in $misc_flags; do
         echo_status "%s" "  $flag ... "
         flags="$flags $flag"
         echo "\$ $_LD_CMD $flags -o app test.o" >> iflib.log
         $_LD_CMD $flags -o app test.o>> iflib.log 2>&1
         _ret=$?
         if test $_ret -ne 0; then
           echo_status "%s\n" "Failed"
           script_exit $_ret
         else
           echo_status "%s\n" "OK"
         fi
        done
        script_exit $ret
      else
        echo_status "%s\n" "OK"
      fi
      rm -f app
    fi

# CHECKING LIBRARIES
    if test -n "$l_flags"; then
      echo_status "%s" "checking libraries $l_flags ... "
      echo "\$ $LD_CMD -o app test.o" >> iflib.log
      $LD_CMD -o app test.o>> iflib.log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        libs=
        for lib in $l_flags; do
         echo_status "%s" "  $lib ... "
         libs="$libs $lib"
         echo "\$ $_LD_CMD $misc_flags $libs -o app test.o" >> iflib.log
         $_LD_CMD $misc_flags $libs -o app test.o>> iflib.log 2>&1
         _ret=$?
         if test $_ret -ne 0; then
           echo_status "%s\n" "Failed"
           script_exit $_ret
         else
           echo_status "%s\n" "OK"
         fi
        done
        script_exit $ret
      else
        echo_status "%s\n" "OK"
      fi
      rm -f app
    fi
    rm -f test.o
  fi
fi # if op_short

# CHECKING HEADERS
if test -n "$op_inc"; then
  for inc in $op_inc; do
    inc=`echo "$inc" | sed 's/[<]//' | sed 's/[>]//'`
    echo "#include <$inc>" >> $test_cc
    if test x$op_short = x; then
      echo_status "%s" "checking header $inc ... "
      echo "\$ $CC_CMD -c -o test.o $test_cc" >> iflib.log
      $CC_CMD -c -o test.o $test_cc >> iflib.log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        script_exit $ret
      else
        echo_status "%s\n" "OK"
      fi
      rm -f test.o
    fi
  done
fi

# CHECKING CSTR
if test -n "$op_cstr"; then
  if test -f $test_cc; then
    cp $test_cc $test_cc2
  fi
  echo "$op_cstr" >> $test_cc2

  echo_status "%s" "checking source string $op_cstr ... "
  echo "\$ $CC_CMD -c -o test.o $test_cc2" >> iflib.log
  $CC_CMD -c -o test.o $test_cc2 >> iflib.log 2>&1
  ret=$?
  if test $ret -ne 0; then
    echo_status "%s\n" "Failed"
    script_exit $ret
  else
    if test x$op_no_ld = x; then
      echo "\$ $LD_CMD -o app test.o" >> iflib.log
      $LD_CMD -o app test.o >> iflib.log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo "test again ..." >> iflib.log
        echo "int main(int argc, char *argv[]) { return 0;}" >>$test_cc2
        echo "\$ $CC_CMD -c -o test.o $test_cc2" >> iflib.log
        $CC_CMD -c -o test.o $test_cc2 >> iflib.log 2>&1
        ret=$?
        if test $ret -ne 0; then
          echo_status "%s\n" "Failed"
          script_exit $ret
        fi
      fi
    fi
  fi
  echo_status "%s\n" "OK"
fi

# CHECKING DEFINES
if test $def_num -gt 0; then
  def_idx=0
  while test $def_idx -lt $def_num; do
    if_directive=0
    eval def_string=\$def$def_idx
    def_string=`echo -n "$def_string" | sed 's/^ *//'`
    echo_status "%s" "checking define $def_string ... "
    case "$def_string" in
      '#if'*)
        if_directive=1
        ;;
    esac

    if test $if_directive = 1; then
      cat >>$test_cc <<EOF
$def_string
#else
#error iflib: false directive: $def_string
#endif

EOF
    else
      def_name=`echo -n "$def_string" | sed 's/[^a-zA-Z0-9_].*//'`
      inv_chars=`echo -n "$def_name" | sed 's/[_a-zA-Z0-9]//g'`
      if test -n "$inv_chars" || echo -n "$def_name" | grep "^[0-9]" > /dev/null; then
        echo "$script_name: error invalid macro $def_name"
        exit 1
      fi
      rpart=`echo -n "$def_string" | sed 's/[a-zA-Z0-9_]*//'`
      if test "x$rpart" = x; then
        cat >>$test_cc <<EOF
#ifndef $def_name
#error iflib: $def_name not defined
#endif

EOF
      else
        opstr=`echo -n "$rpart" | sed 's/^\([=><!]*\).*/\1/'`
        rval=`echo -n "$rpart" | sed 's/^[=><!]*//'`
        case x$opstr in
          'x=='|'x!='|'x>'|'x<'|'x>='|'x<=')
            :
            ;;
          'x=')
            opstr="=="
            ;;
          *)
            echo "$script_name: error invalid argument $def_string"
            exit 1
            ;;
        esac
        cat >>$test_cc <<EOF
#if $def_name $opstr $rval
#else
#error iflib: false expression: $def_name $opstr $rval
#endif

EOF
      fi
    fi
    echo "\$ $CC_CMD -c -o test.o $test_cc" >> iflib.log
    $CC_CMD -c -o test.o $test_cc >> iflib.log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      script_exit $ret
    else
      echo_status "%s\n" "OK"
    fi
    rm -f test.o
    def_idx=`expr $def_idx + 1`
  done
fi

# CHECKING TYPES
if test -n "$op_type"; then
  for type in $op_type; do
    type_base=`echo "$type" | sed 's/ *\**$//'`
    echo "$type_base *iflib_$type_base;" >> $test_cc

    echo_status "%s" "checking type $type_base ... "
    echo "\$ $CC_CMD -c -o test.o $test_cc" >> iflib.log
    $CC_CMD -c -o test.o $test_cc >> iflib.log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      script_exit $ret
    else
      echo_status "%s\n" "OK"
    fi
    rm -f test.o
  done
fi

# CHECKING ENUMS
if test -n "$op_enum"; then
  for enum in $op_enum; do
    echo "int iflib_$enum = $enum;" >> $test_cc

    echo_status "%s" "checking enum $enum ... "
    echo "\$ $CC_CMD -c -o test.o $test_cc" >> iflib.log
    $CC_CMD -c -o test.o $test_cc >> iflib.log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      script_exit $ret
    else
      echo_status "%s\n" "OK"
    fi
    rm -f test.o
  done
fi

# CHECKING VARIABLES
if test -n "$op_var"; then
  for var in $op_var; do
    echo_status "%s" "checking variable $var ... "

    cat $test_cc > $test_cc2
    echo "int main(int argc, char *argv[]) {int iflib_$var = (int) $var; return 0;}" >> $test_cc2

    echo "\$ $CC_CMD -c -o test.o $test_cc2" >> iflib.log
    $CC_CMD -c -o test.o $test_cc2 >> iflib.log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      script_exit $ret
    fi

    if test x$op_no_ld = x; then
      echo "\$ $LD_CMD -o app test.o" >> iflib.log
      $LD_CMD -o app test.o >> iflib.log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        script_exit $ret
      fi
    fi
    echo_status "%s\n" "OK"
    rm -f test.o
  done
  rm -f $test_cc2
fi


# CHECKING SYMBOLS
if test -n "$op_sym"; then
  for sym in $op_sym; do
    echo_status "%s" "checking symbol $sym ... "

    echo "extern void *$sym;" > $test_cc2
    echo "int main(int argc, char *argv[]) {void *iflib_$sym = $sym; return 0;}" >> $test_cc2

    echo "\$ $CC_CMD -c -o test.o $test_cc2" >> iflib.log
    $CC_CMD -c -o test.o $test_cc2 >> iflib.log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      script_exit $ret
    fi

    if test x$op_no_ld = x; then
      echo "\$ $LD_CMD -o app test.o" >> iflib.log
      $LD_CMD -o app test.o >> iflib.log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        script_exit $ret
      fi
    fi
    echo_status "%s\n" "OK"
    rm -f test.o
  done
  rm -f $test_cc2
fi

# CHECKING RVALS
if test -n "$op_rval"; then
  for var in $op_rval; do
    echo_status "%s" "checking rval $var ... "

    cat $test_cc > $test_cc2
    echo "int main(int argc, char *argv[]) {int iflib_$var = (int) $var; return 0;}" >> $test_cc2

    echo "\$ $CC_CMD -c -o test.o $test_cc2" >> iflib.log
    $CC_CMD -c -o test.o $test_cc2 >> iflib.log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      script_exit $ret
    fi

    if test x$op_no_ld = x; then
      echo "\$ $LD_CMD -o app test.o" >> iflib.log
      $LD_CMD -o app test.o >> iflib.log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        script_exit $ret
      fi
    fi
    echo_status "%s\n" "OK"
    rm -f test.o
  done
  rm -f $test_cc2
fi

# CHECKING FUNCTIONS
if test -n "$op_func"; then
  for func in $op_func; do
    func=`echo "$func" | sed 's/[(]//' | sed 's/[)]//'`

    echo_status "%s" "checking function $func ... "

    echo "int $func(int);" > $test_cc2
    echo "int main(int argc, char *argv[]) { int iflib_$func = $func(1); return iflib_$func; }" >> $test_cc2

    echo "\$ $CC_CMD -c -o test.o $test_cc2" >> iflib.log
    $CC_CMD -c -o test.o $test_cc2 >> iflib.log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      script_exit $ret
    fi

    if test x$op_no_ld = x; then
      echo "\$ $LD_CMD -o app test.o" >> iflib.log
      $LD_CMD -o app test.o >> iflib.log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        script_exit $ret
      fi
    fi
    echo_status "%s\n" "OK"
    rm -f test.o
  done
  rm -f $test_cc2
fi

# CHECKING SOURCE FILES
if test -n "$op_src"; then
  for src in $op_src; do
    if echo -n "$src" | grep "^/" > /dev/null; then : ; else
      src="$orig_dir/$src"
    fi

    echo_status "%s" "checking source file $src ... "

    if test ! -f $src; then
      echo_status "%s\n" "Failed"
      echo_status "%s\n" "  file $src not found"
      script_exit 1
    fi
    cp $src .
    src_base=`basename $src`

    echo "\$ $CC_CMD -c -o test.o $src_base" >> iflib.log
    $CC_CMD -c -o test.o $src_base >> iflib.log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      script_exit $ret
    fi

    if test x$op_no_ld = x; then
      echo "\$ $LD_CMD -o app test.o" >> iflib.log
      $LD_CMD -o app test.o >> iflib.log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        script_exit $ret
      fi
    fi
    echo_status "%s\n" "OK"
    rm -f test.o $src_base
  done
fi

# READING DEFINES
if test -n "$op_rdef"; then
  cat >>$test_cc2 <<EOF
IFLIB_DEFVAL=$op_rdef
EOF
  $CC_CMD $CPP_FLAG $test_cc2 2>/dev/null > test_c.out
  cat test_c.out | grep "^IFLIB_DEFVAL" | sed 's/=\(.*\)$/="\1"/' > test.sh
  . ./test.sh
  IFLIB_DEFVAL=`echo "$IFLIB_DEFVAL" | sed 's/^ *//' | sed 's/ *$//'`
  if test -n "$IFLIB_DEFVAL"; then
    IFLIB_DEFVAL=`echo -n "$IFLIB_DEFVAL" | sed 's/#c0d04567-cf3d-4a16-844e-3d7e0476b9b8#//g'`
    printf "%s\n" "$IFLIB_DEFVAL"
  fi
  rm -f $test_cc2
fi

script_exit 0

