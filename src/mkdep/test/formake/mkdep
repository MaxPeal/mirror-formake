#!/bin/sh
#
# Author: Oleksiy Chernyavskyy <ochern@rocketmail.com>
#

script_name=`basename $0`
script_dir=`dirname $0`
cc_cfg=/tmp/mkdep_$$_cc.cfg
tmp_file=/tmp/dep$$.t
tmp_file2=/tmp/dep$$.t2
tmp_file3=/tmp/dep$$.t3

print_help() {
cat <<EOF
Generate dependencies of C/C++ source files for Makefile

${script_name} [-c++] [-cc=cmd] [-o object] [-cflags=flags] [-I<path>] [-D<define>[=value]] [-stdout|-d file|-print-script] src..

Options:
  -c++              force using C++ compiler [autodetect]
  -cc=cmd           compiler command
  -o object         output object file
  -cflags=flags     compiler flags
  -I<path>          headers path
  -D<name>[=value]  define a CPP macro
  -stdout           print dependency information to a standard output
  -d file           specify output dependency file
  src..             source files
EOF
}

source_num=0
op_sources=
while test $# -gt 0; do
  case $1 in
    -h|-help|--help)
      print_help
      exit 0
      ;;
    -c++)
      op_cxx=1
      ;;
    -cc)
      shift
      if test -z "$1"; then
        echo "$script_name: error. Parameter -cc requires argument" >&2
        exit 1
      fi
      op_cc=$1
      ;;
    -o)
      shift
      if test -z "$1"; then
        echo "$script_name: error. Parameter -o requires argument" >&2
        exit 1
      fi
      op_object=$1
      ;;
    -cflags=*)
      op_cflags=`echo -n "$1" | sed 's/^-cflags=//'`
      ;;
    -I*)
      op_cflags2="$op_cflags2 $1"
      ;;
    -D*)
      op_cflags2="$op_cflags2 $1"
      ;;
    -stdout)
      op_stdout=1
      op_out_file=
      ;;
    -d)
      shift
      if test -z "$1"; then
        echo "$script_name: error. Parameter -d requires argument" >&2
        exit 1
      fi
      op_out_file=$1
      op_stdout=
      ;;
    -print-script)
      op_print_script=1
      ;;
    *.c)
      op_sources="$op_sources $1"
      source_num=`expr $source_num + 1`
      have_c=1
      ;;
    *.C|*.[Cc][Cc]|*.[Cc][Pp][Pp]|*.[Cc][Xx][Xx])
      op_sources="$op_sources $1"
      source_num=`expr $source_num + 1`
      have_cxx=1
      ;;
    *)
      echo "$script_name: error. Invalid parameter: $1" >&2
      exit 1
      ;;
  esac
  shift
done

if test -z "$op_sources"; then
  echo "$script_name: no source files specified" >&2
  exit 1
fi

if test $source_num -gt 1 && test -n "$op_object"; then
  echo "$script_name: error. Parameter '-o' can't be specified for multiple sources" >&2
  exit 1
fi

if test -n "$have_cxx$op_cxx"; then
  cstem_cmd="cstem+"
else
  cstem_cmd="cstem"
fi

if $cstem_cmd -h >/dev/null 2>&1; then
  :
elif $script_dir/$cstem_cmd -h >/dev/null 2>&1; then
  cstem_cmd=$script_dir/$cstem_cmd
else
  echo "$script_name: error. $cstem_cmd not found" >&2
  exit 1
fi

cc_cmd=$op_cc
cc_flags=`echo -n "$cc_flags $op_cflags $op_cflags2" | sed 's/^ *//' | sed 's/ *$//'`
if test -z "$cc_cmd$cc_flags"; then
  cc_cmd=`$cstem_cmd -cmd`
  if test -z "$cc_cmd"; then
    echo "$script_name: compiler not found" >&2
    exit 1
  fi
  cc_type=`$cstem_cmd -id`
  cc_flags=`$cstem_cmd -cflags`
  cc_ver=`$cstem_cmd -ver`
else
  if test -z "$cc_cmd"; then
    cc_cmd=`$cstem_cmd -cmd`
  fi
  $cstem_cmd probe -cc="$cc_cmd" -cflags="$cc_flags" > $cc_cfg
  . $cc_cfg
  rm -f $cc_cfg
  if test -z "$CC_CMD"; then
    echo "$script_name: compiler $cc_cmd not found" >&2
    exit 1
  fi
  cc_cmd=$CC_CMD
  cc_type=$CC_ID
  cc_ver=$CC_VERSION
fi

if test -n "$op_out_file"; then
  rm -f $op_out_file
fi
rm -f $tmp_file1
rm -f $tmp_file2
rm -f $tmp_file3
for file in $op_sources; do
  if test -n "$op_object"; then
    object=$op_object
    out_dir=`dirname $op_object`
  else
    object=`echo -n "$file" | sed 's/\.[^.]*$/.o/'`
    out_dir="."
  fi
  base_name=`basename "$object" | sed 's/\.[^.]*$//'`
  case "$cc_type" in
    gcc)
      if test x$op_print_script = x1; then
        if test -n "$op_out_file"; then
          out_string=">$op_out_file"
          out_string_add=">>$op_out_file"
        elif test x$op_stdout = x1; then
          out_string=
          out_string_add=
        else
          out_string=">$out_dir/${base_name}.d"
          out_string_add=">>$out_dir/${base_name}.d"
        fi
        cat <<EOF
$cc_cmd -E $cc_flags $file | sed -n 's!^# *[0-9][0-9]* *"\([^<][^"]*\)".*!\1!p' | sort | uniq >/tmp/dep\$\$.t && cat /tmp/dep\$\$.t | sed "s!^!$out_dir/${base_name}.o: !" $out_string; cat /tmp/dep\$\$.t | sed 's/ *$/:/' $out_string_add; rm -f /tmp/dep\$\$.t
EOF
      else
        case "$cc_ver" in
          4.*)
            $cc_cmd -M -MT ${out_dir}/${base_name}.o -MP $cc_flags $file
            ;;
          *)
            $cc_cmd -E $cc_flags $file | sed -n 's!^# *[0-9][0-9]* *"\([^<][^"]*\)".*!\1!p' | sort | uniq >$tmp_file
            cat $tmp_file | sed "s/^/$out_dir\/${base_name}.o: /" >$tmp_file2
            cat $tmp_file | sed 's/ *$/:/' >>$tmp_file2
            ;;
        esac
      fi
      ;;
    *)
      echo "$script_name: unsupported compiler" >&2
      exit 0
      ;;
  esac
  if test x$op_print_script = x; then
    if test -n "$op_out_file"; then
      cat $tmp_file2 >>$op_out_file
    elif test x$op_stdout = x1; then
      if test -f $tmp_file2; then
        cat $tmp_file2 >>$tmp_file3
      fi
    else
      cat $tmp_file2 >$out_dir/${base_name}.d
    fi
  fi
done

if test x$op_print_script = x; then
  if test -n "$op_out_file" && test -f $op_out_file; then
    cat $op_out_file | sort | uniq >$tmp_file
    cat $tmp_file > $op_out_file
  elif test x$op_stdout = x1 && test -f $tmp_file3; then
    cat $tmp_file3 | sort | uniq
  fi
  rm -f $tmp_file
  rm -f $tmp_file2
  rm -f $tmp_file3
fi

